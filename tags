!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
1vs1mummer1	MUMmer/docs/web/manual/index.html	/^<h4><a name="1vs1mummer1" id="1vs1mummer1"><\/a>4.1.1. Highly similar sequences $/;"	a
1vs1mummer3	MUMmer/docs/web/manual/index.html	/^<h4><a name="1vs1mummer3"><\/a>4.1.2. Highly similar sequences with rearrangements<\/h4>$/;"	a
1vs1nucmer	MUMmer/docs/web/manual/index.html	/^<h4><a name="1vs1nucmer"><\/a>4.1.3. Fairly similar sequences<\/h4>$/;"	a
1vs1promer	MUMmer/docs/web/manual/index.html	/^<h4><a name="1vs1promer"><\/a>4.1.4. Fairly dissimilar sequences<\/h4>$/;"	a
AA_LEN	MUMmer/src/tigr/translate.hh	40;"	d
AA_LINE_LEN	MUMmer/src/tigr/translate.hh	42;"	d
ACCESSBRANCHBROTHER	MUMmer/src/kurtz/streesrc/streemac.h	26;"	d
ACCESSDEPTH	MUMmer/src/kurtz/streesrc/streemac.h	22;"	d
ACCESSFIRSTCHILD	MUMmer/src/kurtz/streesrc/streemac.h	25;"	d
ACCESSHEADPOS	MUMmer/src/kurtz/streesrc/streemac.h	23;"	d
ACCESSSUFFIXLINK	MUMmer/src/kurtz/streesrc/streemac.h	24;"	d
ADDAMOUNT	MUMmer/src/kurtz/streesrc/depthtab.c	18;"	d	file:
ADDFACTOR	MUMmer/src/kurtz/streesrc/construct.c	91;"	d	file:
ADDOPTION	MUMmer/src/kurtz/libbasedir/optdesc.h	42;"	d
ALL	MUMmer/scripts/Makefile	/^ALL := exact-tandems mapview mummerplot nucmer promer \\$/;"	m
ALL	MUMmer/src/kurtz/mm3src/Makefile	/^ALL := maxmat3.x maxmat3.dbg.x$/;"	m
ALL	MUMmer/src/tigr/Makefile	/^ALL := annotate combineMUMs delta-filter gaps mgaps \\$/;"	m
ALLOCSPACE	MUMmer/src/kurtz/libbasedir/spacedef.h	69;"	d
ALLOCVIAFATAL	MUMmer/src/kurtz/libbasedir/space.c	49;"	d	file:
ALLOW_WRAPAROUND	MUMmer/src/tigr/gaps.cc	/^const int  ALLOW_WRAPAROUND = FALSE;$/;"	v
AR	MUMmer/Makefile	/^AR   := $(filter \/%,$(shell \/bin\/sh -c 'type ar'))$/;"	m
ARGS_H	MUMmer/src/kurtz/libbasedir/args.h	12;"	d
ARRAYDEF_H	MUMmer/src/kurtz/libbasedir/arraydef.h	12;"	d
ASSIGNDEFAULTSHOWDESC	MUMmer/src/kurtz/libbasedir/multidef.h	74;"	d
ASSIGNMAXMATCOMPLEMENT	MUMmer/src/kurtz/mm3src/procmaxmat.c	139;"	d	file:
AUX_BIN_DIR	MUMmer/Makefile	/^AUX_BIN_DIR := $(TOP_DIR)\/aux_bin$/;"	m
AUX_BIN_DIR	MUMmer/scripts/Makefile	/^AUX_BIN_DIR := $(CURDIR)$/;"	m
AUX_BIN_DIR	MUMmer/src/tigr/Makefile	/^AUX_BIN_DIR := $(CURDIR)$/;"	m
AUX_BIN_RULE	MUMmer/src/tigr/Makefile	/^AUX_BIN_RULE = $(CXX) $(CXXFLAGS) $^ -o $(AUX_BIN_DIR)\/$@; \\$/;"	m
Add_Coverage	MUMmer/src/tigr/combineMUMs.cc	/^void  Add_Coverage$/;"	f
Add_Duplicates	MUMmer/src/tigr/repeat-match.cc	/^int  Add_Duplicates  (int Start, int End, int Leaf, int Leaf_Depth)$/;"	f
Add_String	MUMmer/src/tigr/repeat-match.cc	/^int  Add_String  (int Start, int Root)$/;"	f
AfP	MUMmer/src/tigr/postnuc.cc	/^  FastaRecord * AfP;         \/\/ a pointer to the reference sequence record$/;"	m	struct:Synteny	file:
AfP	MUMmer/src/tigr/postpro.cc	/^  FastaRecord * AfP;         \/\/ a pointer to the reference sequence record$/;"	m	struct:Synteny	file:
AlignStats	MUMmer/src/tigr/show-aligns.cc	/^struct AlignStats$/;"	s	file:
AlignStats	MUMmer/src/tigr/show-coords.cc	/^struct AlignStats$/;"	s	file:
AlignStats	MUMmer/src/tigr/show-tiling.cc	/^struct AlignStats$/;"	s	file:
Alignment	MUMmer/src/tigr/postnuc.cc	/^struct Alignment$/;"	s	file:
Alignment	MUMmer/src/tigr/postpro.cc	/^struct Alignment$/;"	s	file:
AlignmentType_t	MUMmer/src/tigr/delta.hh	/^typedef char AlignmentType_t;               \/\/!< type of alignment data$/;"	t
Aligns	MUMmer/src/tigr/show-tiling.cc	/^  vector<AlignStats> Aligns;               \/\/ alignments for this contig$/;"	m	struct:QueryContig	file:
Argctype	MUMmer/src/kurtz/libbasedir/types.h	/^typedef int Argctype;               \/\/ \\Typedef{Argctype}$/;"	t
ArrayCharacters	MUMmer/src/kurtz/libbasedir/arraydef.h	/^typedef ArrayUchar ArrayCharacters;     \/\/ \\Typedef{ArrayCharacters}$/;"	t
ArrayPosition	MUMmer/src/kurtz/libbasedir/arraydef.h	/^typedef ArrayUint  ArrayPosition;       \/\/ \\Typedef{ArrayPosition}$/;"	t
ArrayStrings	MUMmer/src/kurtz/libbasedir/arraydef.h	/^} ArrayStrings;   \/\/ \\Typedef{ArrayStrings}$/;"	t	typeref:struct:__anon20
AscendingClusterSort	MUMmer/src/tigr/postnuc.cc	/^struct AscendingClusterSort$/;"	s	file:
AscendingClusterSort	MUMmer/src/tigr/postpro.cc	/^struct AscendingClusterSort$/;"	s	file:
AvailableCompare	MUMmer/docs/web/manual/index.html	/^<h4><a name="AvailableCompare"><\/a>1.2.1. Available sequence<\/h4>$/;"	a
BACKWARD_SEARCH	MUMmer/src/tigr/sw_align.hh	/^static const unsigned int BACKWARD_SEARCH = 0x2;$/;"	v
BAD_PEP_CHAR	MUMmer/src/tigr/translate.hh	20;"	d
BIN_DIR	MUMmer/Makefile	/^BIN_DIR     := $(TOP_DIR)$/;"	m
BIN_DIR	MUMmer/scripts/Makefile	/^BIN_DIR := $(CURDIR)$/;"	m
BIN_DIR	MUMmer/src/kurtz/mm3src/Makefile	/^BIN_DIR := $(CURDIR)$/;"	m
BIN_DIR	MUMmer/src/tigr/Makefile	/^BIN_DIR := $(CURDIR)$/;"	m
BIN_RULE	MUMmer/src/tigr/Makefile	/^BIN_RULE = $(CXX) $(CXXFLAGS) $^ -o $(BIN_DIR)\/$@; \\$/;"	m
BLOSUM45	MUMmer/src/tigr/sw_alignscore.hh	/^const int BLOSUM45 = 1;$/;"	v
BLOSUM62	MUMmer/src/tigr/sw_alignscore.hh	/^const int BLOSUM62 = 2;$/;"	v
BLOSUM80	MUMmer/src/tigr/sw_alignscore.hh	/^const int BLOSUM80 = 3;$/;"	v
BOOL	MUMmer/src/kurtz/libbasedir/types.h	215;"	d
BRADDR2NUM	MUMmer/src/kurtz/streesrc/streemac.h	60;"	d
BRANCH_PT_ERROR_VALUE	MUMmer/src/tigr/combineMUMs.cc	22;"	d	file:
BRANCH_PT_MATCH_VALUE	MUMmer/src/tigr/combineMUMs.cc	18;"	d	file:
Background	papers/APBC2012/wga_APBC2012.tex	/^        \\paragraph*{Background:} $/;"	P
Background	papers/APBC2012/wga_APBC2012.tex	/^\\section*{Background}$/;"	s
Basic Notions	MUMmer/docs/maxmat3man.tex	/^\\section{Basic Notions}\\label{SecBasicNotions}$/;"	s
Bf	MUMmer/src/tigr/postnuc.cc	/^  FastaRecord Bf;            \/\/ the query sequence record (w\/o the sequence)$/;"	m	struct:Synteny	file:
Bf	MUMmer/src/tigr/postpro.cc	/^  FastaRecord Bf;            \/\/ the query sequence record (w\/o the sequence)$/;"	m	struct:Synteny	file:
Binomial_Bound	MUMmer/src/tigr/combineMUMs.cc	/^int  Binomial_Bound$/;"	f
BitScanR	vector/vectori128.h	/^struct BitScanR {$/;"	s
BitScanR	vector/vectori128.h	/^template <> struct BitScanR<0> {enum {val = 0};};                    \/\/ Avoid infinite template recursion$/;"	s
Blockdescription	MUMmer/src/kurtz/libbasedir/space.c	/^} Blockdescription;$/;"	t	typeref:struct:__anon24	file:
Branch_Pt_Error_Value	MUMmer/src/tigr/combineMUMs.cc	/^float  Branch_Pt_Error_Value = BRANCH_PT_ERROR_VALUE;$/;"	v
Branch_Pt_Match_Value	MUMmer/src/tigr/combineMUMs.cc	/^float Branch_Pt_Match_Value = BRANCH_PT_MATCH_VALUE;$/;"	v
Branchinfo	MUMmer/src/kurtz/streesrc/streetyp.h	/^} Branchinfo;               \/\/ \\Typedef{Branchinfo}$/;"	t	typeref:struct:__anon8
Bref	MUMmer/src/kurtz/streesrc/streetyp.h	/^DECLAREARRAYSTRUCT(Bref);$/;"	v
Bref	MUMmer/src/kurtz/streesrc/streetyp.h	/^typedef Uint * Bref;    \/\/ \\Typedef{Bref}$/;"	t
Build_Suffix_Tree	MUMmer/src/tigr/repeat-match.cc	/^int  Build_Suffix_Tree  (int Start)$/;"	f
By_Cluster	MUMmer/src/tigr/mgaps.cc	/^static int  By_Cluster$/;"	f	file:
By_Start2	MUMmer/src/tigr/mgaps.cc	/^static int  By_Start2$/;"	f	file:
CASE	MUMmer/src/kurtz/libbasedir/debugdef.h	168;"	d
CASE	MUMmer/src/kurtz/libbasedir/debugdef.h	217;"	d
CASELINE	MUMmer/src/kurtz/libbasedir/debugdef.h	169;"	d
CASELINE	MUMmer/src/kurtz/libbasedir/debugdef.h	218;"	d
CC	MUMmer/Makefile	/^CC   := $(filter \/%,$(shell \/bin\/sh -c 'type gcc'))$/;"	m
CFLAGS	MUMmer/Makefile	/^CFLAGS = -O3 -fopenmp$/;"	m
CHARDEF_H	MUMmer/src/kurtz/libbasedir/chardef.h	12;"	d
CHARS_PER_LINE	MUMmer/src/tigr/prenuc.cc	24;"	d	file:
CHARS_PER_LINE	MUMmer/src/tigr/prepro.cc	38;"	d	file:
CHARS_PER_LINE	MUMmer/src/tigr/show-tiling.cc	/^const int CHARS_PER_LINE = 60;$/;"	v
CHECKADDR	MUMmer/src/kurtz/streesrc/streemac.h	66;"	d
CHECKADDR	MUMmer/src/kurtz/streesrc/streemac.h	87;"	d
CHECKALLTYPESIZES	MUMmer/src/kurtz/libbasedir/types.h	186;"	d
CHECKARGNUM	MUMmer/src/kurtz/libbasedir/args.h	28;"	d
CHECKARRAYSPACE	MUMmer/src/kurtz/libbasedir/arraydef.h	62;"	d
CHECKARRAYSPACEMULTI	MUMmer/src/kurtz/libbasedir/arraydef.h	80;"	d
CHECKIFLOCATIONISVALID	MUMmer/src/kurtz/mm3src/findmaxmat.c	171;"	d	file:
CHECKIFLOCATIONISVALID	MUMmer/src/kurtz/mm3src/findmaxmat.c	190;"	d	file:
CHECKSTEP	MUMmer/src/kurtz/streesrc/construct.c	1003;"	d	file:
CHECKSTEP	MUMmer/src/kurtz/streesrc/construct.c	1013;"	d	file:
CHECKSTEP	MUMmer/src/kurtz/streesrc/construct.c	1026;"	d	file:
CHECKSTEP	MUMmer/src/kurtz/streesrc/construct.c	1036;"	d	file:
CHECKSTEP	MUMmer/src/kurtz/streesrc/construct.c	1060;"	d	file:
CHECKSTEP	MUMmer/src/kurtz/streesrc/construct.c	1096;"	d	file:
CHECKSTEP	MUMmer/src/kurtz/streesrc/construct.c	962;"	d	file:
CHECKSTEP	MUMmer/src/kurtz/streesrc/construct.c	972;"	d	file:
CHECKTEXTLEN	MUMmer/src/kurtz/streesrc/construct.c	30;"	d	file:
CHECKTYPESIZE	MUMmer/src/kurtz/libbasedir/types.h	163;"	d
CHILD	sparseSA.hpp	/^  vector<int> CHILD; \/\/child table$/;"	m	struct:sparseSA
CHILDREFERSTOLEAF	MUMmer/src/kurtz/streesrc/streehuge.h	92;"	d
CHILDREFERSTOLEAF	MUMmer/src/kurtz/streesrc/streelarge.h	114;"	d
CHILDREFERSTOLEAF	MUMmer/src/kurtz/streesrc/streesmall.h	100;"	d
CLEARBITTAB	MUMmer/src/kurtz/libbasedir/intbits.h	73;"	d
COMPLETELARGEFIRST	MUMmer/src/kurtz/streesrc/construct.c	1010;"	d	file:
COMPLETELARGEFIRST	MUMmer/src/kurtz/streesrc/construct.c	1021;"	d	file:
COMPLETELARGEFIRST	MUMmer/src/kurtz/streesrc/construct.c	1033;"	d	file:
COMPLETELARGEFIRST	MUMmer/src/kurtz/streesrc/construct.c	1056;"	d	file:
COMPLETELARGEFIRST	MUMmer/src/kurtz/streesrc/construct.c	1093;"	d	file:
COMPLETELARGEFIRST	MUMmer/src/kurtz/streesrc/construct.c	959;"	d	file:
COMPLETELARGEFIRST	MUMmer/src/kurtz/streesrc/construct.c	969;"	d	file:
COMPLETELARGEFIRST	MUMmer/src/kurtz/streesrc/construct.c	989;"	d	file:
COMPLETELARGESECOND	MUMmer/src/kurtz/streesrc/construct.c	1011;"	d	file:
COMPLETELARGESECOND	MUMmer/src/kurtz/streesrc/construct.c	1022;"	d	file:
COMPLETELARGESECOND	MUMmer/src/kurtz/streesrc/construct.c	1034;"	d	file:
COMPLETELARGESECOND	MUMmer/src/kurtz/streesrc/construct.c	1057;"	d	file:
COMPLETELARGESECOND	MUMmer/src/kurtz/streesrc/construct.c	1094;"	d	file:
COMPLETELARGESECOND	MUMmer/src/kurtz/streesrc/construct.c	960;"	d	file:
COMPLETELARGESECOND	MUMmer/src/kurtz/streesrc/construct.c	970;"	d	file:
COMPLETELARGESECOND	MUMmer/src/kurtz/streesrc/construct.c	996;"	d	file:
COMPLEXVEC_H	vector/special/complexvec.h	27;"	d
CONDSTAMPC	MUMmer/src/kurtz/libbasedir/debugdef.h	34;"	d
CONSTRUCT	MUMmer/src/kurtz/streesrc/construct.c	1008;"	d	file:
CONSTRUCT	MUMmer/src/kurtz/streesrc/construct.c	1018;"	d	file:
CONSTRUCT	MUMmer/src/kurtz/streesrc/construct.c	1031;"	d	file:
CONSTRUCT	MUMmer/src/kurtz/streesrc/construct.c	1044;"	d	file:
CONSTRUCT	MUMmer/src/kurtz/streesrc/construct.c	1091;"	d	file:
CONSTRUCT	MUMmer/src/kurtz/streesrc/construct.c	957;"	d	file:
CONSTRUCT	MUMmer/src/kurtz/streesrc/construct.c	967;"	d	file:
CONSTRUCT	MUMmer/src/kurtz/streesrc/construct.c	977;"	d	file:
CONSTRUCTSTREE	MUMmer/src/kurtz/streesrc/streemac.h	33;"	d
CONT_GAP_SCORE	MUMmer/src/tigr/sw_alignscore.hh	/^const int CONT_GAP_SCORE [4] = {-7, -1, -1, -1};$/;"	v
COPYMULTISEQ	MUMmer/src/kurtz/libbasedir/multiseq.c	48;"	d	file:
CREATEMEMORYMAP	MUMmer/src/kurtz/libbasedir/spacedef.h	95;"	d
CREATEMEMORYMAPFORFILEDESC	MUMmer/src/kurtz/libbasedir/spacedef.h	98;"	d
CSH	MUMmer/Makefile	/^CSH  := $(filter \/%,$(shell \/bin\/sh -c 'type csh'))$/;"	m
CSH	MUMmer/scripts/Makefile	/^CSH := $(filter \/%,$(shell \/bin\/sh -c 'type csh'))$/;"	m
CXX	MUMmer/Makefile	/^CXX  := $(filter \/%,$(shell \/bin\/sh -c 'type g++'))$/;"	m
CXXFLAGS	MUMmer/Makefile	/^CXXFLAGS = -O3 -fopenmp$/;"	m
CheckSNPs	MUMmer/src/tigr/show-snps.cc	/^void CheckSNPs (DeltaGraph_t & graph)$/;"	f
Check_Labels	MUMmer/src/tigr/mgaps.cc	/^static int  Check_Labels = FALSE;$/;"	v	file:
Child	MUMmer/src/tigr/repeat-match.cc	/^   unsigned  Child : 31;$/;"	m	struct:node	file:
Child_Is_Leaf	MUMmer/src/tigr/repeat-match.cc	/^   unsigned  Child_Is_Leaf : 1;$/;"	m	struct:node	file:
Cluster	MUMmer/src/tigr/postnuc.cc	/^struct Cluster$/;"	s	file:
Cluster	MUMmer/src/tigr/postpro.cc	/^struct Cluster$/;"	s	file:
Cmp	MUMmer/src/tigr/gaps.cc	/^int  Cmp  (const void * A, const void * B)$/;"	f
CompareIUPAC	MUMmer/src/tigr/tigrinc.cc	/^bool CompareIUPAC (char x, char y)$/;"	f
Complement	MUMmer/src/tigr/tigrinc.cc	/^char  Complement  (char Ch)$/;"	f
Complex2d	vector/special/complexvec.h	/^    Complex2d() {$/;"	f	class:Complex2d
Complex2d	vector/special/complexvec.h	/^    Complex2d(__m128d const & x) {$/;"	f	class:Complex2d
Complex2d	vector/special/complexvec.h	/^    Complex2d(double re) {$/;"	f	class:Complex2d
Complex2d	vector/special/complexvec.h	/^    Complex2d(double re, double im) {$/;"	f	class:Complex2d
Complex2d	vector/special/complexvec.h	/^class Complex2d {$/;"	c
Complex2f	vector/special/complexvec.h	/^    Complex2f() {$/;"	f	class:Complex2f
Complex2f	vector/special/complexvec.h	/^    Complex2f(__m128 const & x) {$/;"	f	class:Complex2f
Complex2f	vector/special/complexvec.h	/^    Complex2f(float re) {$/;"	f	class:Complex2f
Complex2f	vector/special/complexvec.h	/^    Complex2f(float re, float im) {$/;"	f	class:Complex2f
Complex2f	vector/special/complexvec.h	/^class Complex2f {$/;"	c
Complex4d	vector/special/complexvec.h	/^    Complex4d() {$/;"	f	class:Complex4d
Complex4d	vector/special/complexvec.h	/^    Complex4d(Complex2d const & a) {$/;"	f	class:Complex4d
Complex4d	vector/special/complexvec.h	/^    Complex4d(Complex2d const & a, Complex2d const & b) {$/;"	f	class:Complex4d
Complex4d	vector/special/complexvec.h	/^    Complex4d(__m256d const & x) {$/;"	f	class:Complex4d
Complex4d	vector/special/complexvec.h	/^    Complex4d(double re) {$/;"	f	class:Complex4d
Complex4d	vector/special/complexvec.h	/^    Complex4d(double re, double im) {$/;"	f	class:Complex4d
Complex4d	vector/special/complexvec.h	/^    Complex4d(double re0, double im0, double re1, double im1) $/;"	f	class:Complex4d
Complex4d	vector/special/complexvec.h	/^class Complex4d {$/;"	c
Complex4f	vector/special/complexvec.h	/^    Complex4f() {$/;"	f	class:Complex4f
Complex4f	vector/special/complexvec.h	/^    Complex4f(Complex2f const & a0, Complex2f const & a1) {$/;"	f	class:Complex4f
Complex4f	vector/special/complexvec.h	/^    Complex4f(__m128 const & x) {$/;"	f	class:Complex4f
Complex4f	vector/special/complexvec.h	/^    Complex4f(float re) {$/;"	f	class:Complex4f
Complex4f	vector/special/complexvec.h	/^    Complex4f(float re, float im) {$/;"	f	class:Complex4f
Complex4f	vector/special/complexvec.h	/^    Complex4f(float re0, float im0, float re1, float im1) {$/;"	f	class:Complex4f
Complex4f	vector/special/complexvec.h	/^class Complex4f {$/;"	c
Complex8f	vector/special/complexvec.h	/^    Complex8f() {$/;"	f	class:Complex8f
Complex8f	vector/special/complexvec.h	/^    Complex8f(Complex2f const & a) {$/;"	f	class:Complex8f
Complex8f	vector/special/complexvec.h	/^    Complex8f(Complex2f const & a0, Complex2f const & a1, Complex2f const & a2, Complex2f const & a3) {$/;"	f	class:Complex8f
Complex8f	vector/special/complexvec.h	/^    Complex8f(Complex4f const & a, Complex4f const & b) {$/;"	f	class:Complex8f
Complex8f	vector/special/complexvec.h	/^    Complex8f(__m256 const & x) {$/;"	f	class:Complex8f
Complex8f	vector/special/complexvec.h	/^    Complex8f(float re) {$/;"	f	class:Complex8f
Complex8f	vector/special/complexvec.h	/^    Complex8f(float re, float im) {$/;"	f	class:Complex8f
Complex8f	vector/special/complexvec.h	/^    Complex8f(float re0, float im0, float re1, float im1, float re2, float im2, float re3, float im3) $/;"	f	class:Complex8f
Complex8f	vector/special/complexvec.h	/^class Complex8f {$/;"	c
Conclusions	eval2012/evaluation2012.tex	/^\\section{Conclusions}$/;"	s
Conclusions	papers/APBC2012/wga_APBC2012.tex	/^        \\paragraph*{Conclusions:} $/;"	P
Conclusions	papers/APBC2012/wga_APBC2012.tex	/^\\section*{Conclusions}$/;"	s
Conclusions	presentations/LLEIDA/wga_hpc.tex	/^\\section{Conclusions}$/;"	s
Consec_Non_ACGT	MUMmer/src/tigr/combineMUMs.cc	/^int  Consec_Non_ACGT = 0;$/;"	v
Const_int_t	vector/instrset.h	/^template <int32_t  n> class Const_int_t  {};     \/\/ represent compile-time signed integer constant$/;"	c
Const_uint_t	vector/instrset.h	/^template <uint32_t n> class Const_uint_t {};     \/\/ represent compile-time unsigned integer constant$/;"	c
Countstate	MUMmer/src/kurtz/streesrc/addleafcount.c	/^} Countstate;$/;"	t	typeref:struct:__anon6	file:
Cover_t	MUMmer/src/tigr/combineMUMs.cc	/^  }  Cover_t;$/;"	t	typeref:struct:s_Cover_t	file:
Ctypeargumenttype	MUMmer/src/kurtz/libbasedir/types.h	/^typedef int Ctypeargumenttype;      \/\/ \\Typedef{Ctypeargumenttype}$/;"	t
Curr_ID	MUMmer/src/tigr/repeat-match.cc	/^int  Curr_ID;$/;"	v
Curr_String_ID	MUMmer/src/tigr/repeat-match.cc	/^int  Curr_String_ID;$/;"	v
DATA_TYPE	MUMmer/src/tigr/show-aligns.cc	/^int DATA_TYPE = NUCMER_DATA;$/;"	v
DATA_TYPE	MUMmer/src/tigr/show-tiling.cc	/^int   DATA_TYPE = NUCMER_DATA;         \/\/ set by .delta header$/;"	v
DBGOBJECTS	MUMmer/src/kurtz/streesrc/Makefile	/^DBGOBJECTS=construct.dbg.o access.dbg.o streedbg.dbg.o depthtab.dbg.o\\$/;"	m
DBGOBJECTS4	MUMmer/src/kurtz/streesrc/Makefile	/^DBGOBJECTS4=construct.dbg.4.o access.dbg.4.o streedbg.dbg.4.o\\$/;"	m
DEBUG	MUMmer/src/tigr/repeat-match.cc	16;"	d	file:
DEBUG0	MUMmer/src/kurtz/libbasedir/debugdef.h	129;"	d
DEBUG0	MUMmer/src/kurtz/libbasedir/debugdef.h	206;"	d
DEBUG1	MUMmer/src/kurtz/libbasedir/debugdef.h	131;"	d
DEBUG1	MUMmer/src/kurtz/libbasedir/debugdef.h	207;"	d
DEBUG2	MUMmer/src/kurtz/libbasedir/debugdef.h	133;"	d
DEBUG2	MUMmer/src/kurtz/libbasedir/debugdef.h	208;"	d
DEBUG3	MUMmer/src/kurtz/libbasedir/debugdef.h	135;"	d
DEBUG3	MUMmer/src/kurtz/libbasedir/debugdef.h	209;"	d
DEBUG4	MUMmer/src/kurtz/libbasedir/debugdef.h	137;"	d
DEBUG4	MUMmer/src/kurtz/libbasedir/debugdef.h	210;"	d
DEBUG5	MUMmer/src/kurtz/libbasedir/debugdef.h	139;"	d
DEBUG5	MUMmer/src/kurtz/libbasedir/debugdef.h	211;"	d
DEBUGCLOSEFILE	MUMmer/src/kurtz/libbasedir/debugdef.h	151;"	d
DEBUGCLOSEFILE	MUMmer/src/kurtz/libbasedir/debugdef.h	216;"	d
DEBUGCODE	MUMmer/src/kurtz/libbasedir/debugdef.h	159;"	d
DEBUGCODE	MUMmer/src/kurtz/libbasedir/debugdef.h	213;"	d
DEBUGDECL	MUMmer/src/kurtz/libbasedir/debugdef.h	158;"	d
DEBUGDECL	MUMmer/src/kurtz/libbasedir/debugdef.h	212;"	d
DEBUGDEFAULT	MUMmer/src/kurtz/streesrc/construct.c	25;"	d	file:
DEBUGDEF_H	MUMmer/src/kurtz/libbasedir/debugdef.h	12;"	d
DEBUGLEVELSET	MUMmer/src/kurtz/libbasedir/debugdef.h	149;"	d
DEBUGLEVELSET	MUMmer/src/kurtz/libbasedir/debugdef.h	214;"	d
DEBUGLEVELSETFILENAME	MUMmer/src/kurtz/libbasedir/debugdef.h	150;"	d
DEBUGLEVELSETFILENAME	MUMmer/src/kurtz/libbasedir/debugdef.h	215;"	d
DECLAREARRAYSTRUCT	MUMmer/src/kurtz/libbasedir/arraydef.h	40;"	d
DECLAREEXTRA	MUMmer/src/kurtz/streesrc/construct.c	1009;"	d	file:
DECLAREEXTRA	MUMmer/src/kurtz/streesrc/construct.c	1020;"	d	file:
DECLAREEXTRA	MUMmer/src/kurtz/streesrc/construct.c	1032;"	d	file:
DECLAREEXTRA	MUMmer/src/kurtz/streesrc/construct.c	1045;"	d	file:
DECLAREEXTRA	MUMmer/src/kurtz/streesrc/construct.c	1092;"	d	file:
DECLAREEXTRA	MUMmer/src/kurtz/streesrc/construct.c	958;"	d	file:
DECLAREEXTRA	MUMmer/src/kurtz/streesrc/construct.c	968;"	d	file:
DECLAREEXTRA	MUMmer/src/kurtz/streesrc/construct.c	979;"	d	file:
DEFAULTMINUNIQUEMATCHLEN	MUMmer/src/kurtz/mm3src/maxmatopt.c	34;"	d	file:
DEFAULT_BANDING	MUMmer/src/tigr/sw_align.cc	/^static const int DEFAULT_BANDING = 0; \/\/ no banding by default$/;"	v	file:
DEFAULT_BREAK_LEN	MUMmer/src/tigr/sw_align.cc	/^static const int DEFAULT_BREAK_LEN = 200;$/;"	v	file:
DEFAULT_ERROR_FILE_NAME	MUMmer/src/tigr/combineMUMs.cc	26;"	d	file:
DEFAULT_FIXED_SEPARATION	MUMmer/src/tigr/mgaps.cc	/^const int  DEFAULT_FIXED_SEPARATION = 5;$/;"	v
DEFAULT_MASK_LEN	MUMmer/src/tigr/prepro.cc	/^const long int DEFAULT_MASK_LEN = 10;$/;"	v
DEFAULT_MAX_SEPARATION	MUMmer/src/tigr/mgaps.cc	/^const long int  DEFAULT_MAX_SEPARATION = 1000;$/;"	v
DEFAULT_MIN_CONTIG_LENGTH	MUMmer/src/tigr/show-tiling.cc	/^const long int DEFAULT_MIN_CONTIG_LENGTH        =     1;$/;"	v
DEFAULT_MIN_MATCH_LEN	MUMmer/src/tigr/repeat-match.cc	/^const int  DEFAULT_MIN_MATCH_LEN = 20;$/;"	v
DEFAULT_MIN_OUTPUT_SCORE	MUMmer/src/tigr/mgaps.cc	/^const long int  DEFAULT_MIN_OUTPUT_SCORE = 200;$/;"	v
DEFAULT_NUCMER_MAX_GAP_SIZE	MUMmer/src/tigr/show-tiling.cc	/^const long int DEFAULT_NUCMER_MAX_GAP_SIZE      =  1000;$/;"	v
DEFAULT_NUCMER_MIN_COVERAGE	MUMmer/src/tigr/show-tiling.cc	/^const float DEFAULT_NUCMER_MIN_COVERAGE         =  95.0;$/;"	v
DEFAULT_NUCMER_MIN_COVERAGE_DIFF	MUMmer/src/tigr/show-tiling.cc	/^const float DEFAULT_NUCMER_MIN_COVERAGE_DIFF    =  10.0;$/;"	v
DEFAULT_NUCMER_MIN_PIDY	MUMmer/src/tigr/show-tiling.cc	/^const float DEFAULT_NUCMER_MIN_PIDY             =  90.0;$/;"	v
DEFAULT_PAD	MUMmer/src/tigr/combineMUMs.cc	30;"	d	file:
DEFAULT_PROMER_MAX_GAP_SIZE	MUMmer/src/tigr/show-tiling.cc	/^const long int DEFAULT_PROMER_MAX_GAP_SIZE      =    -1;$/;"	v
DEFAULT_PROMER_MIN_COVERAGE	MUMmer/src/tigr/show-tiling.cc	/^const float DEFAULT_PROMER_MIN_COVERAGE         =  50.0;$/;"	v
DEFAULT_PROMER_MIN_COVERAGE_DIFF	MUMmer/src/tigr/show-tiling.cc	/^const float DEFAULT_PROMER_MIN_COVERAGE_DIFF    =  30.0;$/;"	v
DEFAULT_PROMER_MIN_PIDY	MUMmer/src/tigr/show-tiling.cc	/^const float DEFAULT_PROMER_MIN_PIDY             =  55.0;$/;"	v
DEFAULT_SCREEN_WIDTH	MUMmer/src/tigr/show-aligns.cc	37;"	d	file:
DEFAULT_SEPARATION_FACTOR	MUMmer/src/tigr/mgaps.cc	/^const double  DEFAULT_SEPARATION_FACTOR = 0.05;$/;"	v
DELETE	MUMmer/src/tigr/sw_align.cc	/^static const int DELETE = 0;$/;"	v	file:
DELETEMEMORYMAP	MUMmer/src/kurtz/libbasedir/spacedef.h	101;"	d
DESCRIPTION	MUMmer/dnadiff	/^  DESCRIPTION:$/;"	l
DESCRIPTION	MUMmer/mapview	/^  DESCRIPTION:$/;"	l
DESCRIPTION	MUMmer/mummerplot	/^  DESCRIPTION:$/;"	l
DESCRIPTION	MUMmer/nucmer	/^  DESCRIPTION:$/;"	l
DESCRIPTION	MUMmer/promer	/^  DESCRIPTION:$/;"	l
DESCRIPTION	MUMmer/scripts/dnadiff.pl	/^  DESCRIPTION:$/;"	l
DESCRIPTION	MUMmer/scripts/mapview.pl	/^  DESCRIPTION:$/;"	l
DESCRIPTION	MUMmer/scripts/mummerplot.pl	/^  DESCRIPTION:$/;"	l
DESCRIPTION	MUMmer/scripts/nucmer.pl	/^  DESCRIPTION:$/;"	l
DESCRIPTION	MUMmer/scripts/promer.pl	/^  DESCRIPTION:$/;"	l
DESCRIPTIONLENGTH	MUMmer/src/kurtz/libbasedir/multidef.h	66;"	d
DESCRIPTIONPTR	MUMmer/src/kurtz/libbasedir/multidef.h	63;"	d
DESCRIPTIONSTARTDESC	MUMmer/src/kurtz/libbasedir/multidef.h	60;"	d
DFSstate	MUMmer/src/kurtz/streesrc/streetyp.h	/^} DFSstate;      \/\/ \\Typedef{DFSstate}$/;"	t	typeref:struct:__anon12
DIRECTION_BIT	MUMmer/src/tigr/sw_align.hh	/^static const unsigned int DIRECTION_BIT = 0x1;$/;"	v
DISPLAY_WIDTH	MUMmer/src/tigr/combineMUMs.cc	719;"	d	file:
DISTBITS	MUMmer/src/kurtz/streesrc/streelarge.h	37;"	d
DISTBITS	MUMmer/src/kurtz/streesrc/streesmall.h	39;"	d
DISTDIR	MUMmer/Makefile	/^dist: DISTDIR = MUMmer$(VERSION)$/;"	m
DISTSHIFT	MUMmer/src/kurtz/streesrc/streelarge.h	38;"	d
DIV2	MUMmer/src/kurtz/libbasedir/types.h	151;"	d
DIV4	MUMmer/src/kurtz/libbasedir/types.h	152;"	d
DIV8	MUMmer/src/kurtz/libbasedir/types.h	153;"	d
DIVBYSMALLINTS	MUMmer/src/kurtz/streesrc/streehuge.h	33;"	d
DIVBYSMALLINTS	MUMmer/src/kurtz/streesrc/streelarge.h	35;"	d
DIVBYSMALLINTS	MUMmer/src/kurtz/streesrc/streesmall.h	37;"	d
DIVWORDSIZE	MUMmer/src/kurtz/libbasedir/intbits.h	46;"	d
DNA_A	MUMmer/src/tigr/translate.hh	23;"	d
DNA_B	MUMmer/src/tigr/translate.hh	36;"	d
DNA_C	MUMmer/src/tigr/translate.hh	24;"	d
DNA_D	MUMmer/src/tigr/translate.hh	35;"	d
DNA_G	MUMmer/src/tigr/translate.hh	25;"	d
DNA_H	MUMmer/src/tigr/translate.hh	34;"	d
DNA_K	MUMmer/src/tigr/translate.hh	32;"	d
DNA_LEN	MUMmer/src/tigr/translate.hh	41;"	d
DNA_M	MUMmer/src/tigr/translate.hh	27;"	d
DNA_R	MUMmer/src/tigr/translate.hh	28;"	d
DNA_S	MUMmer/src/tigr/translate.hh	30;"	d
DNA_TU	MUMmer/src/tigr/translate.hh	26;"	d
DNA_V	MUMmer/src/tigr/translate.hh	33;"	d
DNA_W	MUMmer/src/tigr/translate.hh	29;"	d
DNA_XN	MUMmer/src/tigr/translate.hh	37;"	d
DNA_Y	MUMmer/src/tigr/translate.hh	31;"	d
DNA_dot	MUMmer/src/tigr/translate.hh	38;"	d
DOC_DIR	MUMmer/Makefile	/^DOC_DIR       := $(TOP_DIR)\/docs$/;"	m
DOLLAR_CHAR	MUMmer/src/tigr/repeat-match.cc	/^const char  DOLLAR_CHAR = '$';$/;"	v
DONT_KNOW_CHAR	MUMmer/src/tigr/repeat-match.cc	/^const char  DONT_KNOW_CHAR = 'N';$/;"	v
DO_DELTA	MUMmer/src/tigr/postnuc.cc	/^bool DO_DELTA = true;$/;"	v
DO_EXTEND	MUMmer/src/tigr/postnuc.cc	/^bool DO_EXTEND = true;$/;"	v
DO_EXTEND	MUMmer/src/tigr/postpro.cc	/^bool DO_EXTEND = true;$/;"	v
DO_SHADOWS	MUMmer/src/tigr/postnuc.cc	/^bool DO_SHADOWS = false;$/;"	v
DPBYTESINWORD	MUMmer/src/kurtz/libbasedir/types.h	284;"	d
DPbitvector	MUMmer/src/kurtz/libbasedir/types.h	/^typedef unsigned char DPbitvector;          \/\/ \\Typedef{DPbitvector}$/;"	t
DPbitvector	MUMmer/src/kurtz/libbasedir/types.h	/^typedef unsigned int DPbitvector;$/;"	t
DPbitvector	MUMmer/src/kurtz/libbasedir/types.h	/^typedef unsigned long long DPbitvector;$/;"	t
DPbitvector	MUMmer/src/kurtz/libbasedir/types.h	/^typedef unsigned short DPbitvector;$/;"	t
DPbitvector4	MUMmer/src/kurtz/libbasedir/types.h	/^typedef unsigned int DPbitvector4;          \/\/ \\Typedef{DPbitvector4}$/;"	t
DPbitvector8	MUMmer/src/kurtz/libbasedir/types.h	/^typedef unsigned long DPbitvector8;         \/\/ \\Typedef{DPbitvector8}$/;"	t
DYNAMICSTRDUP	MUMmer/src/kurtz/libbasedir/spacedef.h	92;"	d
Data	MUMmer/src/tigr/repeat-match.cc	/^char  * Data;$/;"	v
Data_Len	MUMmer/src/tigr/repeat-match.cc	/^int  Data_Len = 2;$/;"	v
Delta	MUMmer/src/tigr/show-aligns.cc	/^  vector<long int> Delta;               \/\/ delta information$/;"	m	struct:AlignStats	file:
DeltaAlignment_t	MUMmer/src/tigr/delta.hh	/^  DeltaAlignment_t ( )$/;"	f	struct:DeltaAlignment_t
DeltaAlignment_t	MUMmer/src/tigr/delta.hh	/^struct DeltaAlignment_t$/;"	s
DeltaEdge_t	MUMmer/src/tigr/delta.hh	/^  DeltaEdge_t ( )$/;"	f	struct:DeltaEdge_t
DeltaEdge_t	MUMmer/src/tigr/delta.hh	/^struct DeltaEdge_t$/;"	s
DeltaEdgelet_t	MUMmer/src/tigr/delta.hh	/^  DeltaEdgelet_t ( )$/;"	f	struct:DeltaEdgelet_t
DeltaEdgelet_t	MUMmer/src/tigr/delta.hh	/^struct DeltaEdgelet_t$/;"	s
DeltaGraph_t	MUMmer/src/tigr/delta.hh	/^  DeltaGraph_t()$/;"	f	class:DeltaGraph_t
DeltaGraph_t	MUMmer/src/tigr/delta.hh	/^class DeltaGraph_t$/;"	c
DeltaNode_t	MUMmer/src/tigr/delta.hh	/^  DeltaNode_t ( )$/;"	f	struct:DeltaNode_t
DeltaNode_t	MUMmer/src/tigr/delta.hh	/^struct DeltaNode_t$/;"	s
DeltaReader_t	MUMmer/src/tigr/delta.hh	/^  DeltaReader_t ( )$/;"	f	class:DeltaReader_t
DeltaReader_t	MUMmer/src/tigr/delta.hh	/^class DeltaReader_t {$/;"	c
DeltaRecord_t	MUMmer/src/tigr/delta.hh	/^  DeltaRecord_t ( )$/;"	f	struct:DeltaRecord_t
DeltaRecord_t	MUMmer/src/tigr/delta.hh	/^struct DeltaRecord_t$/;"	s
Depth	MUMmer/src/tigr/repeat-match.cc	/^   int  Depth, ID;$/;"	m	struct:leaf	file:
Depth	MUMmer/src/tigr/repeat-match.cc	/^   int  Depth, ID;$/;"	m	struct:node	file:
Diagonal	MUMmer/src/tigr/sw_align.hh	/^struct Diagonal$/;"	s
DiffAligns	MUMmer/src/tigr/delta.cc	/^inline long DiffAligns$/;"	f
DirQ	MUMmer/src/tigr/show-tiling.cc	/^  char DirQ;                               \/\/ orientation of the contig$/;"	m	struct:QueryContig	file:
DirQ	MUMmer/src/tigr/show-tiling.cc	/^  char DirQ;                            \/\/ contig orientation (relative to ref)$/;"	m	struct:AlignStats	file:
Dir_t	MUMmer/src/tigr/delta.hh	/^typedef unsigned char Dir_t;                \/\/!< directional type$/;"	t
Display_Alignment	MUMmer/src/tigr/combineMUMs.cc	/^void  Display_Alignment$/;"	f
Display_Alignment_With_Pad	MUMmer/src/tigr/combineMUMs.cc	/^void  Display_Alignment_With_Pad$/;"	f
Display_Difference_Positions	MUMmer/src/tigr/combineMUMs.cc	/^void  Display_Difference_Positions$/;"	f
Distributed and parallel search of maximal matches	eval2012/evaluation2012.tex	/^\\section{Distributed and parallel search of maximal matches}$/;"	s
Distributed suffix tree	eval2012/evaluation2012.tex	/^\\section{Distributed suffix tree}$/;"	s
Divisor_i	vector/vectori128.h	/^    Divisor_i() {};                                        \/\/ Default constructor$/;"	f	class:Divisor_i
Divisor_i	vector/vectori128.h	/^    Divisor_i(int m, int s1, int sgn) {                    \/\/ Constructor with precalculated multiplier, shift and sign$/;"	f	class:Divisor_i
Divisor_i	vector/vectori128.h	/^    Divisor_i(int32_t d) {                                 \/\/ Constructor with divisor$/;"	f	class:Divisor_i
Divisor_i	vector/vectori128.h	/^class Divisor_i {$/;"	c
Divisor_s	vector/vectori128.h	/^    Divisor_s() {};                                        \/\/ Default constructor$/;"	f	class:Divisor_s
Divisor_s	vector/vectori128.h	/^    Divisor_s(int16_t d) {                                 \/\/ Constructor with divisor$/;"	f	class:Divisor_s
Divisor_s	vector/vectori128.h	/^    Divisor_s(int16_t m, int s1, int sgn) {                \/\/ Constructor with precalculated multiplier, shift and sign$/;"	f	class:Divisor_s
Divisor_s	vector/vectori128.h	/^class Divisor_s {$/;"	c
Divisor_ui	vector/vectori128.h	/^    Divisor_ui() {};                                       \/\/ Default constructor$/;"	f	class:Divisor_ui
Divisor_ui	vector/vectori128.h	/^    Divisor_ui(uint32_t d) {                               \/\/ Constructor with divisor$/;"	f	class:Divisor_ui
Divisor_ui	vector/vectori128.h	/^    Divisor_ui(uint32_t m, int s1, int s2) {               \/\/ Constructor with precalculated multiplier and shifts$/;"	f	class:Divisor_ui
Divisor_ui	vector/vectori128.h	/^class Divisor_ui {$/;"	c
Divisor_us	vector/vectori128.h	/^    Divisor_us() {};                                       \/\/ Default constructor$/;"	f	class:Divisor_us
Divisor_us	vector/vectori128.h	/^    Divisor_us(uint16_t d) {                               \/\/ Constructor with divisor$/;"	f	class:Divisor_us
Divisor_us	vector/vectori128.h	/^    Divisor_us(uint16_t m, int s1, int s2) {               \/\/ Constructor with precalculated multiplier and shifts$/;"	f	class:Divisor_us
Divisor_us	vector/vectori128.h	/^class Divisor_us {$/;"	c
Drawbacks	papers/APBC2012/wga_APBC2012.tex	/^\\subsection*{Drawbacks}$/;"	b
EDIT_DIST_PROB_BOUND	MUMmer/src/tigr/combineMUMs.cc	33;"	d	file:
ERROR0	MUMmer/src/kurtz/libbasedir/errordef.h	69;"	d
ERROR1	MUMmer/src/kurtz/libbasedir/errordef.h	72;"	d
ERROR2	MUMmer/src/kurtz/libbasedir/errordef.h	75;"	d
ERROR3	MUMmer/src/kurtz/libbasedir/errordef.h	78;"	d
ERROR4	MUMmer/src/kurtz/libbasedir/errordef.h	81;"	d
ERROR5	MUMmer/src/kurtz/libbasedir/errordef.h	84;"	d
ERRORDEF_H	MUMmer/src/kurtz/libbasedir/errordef.h	12;"	d
ERRORS_FOR_FREE	MUMmer/src/tigr/combineMUMs.cc	36;"	d	file:
EXCEPTFIRSTBIT	MUMmer/src/kurtz/libbasedir/intbits.h	40;"	d
EXCEPTFIRSTTHREEBITS	MUMmer/src/kurtz/libbasedir/intbits.h	44;"	d
EXCEPTFIRSTTWOBITS	MUMmer/src/kurtz/libbasedir/intbits.h	42;"	d
EXIT_FAILURE	MUMmer/src/tigr/annotate.cc	24;"	d	file:
EXIT_FAILURE	MUMmer/src/tigr/tigrinc.hh	21;"	d
EXIT_SUCCESS	MUMmer/src/tigr/annotate.cc	27;"	d	file:
EXIT_SUCCESS	MUMmer/src/tigr/tigrinc.hh	24;"	d
EXPANSION_FACTOR	MUMmer/src/tigr/combineMUMs.cc	40;"	d	file:
EXTRAPATT	MUMmer/src/kurtz/streesrc/streelarge.h	46;"	d
EdgeletIdQLoQCmp_t	MUMmer/src/tigr/show-diff.cc	/^struct EdgeletIdQLoQCmp_t$/;"	s	file:
EdgeletIdRLoRCmp_t	MUMmer/src/tigr/show-diff.cc	/^struct EdgeletIdRLoRCmp_t$/;"	s	file:
EdgeletLoQCmp_t	MUMmer/src/tigr/show-diff.cc	/^struct EdgeletLoQCmp_t$/;"	s	file:
EdgeletLoRCmp_t	MUMmer/src/tigr/show-diff.cc	/^struct EdgeletLoRCmp_t$/;"	s	file:
EdgeletQCmp_t	MUMmer/src/tigr/delta.cc	/^struct EdgeletQCmp_t$/;"	s	file:
EdgeletRCmp_t	MUMmer/src/tigr/delta.cc	/^struct EdgeletRCmp_t$/;"	s	file:
Edit_Array	MUMmer/src/tigr/combineMUMs.cc	/^int  * Edit_Array [MAX_ERRORS];$/;"	v
Edit_Match_Limit	MUMmer/src/tigr/combineMUMs.cc	/^int  Edit_Match_Limit [MAX_ERRORS] = {0};$/;"	v
Edit_Space	MUMmer/src/tigr/combineMUMs.cc	/^int  Edit_Space [(MAX_ERRORS + 4) * MAX_ERRORS];$/;"	v
EndR	MUMmer/src/tigr/show-tiling.cc	/^  long int StartR, EndR;                   \/\/ contig -> reference mapping coords$/;"	m	struct:QueryContig	file:
Error_Bound	MUMmer/src/tigr/combineMUMs.cc	/^int  Error_Bound [MAX_FRAG_LEN + 1];$/;"	v
Error_File_Name	MUMmer/src/tigr/combineMUMs.cc	/^char  * Error_File_Name = DEFAULT_ERROR_FILE_NAME;$/;"	v
Errors	MUMmer/src/tigr/postnuc.cc	/^  long int Errors, SimErrors, NonAlphas; \/\/ errors, similarity errors, nonalphas$/;"	m	struct:Alignment	file:
Errors	MUMmer/src/tigr/postpro.cc	/^  long int Errors, SimErrors, NonAlphas; \/\/ errors, similarity errors, nonalphas$/;"	m	struct:Alignment	file:
Exhaustive_Matches	MUMmer/src/tigr/repeat-match.cc	/^static bool  Exhaustive_Matches = false;$/;"	v	file:
Extend_Backward	MUMmer/src/tigr/combineMUMs.cc	/^int  Extend_Backward$/;"	f
Extend_Forward	MUMmer/src/tigr/combineMUMs.cc	/^int  Extend_Forward$/;"	f
FALSE	MUMmer/src/tigr/tigrinc.hh	19;"	d
FASTASEPARATOR	MUMmer/src/kurtz/libbasedir/multidef.h	52;"	d
FIELD_LEN	MUMmer/src/tigr/annotate.cc	16;"	d	file:
FILEOPEN	MUMmer/src/kurtz/libbasedir/fopen.h	23;"	d
FINALPROGRESS	MUMmer/src/kurtz/streesrc/construct.c	1004;"	d	file:
FINALPROGRESS	MUMmer/src/kurtz/streesrc/construct.c	1014;"	d	file:
FINALPROGRESS	MUMmer/src/kurtz/streesrc/construct.c	1027;"	d	file:
FINALPROGRESS	MUMmer/src/kurtz/streesrc/construct.c	1037;"	d	file:
FINALPROGRESS	MUMmer/src/kurtz/streesrc/construct.c	1078;"	d	file:
FINALPROGRESS	MUMmer/src/kurtz/streesrc/construct.c	1097;"	d	file:
FINALPROGRESS	MUMmer/src/kurtz/streesrc/construct.c	963;"	d	file:
FINALPROGRESS	MUMmer/src/kurtz/streesrc/construct.c	973;"	d	file:
FIRSTBIT	MUMmer/src/kurtz/libbasedir/intbits.h	28;"	d
FIRSTTWOBITS	MUMmer/src/kurtz/libbasedir/intbits.h	38;"	d
FLAGS	Makefile	/^FLAGS = -O3 -g -m64 -fopenmp -D_GLIBCXX_PARALLEL -mtune=native -msse4.2 -std=gnu++11$/;"	m
FLATS	MUMmer/Makefile	/^FLATS = ACKNOWLEDGEMENTS COPYRIGHT INSTALL LICENSE Makefile README ChangeLog$/;"	m
FOLLOWSUFFIXLINK	MUMmer/src/kurtz/streesrc/streeacc.h	175;"	d
FOPEN_H	MUMmer/src/kurtz/libbasedir/fopen.h	12;"	d
FORCED_BACKWARD_SEARCH	MUMmer/src/tigr/sw_align.hh	/^static const unsigned int FORCED_BACKWARD_SEARCH = 0x6;$/;"	v
FORCED_BIT	MUMmer/src/tigr/sw_align.hh	/^static const unsigned int FORCED_BIT = 0x4;$/;"	v
FORCED_FORWARD_ALIGN	MUMmer/src/tigr/sw_align.hh	/^static const unsigned int FORCED_FORWARD_ALIGN = 0x5;$/;"	v
FORCED_FORWARD_SEARCH	MUMmer/src/tigr/sw_align.hh	/^static const unsigned int FORCED_FORWARD_SEARCH = 0x7;$/;"	v
FORWARD_ALIGN	MUMmer/src/tigr/sw_align.hh	/^static const unsigned int FORWARD_ALIGN = 0x1;$/;"	v
FORWARD_CHAR	MUMmer/src/tigr/postnuc.cc	/^const signed char FORWARD_CHAR = 1;$/;"	v
FORWARD_CHAR	MUMmer/src/tigr/show-tiling.cc	/^const char FORWARD_CHAR  =  '+';$/;"	v
FORWARD_DIR	MUMmer/src/tigr/delta.hh	/^const Dir_t FORWARD_DIR = 0;                \/\/!< forward direction$/;"	v
FORWARD_SEARCH	MUMmer/src/tigr/sw_align.hh	/^static const unsigned int FORWARD_SEARCH = 0x3;$/;"	v
FPBINWRITE	MUMmer/src/kurtz/libbasedir/fopen.h	31;"	d
FREEARRAY	MUMmer/src/kurtz/libbasedir/arraydef.h	115;"	d
FREESPACE	MUMmer/src/kurtz/libbasedir/spacedef.h	79;"	d
FUNCLEVEL	MUMmer/src/kurtz/streesrc/construct.c	23;"	d	file:
FUNCNAME	vector/dispatch_example.cpp	/^float FUNCNAME (float * f) {$/;"	f
FUNCNAME	vector/dispatch_example.cpp	32;"	d	file:
FUNCNAME	vector/dispatch_example.cpp	34;"	d	file:
FUNCNAME	vector/dispatch_example.cpp	36;"	d	file:
False	MUMmer/src/kurtz/libbasedir/types.h	219;"	d
FastaRecord	MUMmer/src/tigr/postnuc.cc	/^struct FastaRecord$/;"	s	file:
FastaRecord	MUMmer/src/tigr/postpro.cc	/^struct FastaRecord$/;"	s	file:
FastaSizes	MUMmer/dnadiff	/^sub FastaSizes($$)$/;"	s
FastaSizes	MUMmer/scripts/dnadiff.pl	/^sub FastaSizes($$)$/;"	s
Fgetcreturntype	MUMmer/src/kurtz/libbasedir/types.h	/^typedef int Fgetcreturntype;        \/\/ \\Typedef{Fgetcreturntype}$/;"	t
Fieldwidthtype	MUMmer/src/kurtz/libbasedir/types.h	/^typedef int Fieldwidthtype;         \/\/ \\Typedef{Fieldwidthtype}$/;"	t
FileClose	MUMmer/dnadiff	/^sub FileClose($$)$/;"	s
FileClose	MUMmer/scripts/dnadiff.pl	/^sub FileClose($$)$/;"	s
FileOpen	MUMmer/dnadiff	/^sub FileOpen($$)$/;"	s
FileOpen	MUMmer/scripts/dnadiff.pl	/^sub FileOpen($$)$/;"	s
File_Open	MUMmer/src/tigr/tigrinc.cc	/^FILE *  File_Open  (const char * Filename, const char * Mode)$/;"	f
Filedesctype	MUMmer/src/kurtz/libbasedir/types.h	/^typedef int Filedesctype;           \/\/ \\Typedef{Filedesctype}$/;"	t
Fileinfo	MUMmer/src/kurtz/libbasedir/types.h	/^} Fileinfo;             \/\/ \\Typedef{Fileinfo}$/;"	t	typeref:struct:__anon17
Fill_Ct	MUMmer/src/tigr/combineMUMs.cc	/^int  Fill_Ct = 0;$/;"	v
Filter_Matches	MUMmer/src/tigr/mgaps.cc	/^static void  Filter_Matches$/;"	f	file:
Find	MUMmer/src/tigr/mgaps.cc	/^static int  Find$/;"	f	file:
FindSNPs	MUMmer/src/tigr/show-snps.cc	/^void FindSNPs (DeltaGraph_t & graph)$/;"	f
Finding MUMs in a suffix tree	papers/BBC2013/mum-multithread.tex	/^\\subsubsection{Finding MUMs in a suffix tree} $/;"	b
Findmatchfunction	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^typedef Sint (*Findmatchfunction)(Suffixtree *,$/;"	t	file:
Fixed_Separation	MUMmer/src/tigr/mgaps.cc	/^static int  Fixed_Separation = DEFAULT_FIXED_SEPARATION;$/;"	v	file:
Forward_Only	MUMmer/src/tigr/repeat-match.cc	/^static bool  Forward_Only = false;$/;"	v	file:
FourUint	MUMmer/src/kurtz/libbasedir/types.h	/^} FourUint;                \/\/ \\Typedef{FourUint}$/;"	t	typeref:struct:__anon15
Fputcfirstargtype	MUMmer/src/kurtz/libbasedir/types.h	/^typedef int Fputcfirstargtype;      \/\/ \\Typedef{Fputsfirstargtype}  $/;"	t
FrameA	MUMmer/src/tigr/show-coords.cc	/^  int FrameA, FrameB;                     \/\/ reading frame$/;"	m	struct:AlignStats	file:
FrameB	MUMmer/src/tigr/show-coords.cc	/^  int FrameA, FrameB;                     \/\/ reading frame$/;"	m	struct:AlignStats	file:
GCC_VERSION	vector/instrset.h	152;"	d
GENDEBUG	MUMmer/src/kurtz/libbasedir/debugdef.h	108;"	d
GENERROR	MUMmer/src/kurtz/libbasedir/errordef.h	53;"	d
GETBOTH	MUMmer/src/kurtz/streesrc/streeacc.h	61;"	d
GETBRANCHINDEX	MUMmer/src/kurtz/streesrc/streehuge.h	56;"	d
GETBRANCHINDEX	MUMmer/src/kurtz/streesrc/streelarge.h	76;"	d
GETBRANCHINDEX	MUMmer/src/kurtz/streesrc/streesmall.h	54;"	d
GETBROTHER	MUMmer/src/kurtz/streesrc/streehuge.h	63;"	d
GETBROTHER	MUMmer/src/kurtz/streesrc/streelarge.h	84;"	d
GETBROTHER	MUMmer/src/kurtz/streesrc/streesmall.h	74;"	d
GETCHAINEND	MUMmer/src/kurtz/streesrc/streehuge.h	85;"	d
GETCHAINEND	MUMmer/src/kurtz/streesrc/streelarge.h	107;"	d
GETCHAINEND	MUMmer/src/kurtz/streesrc/streesmall.h	94;"	d
GETCHILD	MUMmer/src/kurtz/streesrc/streehuge.h	62;"	d
GETCHILD	MUMmer/src/kurtz/streesrc/streelarge.h	82;"	d
GETCHILD	MUMmer/src/kurtz/streesrc/streesmall.h	65;"	d
GETDEPTH	MUMmer/src/kurtz/streesrc/streehuge.h	65;"	d
GETDEPTH	MUMmer/src/kurtz/streesrc/streelarge.h	85;"	d
GETDEPTH	MUMmer/src/kurtz/streesrc/streesmall.h	77;"	d
GETDEPTHAFTERHEADPOS	MUMmer/src/kurtz/streesrc/streeacc.h	127;"	d
GETDISTANCE	MUMmer/src/kurtz/streesrc/streehuge.h	64;"	d
GETDISTANCE	MUMmer/src/kurtz/streesrc/streelarge.h	83;"	d
GETDISTANCE	MUMmer/src/kurtz/streesrc/streesmall.h	68;"	d
GETHEADPOS	MUMmer/src/kurtz/streesrc/streehuge.h	66;"	d
GETHEADPOS	MUMmer/src/kurtz/streesrc/streelarge.h	86;"	d
GETHEADPOS	MUMmer/src/kurtz/streesrc/streesmall.h	78;"	d
GETHEADPOSAFTERDEPTH	MUMmer/src/kurtz/streesrc/streeacc.h	142;"	d
GETLEAFINDEX	MUMmer/src/kurtz/streesrc/streehuge.h	55;"	d
GETLEAFINDEX	MUMmer/src/kurtz/streesrc/streelarge.h	75;"	d
GETLEAFINDEX	MUMmer/src/kurtz/streesrc/streesmall.h	53;"	d
GETNEXTFREEINARRAY	MUMmer/src/kurtz/libbasedir/arraydef.h	97;"	d
GETONLYDEPTH	MUMmer/src/kurtz/streesrc/streeacc.h	109;"	d
GETONLYHEADPOS	MUMmer/src/kurtz/streesrc/streeacc.h	91;"	d
GETSUFFIXLINK	MUMmer/src/kurtz/streesrc/streehuge.h	67;"	d
GETSUFFIXLINK	MUMmer/src/kurtz/streesrc/streelarge.h	87;"	d
GETSUFFIXLINK	MUMmer/src/kurtz/streesrc/streesmall.h	82;"	d
GIVE_UP_LEN	MUMmer/src/tigr/combineMUMs.cc	42;"	d	file:
GOOD_SCORE	MUMmer/src/tigr/sw_alignscore.hh	/^const int GOOD_SCORE [4] = {3, 10, 8, 8};$/;"	v
Gaps_File_Path	MUMmer/src/tigr/combineMUMs.cc	/^char  * Gaps_File_Path = NULL;$/;"	v
Gaps_With_Errors_File	MUMmer/src/tigr/annotate.cc	/^FILE  * Gaps_With_Errors_File;$/;"	v
Genome_Len	MUMmer/src/tigr/repeat-match.cc	/^long int  Genome_Len;$/;"	v
GetOpt	MUMmer/dnadiff	/^sub GetOpt()$/;"	s
GetOpt	MUMmer/scripts/dnadiff.pl	/^sub GetOpt()$/;"	s
GetParseFunc	MUMmer/mummerplot	/^sub GetParseFunc ( )$/;"	s
GetParseFunc	MUMmer/scripts/mummerplot.pl	/^sub GetParseFunc ( )$/;"	s
Getrlimitreturntype	MUMmer/src/kurtz/libbasedir/types.h	/^typedef int Getrlimitreturntype;    \/\/ \\Typedef{Getrlimitreturntype}$/;"	t
Global_Debug_Flag	MUMmer/src/tigr/combineMUMs.cc	/^bool  Global_Debug_Flag = false;$/;"	v
Global_Non_Skip_Ct	MUMmer/src/tigr/repeat-match.cc	/^int  Global_Non_Skip_Ct = 0;$/;"	v
Global_Skip_Ct	MUMmer/src/tigr/repeat-match.cc	/^int  Global_Skip_Ct = 0;$/;"	v
Global_Trace	MUMmer/src/tigr/repeat-match.cc	/^int  Global_Trace = 0;$/;"	v
Good	MUMmer/src/tigr/gaps.cc	/^   int  Good : 1;$/;"	m	struct:Match	file:
Good	MUMmer/src/tigr/mgaps.cc	/^   unsigned int  Good : 1;$/;"	m	struct:Match_t	file:
HEADER_LINE	MUMmer/src/tigr/postnuc.cc	/^  NO_LINE, HEADER_LINE, MATCH_LINE$/;"	e	enum:LineType	file:
HEADER_LINE	MUMmer/src/tigr/postpro.cc	/^  NO_LINE, HEADER_LINE, MATCH_LINE$/;"	e	enum:LineType	file:
HIGHERSIZE	MUMmer/src/kurtz/streesrc/streelarge.h	55;"	d
HIGHESTVISIBLE	MUMmer/src/kurtz/libbasedir/visible.h	34;"	d
HiTrim	MUMmer/src/tigr/show-tiling.cc	/^  long int LoTrim, HiTrim;                 \/\/ lo and hi trim lengths$/;"	m	struct:QueryContig	file:
HumanCompare	MUMmer/docs/web/manual/index.html	/^<h4><a name="HumanCompare">1.2.2. Human vs. Human<\/a><\/h4>$/;"	a
I	MUMmer/src/tigr/sw_align.hh	/^  Node * I;          \/\/ the matrix nodes$/;"	m	struct:Diagonal
I	qsufsort.c	/^static int *I,                  \/* group array, ultimately suffix array.*\/$/;"	v	file:
ID	MUMmer/src/tigr/repeat-match.cc	/^   int  Depth, ID;$/;"	m	struct:leaf	file:
ID	MUMmer/src/tigr/repeat-match.cc	/^   int  Depth, ID;$/;"	m	struct:node	file:
IGNORE_TILE_LEVEL	MUMmer/src/tigr/show-tiling.cc	/^const int IGNORE_TILE_LEVEL    =  -1;$/;"	v
INCLUDEDIR	MUMmer/src/kurtz/mm3src/Makefile	/^INCLUDEDIR=-I${LIBBASEDIR} -I${LIBSTREEDIR}$/;"	m
INCLUDEDIR	MUMmer/src/kurtz/streesrc/Makefile	/^INCLUDEDIR=..\/libbasedir$/;"	m
INCR_SIZE	MUMmer/src/tigr/tigrinc.hh	27;"	d
INDEL_CHAR	MUMmer/src/tigr/show-snps.cc	/^const char  INDEL_CHAR = '.';$/;"	v
INDEXBITS	MUMmer/src/kurtz/streesrc/streelarge.h	42;"	d
INDEXBITS	MUMmer/src/kurtz/streesrc/streesmall.h	42;"	d
INITARRAY	MUMmer/src/kurtz/libbasedir/arraydef.h	51;"	d
INITBITTAB	MUMmer/src/kurtz/libbasedir/intbits.h	58;"	d
INITIAL_BUFFER_SIZE	MUMmer/src/tigr/combineMUMs.cc	44;"	d	file:
INIT_SIZE	MUMmer/src/tigr/tigrinc.hh	29;"	d
INSERT	MUMmer/src/tigr/sw_align.cc	/^static const int INSERT = 1;$/;"	v	file:
INSTRSET	vector/instrset.h	30;"	d
INSTRSET	vector/instrset.h	32;"	d
INSTRSET	vector/instrset.h	34;"	d
INSTRSET	vector/instrset.h	36;"	d
INSTRSET	vector/instrset.h	38;"	d
INSTRSET	vector/instrset.h	40;"	d
INSTRSET	vector/instrset.h	42;"	d
INSTRSET	vector/instrset.h	44;"	d
INSTRSET	vector/instrset.h	46;"	d
INSTRSET	vector/instrset.h	48;"	d
INSTRSET_H	vector/instrset.h	19;"	d
INTBITS_H	MUMmer/src/kurtz/libbasedir/intbits.h	12;"	d
INTWORDSIZE	MUMmer/src/kurtz/libbasedir/intbits.h	26;"	d
INVISIBLE	MUMmer/src/kurtz/libbasedir/visible.h	40;"	d
INVISIBLECHAR	MUMmer/src/kurtz/libbasedir/visible.h	54;"	d
ISA	sparseSA.hpp	/^  vector<int> ISA;  \/\/ Inverse suffix array.$/;"	m	struct:sparseSA
ISBITSET	MUMmer/src/kurtz/libbasedir/intbits.h	30;"	d
ISBRANCHUSED	MUMmer/src/kurtz/streesrc/streedbg.c	23;"	d	file:
ISIBITSET	MUMmer/src/kurtz/libbasedir/intbits.h	102;"	d
ISLARGE	MUMmer/src/kurtz/streesrc/streehuge.h	50;"	d
ISLARGE	MUMmer/src/kurtz/streesrc/streelarge.h	71;"	d
ISLARGE	MUMmer/src/kurtz/streesrc/streesmall.h	48;"	d
ISLEAF	MUMmer/src/kurtz/streesrc/streehuge.h	49;"	d
ISLEAF	MUMmer/src/kurtz/streesrc/streelarge.h	70;"	d
ISLEAF	MUMmer/src/kurtz/streesrc/streesmall.h	47;"	d
ISLEAFUSED	MUMmer/src/kurtz/streesrc/streedbg.c	20;"	d	file:
ISNOTSPECIAL	MUMmer/src/kurtz/libbasedir/chardef.h	26;"	d
ISSET	MUMmer/src/kurtz/libbasedir/optdesc.h	52;"	d
ISSMALLDEPTH	MUMmer/src/kurtz/streesrc/streelarge.h	52;"	d
ISSMALLDEPTH	MUMmer/src/kurtz/streesrc/streesmall.h	59;"	d
ISSPECIAL	MUMmer/src/kurtz/libbasedir/chardef.h	25;"	d
ITHBIT	MUMmer/src/kurtz/libbasedir/intbits.h	32;"	d
Id	MUMmer/src/tigr/postnuc.cc	/^  char * Id;                 \/\/ the fasta ID header tag$/;"	m	struct:FastaRecord	file:
Id	MUMmer/src/tigr/postpro.cc	/^  char * Id;                 \/\/ the fasta ID header tag$/;"	m	struct:FastaRecord	file:
IdA	MUMmer/src/tigr/show-coords.cc	/^  char * IdA, * IdB;                      \/\/ Id of seq A, Id of seq B$/;"	m	struct:AlignStats	file:
IdA_sA_IdB_sB_Sort	MUMmer/src/tigr/show-coords.cc	/^struct IdA_sA_IdB_sB_Sort$/;"	s	file:
IdB	MUMmer/src/tigr/show-coords.cc	/^  char * IdA, * IdB;                      \/\/ Id of seq A, Id of seq B$/;"	m	struct:AlignStats	file:
IdB_sB_IdA_sA_Sort	MUMmer/src/tigr/show-coords.cc	/^struct IdB_sB_IdA_sA_Sort$/;"	s	file:
IdQ	MUMmer/src/tigr/show-tiling.cc	/^  char * IdQ;                              \/\/ FASTA Id of the query$/;"	m	struct:QueryContig	file:
IdQ_Sort	MUMmer/src/tigr/show-tiling.cc	/^struct IdQ_Sort$/;"	s	file:
IdR	MUMmer/src/tigr/show-tiling.cc	/^  char * IdR;                              \/\/ Id of the mapping reference$/;"	m	struct:QueryContig	file:
IdR	MUMmer/src/tigr/show-tiling.cc	/^  char * IdR;                           \/\/ FASTA Id of the mapping reference$/;"	m	struct:AlignStats	file:
IdR_StartRTrimmed_Sort	MUMmer/src/tigr/show-tiling.cc	/^struct IdR_StartRTrimmed_Sort$/;"	s	file:
IdR_StartR_Sort	MUMmer/src/tigr/show-tiling.cc	/^struct IdR_StartR_Sort$/;"	s	file:
IdR_sQ_Sort	MUMmer/src/tigr/show-tiling.cc	/^struct IdR_sQ_Sort$/;"	s	file:
Idy	MUMmer/src/tigr/show-coords.cc	/^  float Idy;                              \/\/ percent identity (0.0 - 100.0)$/;"	m	struct:AlignStats	file:
Idy	MUMmer/src/tigr/show-tiling.cc	/^  float Idy;                            \/\/ percent identity   [0.0, 100.0]$/;"	m	struct:AlignStats	file:
Initialize_Globals	MUMmer/src/tigr/combineMUMs.cc	/^void  Initialize_Globals$/;"	f
InputFileName	MUMmer/src/tigr/show-aligns.cc	/^char InputFileName [MAX_LINE];$/;"	v
InputFileName	MUMmer/src/tigr/show-coords.cc	/^char InputFileName [MAX_LINE];          \/\/  I\/O filenames$/;"	v
InputFileName	MUMmer/src/tigr/show-tiling.cc	/^char InputFileName [MAX_LINE];$/;"	v
Input_File_Name	MUMmer/src/tigr/repeat-match.cc	/^static char  * Input_File_Name = NULL;$/;"	v	file:
Introduction	papers/BBC2013/procs-sample.tex	/^\\section{Introduction}$/;"	s
Is_Duplicate	MUMmer/src/tigr/repeat-match.cc	/^   unsigned  Is_Duplicate : 1;$/;"	m	struct:leaf	file:
K	mummer.cpp	/^int K = 1, num_threads = 1, query_threads = 1;$/;"	v
K	sparseSA.hpp	/^  long K; \/\/ suffix sampling, K = 1 every suffix, K = 2 every other suffix, K = 3, every 3rd sffix$/;"	m	struct:sparseSA
KEY	qsufsort.c	21;"	d	file:
KURTZ_SRC_DIR	MUMmer/Makefile	/^KURTZ_SRC_DIR := $(TOP_DIR)\/src\/kurtz$/;"	m
Kvalues	sparseSA.cpp	/^  vector<long> Kvalues; \/\/ Values of K this thread should process.$/;"	m	struct:thread_data	file:
LARGEBIT	MUMmer/src/kurtz/streesrc/streesmall.h	44;"	d
LARGEINTS	MUMmer/src/kurtz/streesrc/streehuge.h	31;"	d
LARGEINTS	MUMmer/src/kurtz/streesrc/streelarge.h	33;"	d
LARGEINTS	MUMmer/src/kurtz/streesrc/streesmall.h	35;"	d
LARGESTCHARINDEX	MUMmer/src/kurtz/streesrc/streehuge.h	100;"	d
LARGESTCHARINDEX	MUMmer/src/kurtz/streesrc/streehuge.h	102;"	d
LARGESTCHARINDEX	MUMmer/src/kurtz/streesrc/streelarge.h	138;"	d
LARGESTCHARINDEX	MUMmer/src/kurtz/streesrc/streelarge.h	140;"	d
LARGESTCHARINDEX	MUMmer/src/kurtz/streesrc/streesmall.h	124;"	d
LARGESTCHARINDEX	MUMmer/src/kurtz/streesrc/streesmall.h	126;"	d
LAS_Sort	MUMmer/src/tigr/show-coords.cc	/^struct LAS_Sort$/;"	s	file:
LASstats	MUMmer/src/tigr/show-coords.cc	/^struct LASstats$/;"	s	file:
LATEX	MUMmer/docs/Makefile	/^LATEX=pdflatex$/;"	m
LCP	sparseSA.hpp	/^  vec_uchar LCP; \/\/ Simulates a vector<int> LCP.$/;"	m	struct:sparseSA
LCPCHILD	sparseSA.cpp	14;"	d	file:
LD	MUMmer/src/kurtz/libbasedir/Makefile	/^LD=$(CC)$/;"	m
LD	MUMmer/src/kurtz/mm3src/Makefile	/^LD=$(CC)$/;"	m
LD	MUMmer/src/kurtz/streesrc/Makefile	/^LD=${CC}$/;"	m
LDFLAGS	MUMmer/Makefile	/^LDFLAGS  =$/;"	m
LEADLEVEL	MUMmer/src/kurtz/streesrc/streeacc.h	241;"	d
LEAFADDR2NUM	MUMmer/src/kurtz/streesrc/streemac.h	61;"	d
LEAFBIT	MUMmer/src/kurtz/streesrc/streehuge.h	35;"	d
LEAFBIT	MUMmer/src/kurtz/streesrc/streelarge.h	43;"	d
LEAFBROTHERVAL	MUMmer/src/kurtz/streesrc/streehuge.h	82;"	d
LEAFBROTHERVAL	MUMmer/src/kurtz/streesrc/streelarge.h	104;"	d
LEAFBROTHERVAL	MUMmer/src/kurtz/streesrc/streesmall.h	91;"	d
LEASTSHOWPROGRESS	MUMmer/src/kurtz/streesrc/construct.c	1041;"	d	file:
LENGTHTYPE	MUMmer/src/kurtz/libbasedir/types.h	275;"	d
LIBBASE	MUMmer/src/kurtz/libbasedir/Makefile	/^LIBBASE=libbase.a$/;"	m
LIBBASE	MUMmer/src/kurtz/mm3src/Makefile	/^LIBBASE=$(LIBBASEDIR)\/libbase.a$/;"	m
LIBBASE	MUMmer/src/kurtz/streesrc/Makefile	/^LIBBASE=${LIBBASEDIR}\/libbase.a$/;"	m
LIBBASEDBG	MUMmer/src/kurtz/libbasedir/Makefile	/^LIBBASEDBG=libbase.dbg.a$/;"	m
LIBBASEDBG	MUMmer/src/kurtz/mm3src/Makefile	/^LIBBASEDBG=$(LIBBASEDIR)\/libbase.dbg.a$/;"	m
LIBBASEDBG	MUMmer/src/kurtz/streesrc/Makefile	/^LIBBASEDBG=${LIBBASEDIR}\/libbase.dbg.a$/;"	m
LIBBASEDIR	MUMmer/src/kurtz/mm3src/Makefile	/^LIBBASEDIR=..\/libbasedir$/;"	m
LIBBASEDIR	MUMmer/src/kurtz/streesrc/Makefile	/^LIBBASEDIR=..\/libbasedir$/;"	m
LIBSTREE	MUMmer/src/kurtz/mm3src/Makefile	/^LIBSTREE=$(LIBSTREEDIR)\/libstree.a$/;"	m
LIBSTREEDBG	MUMmer/src/kurtz/mm3src/Makefile	/^LIBSTREEDBG=$(LIBSTREEDIR)\/libstree.dbg.a$/;"	m
LIBSTREEDIR	MUMmer/src/kurtz/mm3src/Makefile	/^LIBSTREEDIR=..\/streesrc$/;"	m
LINE_PREFIX_LEN	MUMmer/src/tigr/show-aligns.cc	34;"	d	file:
LIS_t	MUMmer/src/tigr/delta.cc	/^struct LIS_t$/;"	s	file:
LOGWORDSIZE	MUMmer/src/kurtz/libbasedir/types.h	52;"	d
LOGWORDSIZE	MUMmer/src/kurtz/libbasedir/types.h	59;"	d
LOWERLINKBITS	MUMmer/src/kurtz/streesrc/streelarge.h	57;"	d
LOWERLINKPATT	MUMmer/src/kurtz/streesrc/streelarge.h	59;"	d
LOWERLINKSIZE	MUMmer/src/kurtz/streesrc/streelarge.h	58;"	d
LOWESTVISIBLE	MUMmer/src/kurtz/libbasedir/visible.h	28;"	d
LayoutIDs	MUMmer/mummerplot	/^sub LayoutIDs ($$)$/;"	s
LayoutIDs	MUMmer/scripts/mummerplot.pl	/^sub LayoutIDs ($$)$/;"	s
Leaf_Array	MUMmer/src/tigr/repeat-match.cc	/^Leaf_Ptr  Leaf_Array;$/;"	v
Leaf_Ptr	MUMmer/src/tigr/repeat-match.cc	/^  }  Leaf_Type, * Leaf_Ptr;$/;"	t	typeref:struct:leaf	file:
Leaf_Type	MUMmer/src/tigr/repeat-match.cc	/^  }  Leaf_Type, * Leaf_Ptr;$/;"	t	typeref:struct:leaf	file:
Leafinfo	MUMmer/src/kurtz/streesrc/streetyp.h	/^typedef Reference Leafinfo;  \/\/ \\Typedef{Leafinfo}$/;"	t
Len	MUMmer/src/tigr/gaps.cc	/^   long int  Start1, Start2, Len;$/;"	m	struct:Match	file:
Len	MUMmer/src/tigr/mgaps.cc	/^   long int  Start1, Start2, Len;$/;"	m	struct:Match_t	file:
Len	MUMmer/src/tigr/repeat-match.cc	/^   int  Len : 31;$/;"	m	struct:leaf	file:
Len	MUMmer/src/tigr/repeat-match.cc	/^   int  Len : 31;$/;"	m	struct:node	file:
Line	MUMmer/src/tigr/annotate.cc	/^char  Line [MAX_LINE_LEN];$/;"	v
LineType	MUMmer/src/tigr/postnuc.cc	/^enum LineType$/;"	g	file:
LineType	MUMmer/src/tigr/postpro.cc	/^enum LineType$/;"	g	file:
Link	MUMmer/src/tigr/repeat-match.cc	/^   unsigned  Link;$/;"	m	struct:node	file:
List_Matches	MUMmer/src/tigr/repeat-match.cc	/^void  List_Matches$/;"	f
List_Maximal_Matches	MUMmer/src/tigr/repeat-match.cc	/^void  List_Maximal_Matches  (int Root, int Is_Leaf, int Parent, int Parent_Depth)$/;"	f
List_Tree	MUMmer/src/tigr/repeat-match.cc	/^int  List_Tree  (int Root, int Is_Leaf, int Parent, int Parent_Depth)$/;"	f
ListenGP	MUMmer/mummerplot	/^sub ListenGP($$)$/;"	s
ListenGP	MUMmer/scripts/mummerplot.pl	/^sub ListenGP($$)$/;"	s
Listtype	MUMmer/src/kurtz/libbasedir/types.h	/^} Listtype;                \/\/ \\Typedef{Listtype}$/;"	t	typeref:struct:__anon16
Lo	MUMmer/src/tigr/repeat-match.cc	/^   int  Lo;$/;"	m	struct:leaf	file:
Lo	MUMmer/src/tigr/repeat-match.cc	/^   int  Lo;$/;"	m	struct:node	file:
LoTrim	MUMmer/src/tigr/show-tiling.cc	/^  long int LoTrim, HiTrim;                 \/\/ lo and hi trim lengths$/;"	m	struct:QueryContig	file:
Local_File_Open	MUMmer/src/tigr/combineMUMs.cc	/^FILE *  Local_File_Open$/;"	f
Location	MUMmer/src/kurtz/streesrc/streetyp.h	/^} Location;             \/\/ \\Typedef{Location}$/;"	t	typeref:struct:__anon9
Longest_Prefix_Match	MUMmer/src/tigr/repeat-match.cc	/^int  Longest_Prefix_Match$/;"	f
Longest_String	MUMmer/src/tigr/repeat-match.cc	/^int  Longest_String = 0;$/;"	v
Lref	MUMmer/src/kurtz/streesrc/streetyp.h	/^typedef Uint * Lref;    \/\/ \\Typedef{Lref}$/;"	t
M	sparseSA.hpp	/^  vector<item_t> M;$/;"	m	struct:vec_uchar
MAIN	MUMmer/mummerplot	/^MAIN:$/;"	l
MAIN	MUMmer/scripts/mummerplot.pl	/^MAIN:$/;"	l
MAINFUNCTION	MUMmer/src/kurtz/libbasedir/types.h	199;"	d
MAKEBRANCHADDR	MUMmer/src/kurtz/streesrc/streehuge.h	86;"	d
MAKEBRANCHADDR	MUMmer/src/kurtz/streesrc/streelarge.h	108;"	d
MAKEBRANCHADDR	MUMmer/src/kurtz/streesrc/streesmall.h	52;"	d
MAKELARGE	MUMmer/src/kurtz/streesrc/streehuge.h	52;"	d
MAKELARGE	MUMmer/src/kurtz/streesrc/streelarge.h	73;"	d
MAKELARGE	MUMmer/src/kurtz/streesrc/streesmall.h	50;"	d
MAKELARGELEAF	MUMmer/src/kurtz/streesrc/streehuge.h	53;"	d
MAKELARGELEAF	MUMmer/src/kurtz/streesrc/streelarge.h	74;"	d
MAKELARGELEAF	MUMmer/src/kurtz/streesrc/streesmall.h	51;"	d
MAKELEAF	MUMmer/src/kurtz/streesrc/streehuge.h	51;"	d
MAKELEAF	MUMmer/src/kurtz/streesrc/streelarge.h	72;"	d
MAKELEAF	MUMmer/src/kurtz/streesrc/streesmall.h	49;"	d
MAM	mummer.cpp	/^enum mum_t { MUM, MAM, MEM };$/;"	e	enum:mum_t	file:
MAM	sparseSA.hpp	/^  void MAM(string &P, int chunk, int chunks, vector<match_t> &matches, int min_len, long& memCount, bool print) { $/;"	f	struct:sparseSA
MANDATORY	MUMmer/dnadiff	/^  MANDATORY:$/;"	l
MANDATORY	MUMmer/mapview	/^  MANDATORY:$/;"	l
MANDATORY	MUMmer/mummerplot	/^  MANDATORY:$/;"	l
MANDATORY	MUMmer/nucmer	/^  MANDATORY:$/;"	l
MANDATORY	MUMmer/promer	/^  MANDATORY:$/;"	l
MANDATORY	MUMmer/scripts/dnadiff.pl	/^  MANDATORY:$/;"	l
MANDATORY	MUMmer/scripts/mapview.pl	/^  MANDATORY:$/;"	l
MANDATORY	MUMmer/scripts/mummerplot.pl	/^  MANDATORY:$/;"	l
MANDATORY	MUMmer/scripts/nucmer.pl	/^  MANDATORY:$/;"	l
MANDATORY	MUMmer/scripts/promer.pl	/^  MANDATORY:$/;"	l
MASKDISTANCE	MUMmer/src/kurtz/streesrc/streelarge.h	40;"	d
MATCH	MUMmer/src/tigr/sw_align.cc	/^static const int MATCH  = 2;$/;"	v	file:
MATCH_LINE	MUMmer/src/tigr/postnuc.cc	/^  NO_LINE, HEADER_LINE, MATCH_LINE$/;"	e	enum:LineType	file:
MATCH_LINE	MUMmer/src/tigr/postpro.cc	/^  NO_LINE, HEADER_LINE, MATCH_LINE$/;"	e	enum:LineType	file:
MATCH_SCORE	MUMmer/src/tigr/combineMUMs.cc	46;"	d	file:
MATCH_SCORE	MUMmer/src/tigr/sw_alignscore.hh	/^const int MATCH_SCORE [4][26][26] =$/;"	v
MATRIX_TYPE	MUMmer/src/tigr/show-aligns.cc	/^int MATRIX_TYPE = BLOSUM62;$/;"	v
MAX	MUMmer/src/kurtz/libbasedir/minmax.h	22;"	d
MAXDEBUGLEVEL	MUMmer/src/kurtz/libbasedir/debugdef.h	52;"	d
MAXDISTANCE	MUMmer/src/kurtz/streesrc/streehuge.h	39;"	d
MAXDISTANCE	MUMmer/src/kurtz/streesrc/streelarge.h	39;"	d
MAXDISTANCE	MUMmer/src/kurtz/streesrc/streesmall.h	40;"	d
MAXERRORMSG	MUMmer/src/kurtz/libbasedir/seterror.c	26;"	d	file:
MAXINDEX	MUMmer/src/kurtz/streesrc/streehuge.h	38;"	d
MAXINDEX	MUMmer/src/kurtz/streesrc/streelarge.h	45;"	d
MAXINDEX	MUMmer/src/kurtz/streesrc/streesmall.h	45;"	d
MAXMAPPEDFILES	MUMmer/src/kurtz/libbasedir/mapfile.c	24;"	d	file:
MAXMATDEF_H	MUMmer/src/kurtz/mm3src/maxmatdef.h	12;"	d
MAXNUMOFQUERYFILES	MUMmer/src/kurtz/mm3src/maxmatdef.h	38;"	d
MAXTEXTLEN	MUMmer/src/kurtz/streesrc/streehuge.h	60;"	d
MAXTEXTLEN	MUMmer/src/kurtz/streesrc/streelarge.h	80;"	d
MAXTEXTLEN	MUMmer/src/kurtz/streesrc/streesmall.h	63;"	d
MAXTLEN	MUMmer/src/kurtz/streesrc/streelarge.h	53;"	d
MAX_ALIGN	MUMmer/src/tigr/annotate.cc	17;"	d	file:
MAX_ALIGNMENT_LENGTH	MUMmer/src/tigr/sw_align.hh	/^static const long int MAX_ALIGNMENT_LENGTH = 10000;$/;"	v
MAX_ERRORS	MUMmer/src/tigr/combineMUMs.cc	52;"	d	file:
MAX_ERROR_RATE	MUMmer/src/tigr/combineMUMs.cc	48;"	d	file:
MAX_EXTENSION	MUMmer/src/tigr/combineMUMs.cc	54;"	d	file:
MAX_FRAG_LEN	MUMmer/src/tigr/combineMUMs.cc	50;"	d	file:
MAX_GAP_SIZE	MUMmer/src/tigr/show-tiling.cc	/^long int MAX_GAP_SIZE    = 0;$/;"	v
MAX_HDR_LEN	MUMmer/src/tigr/combineMUMs.cc	56;"	d	file:
MAX_LINE	MUMmer/src/tigr/tigrinc.hh	30;"	d
MAX_LINE_LEN	MUMmer/src/tigr/annotate.cc	18;"	d	file:
MAX_MEMORY_STORE	MUMmer/src/tigr/combineMUMs.cc	58;"	d	file:
MAX_NAME_LEN	MUMmer/src/tigr/annotate.cc	19;"	d	file:
MAX_NAME_LEN	MUMmer/src/tigr/repeat-match.cc	/^const int  MAX_NAME_LEN = 500;$/;"	v
MAX_OHANG_P	MUMmer/src/tigr/show-coords.cc	/^const float MAX_OHANG_P = 0.05; \/\/ max overlap hang as a percentage of overlap$/;"	v
MAX_PIDYDIFF	MUMmer/src/tigr/show-coords.cc	/^const float MAX_PIDYDIFF = 0.01;$/;"	v
MAX_SEARCH_LENGTH	MUMmer/src/tigr/sw_align.hh	/^static const long int MAX_SEARCH_LENGTH = 10000;$/;"	v
MED3	qsufsort.c	23;"	d	file:
MEGABYTES	MUMmer/src/kurtz/libbasedir/megabytes.h	21;"	d
MEGABYTES_H	MUMmer/src/kurtz/libbasedir/megabytes.h	12;"	d
MEM	mummer.cpp	/^enum mum_t { MUM, MAM, MEM };$/;"	e	enum:mum_t	file:
MEM	sparseSA.cpp	/^void sparseSA::MEM(string &P, vector<match_t> &matches, int min_len, bool print, long& currentCount, int num_threads) {$/;"	f	class:sparseSA
MEMthread	sparseSA.cpp	/^void *MEMthread(void *arg) {$/;"	f
MIDDLELINKPATT	MUMmer/src/kurtz/streesrc/streelarge.h	60;"	d
MIN	MUMmer/src/kurtz/libbasedir/minmax.h	26;"	d
MINEXTRA	MUMmer/src/kurtz/streesrc/construct.c	92;"	d	file:
MINMAX_H	MUMmer/src/kurtz/libbasedir/minmax.h	12;"	d
MIN_BRANCH_END_DIST	MUMmer/src/tigr/combineMUMs.cc	60;"	d	file:
MIN_BRANCH_TAIL_SLOPE	MUMmer/src/tigr/combineMUMs.cc	63;"	d	file:
MIN_CONTIG_LENGTH	MUMmer/src/tigr/show-tiling.cc	/^long int MIN_CONTIG_LENGTH = DEFAULT_MIN_CONTIG_LENGTH;$/;"	v
MIN_COVERAGE	MUMmer/src/tigr/show-tiling.cc	/^float MIN_COVERAGE       = 0;$/;"	v
MIN_COVERAGE_DIFF	MUMmer/src/tigr/show-tiling.cc	/^float MIN_COVERAGE_DIFF  = 0;$/;"	v
MIN_LENGTH_P	MUMmer/src/tigr/show-coords.cc	/^const float MIN_LENGTH_P = 0.75; \/\/ winner must be atleast this big as loser$/;"	v
MIN_MATCH_LEN	MUMmer/src/tigr/combineMUMs.cc	66;"	d	file:
MIN_OVERLAP_P	MUMmer/src/tigr/show-coords.cc	/^const float MIN_OVERLAP_P = 0.5; \/\/ min percent overlap to spawn knockout$/;"	v
MIN_PIDY	MUMmer/src/tigr/show-tiling.cc	/^float MIN_PIDY           = 0;$/;"	v
MISMATCH_SCORE	MUMmer/src/tigr/combineMUMs.cc	68;"	d	file:
MMREPLACEMENTCHARQUERY	MUMmer/src/kurtz/mm3src/maxmatdef.h	32;"	d
MMREPLACEMENTCHARSUBJECT	MUMmer/src/kurtz/mm3src/maxmatdef.h	31;"	d
MMcallinfo	MUMmer/src/kurtz/mm3src/maxmatdef.h	/^} MMcallinfo;                   \/\/ \\Typedef{MMcallinfo}$/;"	t	typeref:struct:__anon4
MOD2	MUMmer/src/kurtz/libbasedir/types.h	157;"	d
MOD4	MUMmer/src/kurtz/libbasedir/types.h	158;"	d
MOD8	MUMmer/src/kurtz/libbasedir/types.h	159;"	d
MODWORDSIZE	MUMmer/src/kurtz/libbasedir/intbits.h	48;"	d
MULT2	MUMmer/src/kurtz/libbasedir/types.h	154;"	d
MULT4	MUMmer/src/kurtz/libbasedir/types.h	155;"	d
MULT8	MUMmer/src/kurtz/libbasedir/types.h	156;"	d
MULTBYSMALLINTS	MUMmer/src/kurtz/streesrc/streehuge.h	32;"	d
MULTBYSMALLINTS	MUMmer/src/kurtz/streesrc/streelarge.h	34;"	d
MULTBYSMALLINTS	MUMmer/src/kurtz/streesrc/streesmall.h	36;"	d
MULTIDEF_H	MUMmer/src/kurtz/libbasedir/multidef.h	12;"	d
MULWORDSIZE	MUMmer/src/kurtz/libbasedir/intbits.h	50;"	d
MUM	mummer.cpp	/^enum mum_t { MUM, MAM, MEM };$/;"	e	enum:mum_t	file:
MUM	sparseSA.cpp	/^void sparseSA::MUM(string &P, vector<match_t> &unique, int min_len, long& currentCount, bool print) {$/;"	f	class:sparseSA
MUM3DBGOBJECTS	MUMmer/src/kurtz/mm3src/Makefile	/^MUM3DBGOBJECTS=maxmat3.dbg.o maxmatopt.dbg.o maxmatinp.dbg.o\\$/;"	m
MUM3OBJECTS	MUMmer/src/kurtz/mm3src/Makefile	/^MUM3OBJECTS=maxmat3.o maxmatopt.o maxmatinp.o\\$/;"	m
MUMCAND_H	MUMmer/src/kurtz/libbasedir/mumcand.h	12;"	d
MUMParallel	sparseSA.cpp	/^void sparseSA::MUMParallel(string &P, int chunks, vector<match_t> &unique, int min_len, long& currentCount, bool print) {$/;"	f	class:sparseSA
MUMcandidate	MUMmer/src/kurtz/libbasedir/mumcand.h	/^DECLAREARRAYSTRUCT(MUMcandidate);$/;"	v
MUMcandidate	MUMmer/src/kurtz/libbasedir/mumcand.h	/^} MUMcandidate;     \/\/ \\Typedef{MUMcandidate}$/;"	t	typeref:struct:__anon19
MUMmer	papers/APBC2012/wga_APBC2012.tex	/^\\subsection{MUMmer}$/;"	b
MakeReport	MUMmer/dnadiff	/^sub MakeReport()$/;"	s
MakeReport	MUMmer/scripts/dnadiff.pl	/^sub MakeReport()$/;"	s
Mark_Skipable_Nodes	MUMmer/src/tigr/repeat-match.cc	/^void  Mark_Skipable_Nodes$/;"	f
Match	MUMmer/src/tigr/gaps.cc	/^struct  Match$/;"	s	file:
Match	MUMmer/src/tigr/postnuc.cc	/^struct Match$/;"	s	file:
Match	MUMmer/src/tigr/postpro.cc	/^struct Match$/;"	s	file:
Match_File_Path	MUMmer/src/tigr/combineMUMs.cc	/^char  * Match_File_Path = NULL;$/;"	v
Match_t	MUMmer/src/tigr/mgaps.cc	/^struct  Match_t$/;"	s	file:
Matchprocessinfo	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^} Matchprocessinfo;            \/\/ \\Typedef{Matchprocessinfo}$/;"	t	typeref:struct:__anon3	file:
Matrix_t	MUMmer/src/tigr/annotate.cc	/^  Matrix_t()$/;"	f	class:Matrix_t
Matrix_t	MUMmer/src/tigr/annotate.cc	/^class Matrix_t$/;"	c	file:
Max	MUMmer/src/tigr/gaps.cc	/^long int  Max  (long int A, long int B)$/;"	f
Max	MUMmer/src/tigr/mgaps.cc	/^long int  Max  (long int A, long int B)$/;"	f
Max	MUMmer/src/tigr/show-coords.cc	/^inline long int  Max$/;"	f
Max_Depth	MUMmer/src/tigr/repeat-match.cc	/^int  Max_Depth = 0;$/;"	v
Max_Separation	MUMmer/src/tigr/mgaps.cc	/^static long int  Max_Separation = DEFAULT_MAX_SEPARATION;$/;"	v	file:
Max_int	MUMmer/src/tigr/combineMUMs.cc	/^int  Max_int$/;"	f
Maxmatchinfo	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^} Maxmatchinfo;$/;"	t	typeref:struct:__anon2	file:
Methods	papers/APBC2012/wga_APBC2012.tex	/^\\section*{Methods}$/;"	s
Min	MUMmer/src/tigr/show-coords.cc	/^inline long int  Min$/;"	f
Min_Match_Len	MUMmer/src/tigr/repeat-match.cc	/^int  Min_Match_Len = DEFAULT_MIN_MATCH_LEN;$/;"	v
Min_Output_Score	MUMmer/src/tigr/mgaps.cc	/^static long int  Min_Output_Score = DEFAULT_MIN_OUTPUT_SCORE;$/;"	v	file:
Min_int	MUMmer/src/tigr/combineMUMs.cc	/^int  Min_int$/;"	f
Multiseq	MUMmer/src/kurtz/libbasedir/multidef.h	/^} Multiseq;                  \/\/ \\Typedef{Multiseq}$/;"	t	typeref:struct:__anon21
MyFuncType	vector/dispatch_example.cpp	/^typedef float MyFuncType(float*);$/;"	t	file:
N	sparseSA.hpp	/^  long N; \/\/!< Length of the sequence.$/;"	m	struct:sparseSA
NEWLINE	MUMmer/src/kurtz/libbasedir/multiseq.c	36;"	d	file:
NEXTNODE	MUMmer/src/kurtz/streesrc/streeacc.h	157;"	d
NIL	MUMmer/src/tigr/repeat-match.cc	24;"	d	file:
NILBIT	MUMmer/src/kurtz/streesrc/streehuge.h	37;"	d
NILBIT	MUMmer/src/kurtz/streesrc/streelarge.h	44;"	d
NILBIT	MUMmer/src/kurtz/streesrc/streesmall.h	43;"	d
NILPTR	MUMmer/src/kurtz/streesrc/streehuge.h	58;"	d
NILPTR	MUMmer/src/kurtz/streesrc/streelarge.h	78;"	d
NILPTR	MUMmer/src/kurtz/streesrc/streesmall.h	61;"	d
NKm1	sparseSA.hpp	/^  long NKm1; \/\/ N\/K - 1$/;"	m	struct:sparseSA
NONE	MUMmer/src/tigr/sw_align.cc	/^static const int NONE   = 4;$/;"	v	file:
NORMAL_DISTRIB_THOLD	MUMmer/src/tigr/combineMUMs.cc	70;"	d	file:
NOTSUPPOSED	MUMmer/src/kurtz/libbasedir/errordef.h	119;"	d
NOTSUPPOSEDTOBENULL	MUMmer/src/kurtz/libbasedir/errordef.h	130;"	d
NOTSUPPOSEDTOBENULL	MUMmer/src/kurtz/libbasedir/errordef.h	136;"	d
NO_LINE	MUMmer/src/tigr/postnuc.cc	/^  NO_LINE, HEADER_LINE, MATCH_LINE$/;"	e	enum:LineType	file:
NO_LINE	MUMmer/src/tigr/postpro.cc	/^  NO_LINE, HEADER_LINE, MATCH_LINE$/;"	e	enum:LineType	file:
NUCLEOTIDE	MUMmer/src/tigr/sw_alignscore.hh	/^const int NUCLEOTIDE = 0;$/;"	v
NUCMER_DATA	MUMmer/src/tigr/delta.hh	/^const AlignmentType_t NUCMER_DATA = 'N';    \/\/!< nucmer alignment data$/;"	v
NUCMER_MATCH_CHAR	MUMmer/src/tigr/show-aligns.cc	/^const char NUCMER_MATCH_CHAR = ' ';$/;"	v
NUCMER_MISMATCH_CHAR	MUMmer/src/tigr/show-aligns.cc	/^const char NUCMER_MISMATCH_CHAR = '^';$/;"	v
NUCMER_STRING	MUMmer/src/tigr/delta.hh	/^const std::string NUCMER_STRING = "NUCMER"; \/\/!< nucmer id string$/;"	v
NULLPred_t	MUMmer/src/tigr/delta.cc	/^struct NULLPred_t$/;"	s	file:
NULL_DATA	MUMmer/src/tigr/delta.hh	/^const AlignmentType_t NULL_DATA = 0;        \/\/!< unknown alignment data type$/;"	v
NULL_STRING	MUMmer/src/tigr/show-tiling.cc	/^char NULL_STRING[1] = "";$/;"	v
NUMOFCALLS	MUMmer/src/kurtz/streesrc/construct.c	1042;"	d	file:
NUMOFOPTIONS	MUMmer/src/kurtz/mm3src/maxmatopt.c	/^  NUMOFOPTIONS$/;"	e	enum:__anon5	file:
NUM_DNA_SYMBOLS	MUMmer/src/tigr/translate.hh	22;"	d
New_Find_Child	MUMmer/src/tigr/repeat-match.cc	/^static int  New_Find_Child$/;"	f	file:
New_Jump_Down	MUMmer/src/tigr/repeat-match.cc	/^static int  New_Jump_Down$/;"	f	file:
New_Node	MUMmer/src/tigr/repeat-match.cc	/^int  New_Node  (void)$/;"	f
New_Step_Down	MUMmer/src/tigr/repeat-match.cc	/^static int  New_Step_Down$/;"	f	file:
Next_Avail_Node	MUMmer/src/tigr/repeat-match.cc	/^int  Next_Avail_Node = 1;$/;"	v
Next_Leaf	MUMmer/src/tigr/repeat-match.cc	/^int  * Next_Leaf;$/;"	v
Node	MUMmer/src/tigr/sw_align.hh	/^struct Node$/;"	s
Node_Array	MUMmer/src/tigr/repeat-match.cc	/^Node_Ptr  Node_Array;$/;"	v
Node_Ptr	MUMmer/src/tigr/repeat-match.cc	/^  }  Node_Type, * Node_Ptr;$/;"	t	typeref:struct:node	file:
Node_Type	MUMmer/src/tigr/repeat-match.cc	/^  }  Node_Type, * Node_Ptr;$/;"	t	typeref:struct:node	file:
Nodeinfo	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^DECLAREARRAYSTRUCT(Nodeinfo);$/;"	v
Nodeinfo	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^} Nodeinfo;$/;"	t	typeref:struct:__anon1	file:
NonAlphas	MUMmer/src/tigr/postnuc.cc	/^  long int Errors, SimErrors, NonAlphas; \/\/ errors, similarity errors, nonalphas$/;"	m	struct:Alignment	file:
NonAlphas	MUMmer/src/tigr/postpro.cc	/^  long int Errors, SimErrors, NonAlphas; \/\/ errors, similarity errors, nonalphas$/;"	m	struct:Alignment	file:
Norm	MUMmer/src/tigr/show-snps.cc	/^inline long Norm (long c, long l, int f, AlignmentType_t d)$/;"	f
Nucleotides_Only	MUMmer/src/tigr/combineMUMs.cc	/^int  Nucleotides_Only = FALSE;$/;"	v
Num_Strings	MUMmer/src/tigr/repeat-match.cc	/^int  Num_Strings = 2;$/;"	v
OBJECTS	MUMmer/src/kurtz/streesrc/Makefile	/^OBJECTS=construct.o access.o scanpref.o linkloc.o depthtab.o\\$/;"	m
OBJECTS4	MUMmer/src/kurtz/streesrc/Makefile	/^OBJECTS4=construct.4.o access.4.o scanpref.4.o linkloc.4.o depthtab.4.o\\$/;"	m
OBJ_RULE	MUMmer/src/tigr/Makefile	/^OBJ_RULE = $(CXX) $(CXXFLAGS) $< -c -o $@$/;"	m
OPEN_GAP_SCORE	MUMmer/src/tigr/sw_alignscore.hh	/^const int OPEN_GAP_SCORE [4] = {-10, -10, -10, -10};$/;"	v
OPTCOMPUTEBOTHDIRECTIONS	MUMmer/src/kurtz/mm3src/maxmatopt.c	/^  OPTCOMPUTEBOTHDIRECTIONS,$/;"	e	enum:__anon5	file:
OPTDESC_H	MUMmer/src/kurtz/libbasedir/optdesc.h	12;"	d
OPTFOURCOLUMN	MUMmer/src/kurtz/mm3src/maxmatopt.c	/^  OPTFOURCOLUMN,$/;"	e	enum:__anon5	file:
OPTH	MUMmer/src/kurtz/mm3src/maxmatopt.c	/^  OPTH,$/;"	e	enum:__anon5	file:
OPTHELP	MUMmer/src/kurtz/mm3src/maxmatopt.c	/^  OPTHELP,$/;"	e	enum:__anon5	file:
OPTIMAL_BACKWARD_SEARCH	MUMmer/src/tigr/sw_align.hh	/^static const unsigned int OPTIMAL_BACKWARD_SEARCH = 0xA;$/;"	v
OPTIMAL_BIT	MUMmer/src/tigr/sw_align.hh	/^static const unsigned int OPTIMAL_BIT = 0x8;$/;"	v
OPTIMAL_FORWARD_ALIGN	MUMmer/src/tigr/sw_align.hh	/^static const unsigned int OPTIMAL_FORWARD_ALIGN = 0x9;$/;"	v
OPTIMAL_FORWARD_SEARCH	MUMmer/src/tigr/sw_align.hh	/^static const unsigned int OPTIMAL_FORWARD_SEARCH = 0xB;$/;"	v
OPTION	MUMmer/src/kurtz/libbasedir/optdesc.h	29;"	d
OPTIONEXCLUDE	MUMmer/src/kurtz/libbasedir/optdesc.h	126;"	d
OPTIONIMPLY	MUMmer/src/kurtz/libbasedir/optdesc.h	72;"	d
OPTIONIMPLYEITHER2	MUMmer/src/kurtz/libbasedir/optdesc.h	80;"	d
OPTIONIMPLYEITHER3	MUMmer/src/kurtz/libbasedir/optdesc.h	92;"	d
OPTIONIMPLYEITHER4	MUMmer/src/kurtz/libbasedir/optdesc.h	106;"	d
OPTIONMANDATORY	MUMmer/src/kurtz/libbasedir/optdesc.h	59;"	d
OPTIONS	MUMmer/dnadiff	/^  OPTIONS:$/;"	l
OPTIONS	MUMmer/mapview	/^  OPTIONS:$/;"	l
OPTIONS	MUMmer/mummerplot	/^  OPTIONS:$/;"	l
OPTIONS	MUMmer/nucmer	/^  OPTIONS:$/;"	l
OPTIONS	MUMmer/promer	/^  OPTIONS:$/;"	l
OPTIONS	MUMmer/scripts/dnadiff.pl	/^  OPTIONS:$/;"	l
OPTIONS	MUMmer/scripts/mapview.pl	/^  OPTIONS:$/;"	l
OPTIONS	MUMmer/scripts/mummerplot.pl	/^  OPTIONS:$/;"	l
OPTIONS	MUMmer/scripts/nucmer.pl	/^  OPTIONS:$/;"	l
OPTIONS	MUMmer/scripts/promer.pl	/^  OPTIONS:$/;"	l
OPTLEASTLENGTH	MUMmer/src/kurtz/mm3src/maxmatopt.c	/^  OPTLEASTLENGTH,$/;"	e	enum:__anon5	file:
OPTMATCHNUCLEOTIDESONLY	MUMmer/src/kurtz/mm3src/maxmatopt.c	/^  OPTMATCHNUCLEOTIDESONLY,$/;"	e	enum:__anon5	file:
OPTMAXMATCH	MUMmer/src/kurtz/mm3src/maxmatopt.c	/^  OPTMAXMATCH,$/;"	e	enum:__anon5	file:
OPTMUM	MUMmer/src/kurtz/mm3src/maxmatopt.c	/^  OPTMUM = 0,$/;"	e	enum:__anon5	file:
OPTMUMCAND	MUMmer/src/kurtz/mm3src/maxmatopt.c	/^  OPTMUMCAND,$/;"	e	enum:__anon5	file:
OPTMUMREF	MUMmer/src/kurtz/mm3src/maxmatopt.c	/^  OPTMUMREF,$/;"	e	enum:__anon5	file:
OPTONLYREVERSECOMPLEMENT	MUMmer/src/kurtz/mm3src/maxmatopt.c	/^  OPTONLYREVERSECOMPLEMENT,$/;"	e	enum:__anon5	file:
OPTSHOWREVERSEPOSITIONS	MUMmer/src/kurtz/mm3src/maxmatopt.c	/^  OPTSHOWREVERSEPOSITIONS,$/;"	e	enum:__anon5	file:
OPTSHOWSEQUENCELENGTHS	MUMmer/src/kurtz/mm3src/maxmatopt.c	/^  OPTSHOWSEQUENCELENGTHS,$/;"	e	enum:__anon5	file:
OPTSHOWSTRING	MUMmer/src/kurtz/mm3src/maxmatopt.c	/^  OPTSHOWSTRING,$/;"	e	enum:__anon5	file:
OPT_1to1	MUMmer/src/tigr/delta-filter.cc	/^bool           OPT_1to1         = false;     \/\/ do 1-to-1 alignment$/;"	v
OPT_AMOS	MUMmer/src/tigr/show-diff.cc	/^bool    OPT_AMOS    = false;      \/\/ AMOS output$/;"	v
OPT_Aligns	MUMmer/src/tigr/show-snps.cc	/^set<string> OPT_Aligns;                 \/\/ -S option$/;"	v
OPT_Context	MUMmer/src/tigr/show-snps.cc	/^int     OPT_Context       = 0;          \/\/ -x option$/;"	v
OPT_Epsilon	MUMmer/src/tigr/delta-filter.cc	/^float          OPT_Epsilon      = -1.0;      \/\/ negligible alignment score$/;"	v
OPT_GLIS	MUMmer/src/tigr/delta-filter.cc	/^bool           OPT_GLIS         = false;     \/\/ do global LIS$/;"	v
OPT_MaxOverlap	MUMmer/src/tigr/delta-filter.cc	/^float          OPT_MaxOverlap   = 100.0;     \/\/ maximum olap as % of align len$/;"	v
OPT_MinIdentity	MUMmer/src/tigr/delta-filter.cc	/^float          OPT_MinIdentity  = 0.0;       \/\/ minimum %identity$/;"	v
OPT_MinLength	MUMmer/src/tigr/delta-filter.cc	/^long int       OPT_MinLength    = 0;         \/\/ minimum alignment length$/;"	v
OPT_MinUnique	MUMmer/src/tigr/delta-filter.cc	/^float          OPT_MinUnique    = 0.0;       \/\/ minimum %unique$/;"	v
OPT_MtoM	MUMmer/src/tigr/delta-filter.cc	/^bool           OPT_MtoM         = false;     \/\/ do M-to-M alignment$/;"	v
OPT_PrintHeader	MUMmer/src/tigr/show-diff.cc	/^bool    OPT_PrintHeader = true;   \/\/ -H option$/;"	v
OPT_PrintHeader	MUMmer/src/tigr/show-snps.cc	/^bool    OPT_PrintHeader   = true;       \/\/ -H option$/;"	v
OPT_PrintTabular	MUMmer/src/tigr/show-snps.cc	/^bool    OPT_PrintTabular  = false;      \/\/ -T option$/;"	v
OPT_QLIS	MUMmer/src/tigr/delta-filter.cc	/^bool           OPT_QLIS         = false;     \/\/ do query based LIS$/;"	v
OPT_QryDiff	MUMmer/src/tigr/show-diff.cc	/^bool    OPT_QryDiff = false;      \/\/ output query diff$/;"	v
OPT_QueryName	MUMmer/src/tigr/show-snps.cc	/^string  OPT_QueryName;                  \/\/ query sequence file name$/;"	v
OPT_RLIS	MUMmer/src/tigr/delta-filter.cc	/^bool           OPT_RLIS         = false;     \/\/ do reference based LIS$/;"	v
OPT_RefDiff	MUMmer/src/tigr/show-diff.cc	/^bool    OPT_RefDiff = false;      \/\/ output reference diff$/;"	v
OPT_ReferenceName	MUMmer/src/tigr/show-snps.cc	/^string  OPT_ReferenceName;              \/\/ reference sequence file name$/;"	v
OPT_SelectAligns	MUMmer/src/tigr/show-snps.cc	/^bool    OPT_SelectAligns  = false;      \/\/ -S option$/;"	v
OPT_ShowConflict	MUMmer/src/tigr/show-snps.cc	/^bool    OPT_ShowConflict  = true;       \/\/ -C option$/;"	v
OPT_ShowIndels	MUMmer/src/tigr/show-snps.cc	/^bool    OPT_ShowIndels    = true;       \/\/ -I option$/;"	v
OPT_ShowLength	MUMmer/src/tigr/show-snps.cc	/^bool    OPT_ShowLength    = false;      \/\/ -l option$/;"	v
OPT_SortQuery	MUMmer/src/tigr/show-snps.cc	/^bool    OPT_SortQuery     = false;      \/\/ -q option$/;"	v
OPT_SortReference	MUMmer/src/tigr/show-snps.cc	/^bool    OPT_SortReference = false;      \/\/ -r option$/;"	v
Objectives	eval2012/evaluation2012.tex	/^\\section{Objectives}$/;"	s
Objectives	presentations/LLEIDA/wga_hpc.tex	/^\\section{Objectives}$/;"	s
Only_Difference_Positions	MUMmer/src/tigr/combineMUMs.cc	/^bool  Only_Difference_Positions = false;$/;"	v
OptionDescription	MUMmer/src/kurtz/libbasedir/optdesc.h	/^} OptionDescription;         \/\/ \\Typedef{OptionDescription}$/;"	t	typeref:struct:__anon18
Optionnumber	MUMmer/src/kurtz/mm3src/maxmatopt.c	/^} Optionnumber;$/;"	t	typeref:enum:__anon5	file:
Output format	MUMmer/docs/maxmat3man.tex	/^\\section{Output format}$/;"	s
Output_Cover_Files	MUMmer/src/tigr/combineMUMs.cc	/^int  Output_Cover_Files = TRUE;$/;"	v
P	sparseSA.cpp	/^  string *P; \/\/ Query string.$/;"	m	struct:thread_data	file:
P3	MUMmer/src/kurtz/streesrc/oversucc.c	12;"	d	file:
PARSEFLOATARG	MUMmer/src/kurtz/libbasedir/args.h	52;"	d
PARSEINTARG	MUMmer/src/kurtz/libbasedir/args.h	39;"	d
PERL	MUMmer/Makefile	/^PERL := $(filter \/%,$(shell \/bin\/sh -c 'type perl'))$/;"	m
PERL	MUMmer/scripts/Makefile	/^PERL := $(filter \/%,$(shell \/bin\/sh -c 'type perl'))$/;"	m
PNO	MUMmer/src/kurtz/streesrc/oversucc.c	13;"	d	file:
PREFIX_FORMAT	MUMmer/src/tigr/show-aligns.cc	35;"	d	file:
PREFIX_LEN	MUMmer/src/tigr/annotate.cc	20;"	d	file:
PROCESS	MUMmer/src/kurtz/streesrc/oversucc.c	15;"	d	file:
PROCESSALL	MUMmer/src/kurtz/streesrc/streedbg.c	25;"	d	file:
PROCESSBRANCH1	MUMmer/src/kurtz/streesrc/dfs.c	60;"	d	file:
PROCESSBRANCH1	MUMmer/src/kurtz/streesrc/dfs.c	65;"	d	file:
PROCESSBRANCH1	MUMmer/src/kurtz/streesrc/dfs.c	67;"	d	file:
PROCESSBRANCH2	MUMmer/src/kurtz/streesrc/dfs.c	61;"	d	file:
PROCESSBRANCH2	MUMmer/src/kurtz/streesrc/dfs.c	66;"	d	file:
PROCESSBRANCH2	MUMmer/src/kurtz/streesrc/dfs.c	68;"	d	file:
PROCESSHEAD	MUMmer/src/kurtz/streesrc/construct.c	1002;"	d	file:
PROCESSHEAD	MUMmer/src/kurtz/streesrc/construct.c	1012;"	d	file:
PROCESSHEAD	MUMmer/src/kurtz/streesrc/construct.c	1023;"	d	file:
PROCESSHEAD	MUMmer/src/kurtz/streesrc/construct.c	1035;"	d	file:
PROCESSHEAD	MUMmer/src/kurtz/streesrc/construct.c	1058;"	d	file:
PROCESSHEAD	MUMmer/src/kurtz/streesrc/construct.c	1095;"	d	file:
PROCESSHEAD	MUMmer/src/kurtz/streesrc/construct.c	961;"	d	file:
PROCESSHEAD	MUMmer/src/kurtz/streesrc/construct.c	971;"	d	file:
PROCESSREALMUMS	MUMmer/src/kurtz/mm3src/procmaxmat.c	119;"	d	file:
PROMER_DATA	MUMmer/src/tigr/delta.hh	/^const AlignmentType_t PROMER_DATA = 'P';    \/\/!< promer alignment data$/;"	v
PROMER_MISMATCH_CHAR	MUMmer/src/tigr/show-aligns.cc	/^const char PROMER_MISMATCH_CHAR = ' ';$/;"	v
PROMER_SIM_CHAR	MUMmer/src/tigr/show-aligns.cc	/^const char PROMER_SIM_CHAR = '+';$/;"	v
PROMER_STRING	MUMmer/src/tigr/delta.hh	/^const std::string PROMER_STRING = "PROMER"; \/\/!< promer id string$/;"	v
PROTODEF_H	MUMmer/src/kurtz/libbasedir/protodef.h	10;"	d
PROTOFILES	MUMmer/src/kurtz/streesrc/Makefile	/^PROTOFILES=access.c scanpref.c linkloc.c depthtab.c\\$/;"	m
PairUint	MUMmer/src/kurtz/libbasedir/arraydef.h	/^DECLAREARRAYSTRUCT(PairUint);$/;"	v
PairUint	MUMmer/src/kurtz/libbasedir/types.h	/^} PairUint;                \/\/ \\Typedef{PairUint}$/;"	t	typeref:struct:__anon13
Parallel search of maximal unique matches	presentations/LLEIDA/wga_hpc.tex	/^\\section{Parallel search of maximal unique matches}$/;"	s
Parallelism technique	papers/JP2012/wga_parallelization.tex	/^\\section{Parallelism technique}$/;"	s
Parent	MUMmer/src/tigr/repeat-match.cc	/^   unsigned  Parent;$/;"	m	struct:leaf	file:
Parent	MUMmer/src/tigr/repeat-match.cc	/^   unsigned  Parent;$/;"	m	struct:node	file:
ParseArgs	MUMmer/src/tigr/delta-filter.cc	/^void ParseArgs(int argc, char ** argv)$/;"	f
ParseArgs	MUMmer/src/tigr/show-diff.cc	/^void ParseArgs (int argc, char ** argv)$/;"	f
ParseArgs	MUMmer/src/tigr/show-snps.cc	/^void ParseArgs (int argc, char ** argv)$/;"	f
ParseCluster	MUMmer/mummerplot	/^sub ParseCluster ($)$/;"	s
ParseCluster	MUMmer/scripts/mummerplot.pl	/^sub ParseCluster ($)$/;"	s
ParseDelta	MUMmer/mummerplot	/^sub ParseDelta ($)$/;"	s
ParseDelta	MUMmer/scripts/mummerplot.pl	/^sub ParseDelta ($)$/;"	s
ParseIDs	MUMmer/mummerplot	/^sub ParseIDs ($$)$/;"	s
ParseIDs	MUMmer/scripts/mummerplot.pl	/^sub ParseIDs ($$)$/;"	s
ParseMummer	MUMmer/mummerplot	/^sub ParseMummer ($)$/;"	s
ParseMummer	MUMmer/scripts/mummerplot.pl	/^sub ParseMummer ($)$/;"	s
ParseOptions	MUMmer/mummerplot	/^sub ParseOptions ( )$/;"	s
ParseOptions	MUMmer/scripts/mummerplot.pl	/^sub ParseOptions ( )$/;"	s
ParseTiling	MUMmer/mummerplot	/^sub ParseTiling ($)$/;"	s
ParseTiling	MUMmer/scripts/mummerplot.pl	/^sub ParseTiling ($)$/;"	s
Parse_Command_Line	MUMmer/src/tigr/combineMUMs.cc	/^void  Parse_Command_Line$/;"	f
Parse_Command_Line	MUMmer/src/tigr/mgaps.cc	/^static void  Parse_Command_Line$/;"	f	file:
Parse_Command_Line	MUMmer/src/tigr/repeat-match.cc	/^static void  Parse_Command_Line$/;"	f	file:
Pathinfo	MUMmer/src/kurtz/streesrc/streetyp.h	/^DECLAREARRAYSTRUCT(Pathinfo);$/;"	v
Pathinfo	MUMmer/src/kurtz/streesrc/streetyp.h	/^} Pathinfo;      \/\/ \\Typedef{Pathinfo}$/;"	t	typeref:struct:__anon11
Percent_ID	MUMmer/src/tigr/combineMUMs.cc	/^double  Percent_ID;$/;"	v
PickBest	MUMmer/src/tigr/delta.cc	/^long PickBest$/;"	f
PlotData	MUMmer/mummerplot	/^sub PlotData ($$$)$/;"	s
PlotData	MUMmer/scripts/mummerplot.pl	/^sub PlotData ($$$)$/;"	s
Prefix_Edit_Dist	MUMmer/src/tigr/combineMUMs.cc	/^int  Prefix_Edit_Dist$/;"	f
PrintBrk	MUMmer/src/tigr/show-diff.cc	/^void PrintBrk(const char* seq, long s, long e)$/;"	f
PrintDiff	MUMmer/src/tigr/show-diff.cc	/^void PrintDiff(DeltaGraph_t & graph)$/;"	f
PrintDup	MUMmer/src/tigr/show-diff.cc	/^void PrintDup(const char* seq, long s, long e)$/;"	f
PrintGap	MUMmer/src/tigr/show-diff.cc	/^void PrintGap(const char* seq, long s, long e, long gap1, long gap2)$/;"	f
PrintHelp	MUMmer/src/tigr/delta-filter.cc	/^void PrintHelp(const char * s)$/;"	f
PrintHelp	MUMmer/src/tigr/show-diff.cc	/^void PrintHelp (const char * s)$/;"	f
PrintHelp	MUMmer/src/tigr/show-snps.cc	/^void PrintHelp (const char * s)$/;"	f
PrintHuman	MUMmer/src/tigr/show-snps.cc	/^void PrintHuman (const vector<const SNP_t *> & snps,$/;"	f
PrintInv	MUMmer/src/tigr/show-diff.cc	/^void PrintInv(const char* seq, long s, long e)$/;"	f
PrintLisJmp	MUMmer/src/tigr/show-diff.cc	/^void PrintLisJmp(const char* seq, long s, long e)$/;"	f
PrintSeqJmp	MUMmer/src/tigr/show-diff.cc	/^void PrintSeqJmp(const char* seq,$/;"	f
PrintTabular	MUMmer/src/tigr/show-snps.cc	/^void PrintTabular (const vector<const SNP_t *> & snps,$/;"	f
PrintUsage	MUMmer/src/tigr/delta-filter.cc	/^void PrintUsage(const char * s)$/;"	f
PrintUsage	MUMmer/src/tigr/show-diff.cc	/^void PrintUsage (const char * s)$/;"	f
PrintUsage	MUMmer/src/tigr/show-snps.cc	/^void PrintUsage (const char * s)$/;"	f
Problem definition	eval2012/evaluation2012.tex	/^\\section{Problem definition}$/;"	s
Problem definition	presentations/LLEIDA/wga_hpc.tex	/^\\section{Problem definition}$/;"	s
Process_Cluster	MUMmer/src/tigr/mgaps.cc	/^static int  Process_Cluster$/;"	f	file:
Process_Matches	MUMmer/src/tigr/mgaps.cc	/^static void  Process_Matches$/;"	f	file:
Processmatchfunction	MUMmer/src/kurtz/mm3src/maxmatdef.h	/^typedef Sint (*Processmatchfunction)$/;"	t
QUATERNION_H	vector/special/quaternion.h	18;"	d
QUERY_MASK	MUMmer/src/tigr/prepro.cc	/^const char QUERY_MASK = 'O';         \/\/ masking character to use for query$/;"	v
QryFileName	MUMmer/src/tigr/show-aligns.cc	/^char RefFileName [MAX_LINE], QryFileName [MAX_LINE];$/;"	v
QryFileName	MUMmer/src/tigr/show-coords.cc	/^char RefFileName [MAX_LINE], QryFileName [MAX_LINE];$/;"	v
QryFileName	MUMmer/src/tigr/show-tiling.cc	/^char RefFileName [MAX_LINE], QryFileName [MAX_LINE];$/;"	v
Qsortcomparefunction	MUMmer/src/kurtz/libbasedir/types.h	/^typedef int (*Qsortcomparefunction)(const void *,const void *);$/;"	t
Qsortcomparereturntype	MUMmer/src/kurtz/libbasedir/types.h	/^typedef int Qsortcomparereturntype; \/\/ \\Typedef{Qsortcomparefunction}$/;"	t
Quaternion4d	vector/special/quaternion.h	/^    Quaternion4d() {$/;"	f	class:Quaternion4d
Quaternion4d	vector/special/quaternion.h	/^    Quaternion4d(Complex2d const & a0, Complex2d const & a1) {$/;"	f	class:Quaternion4d
Quaternion4d	vector/special/quaternion.h	/^    Quaternion4d(Vec3d const & x) {$/;"	f	class:Quaternion4d
Quaternion4d	vector/special/quaternion.h	/^    Quaternion4d(Vec4d const & x) {$/;"	f	class:Quaternion4d
Quaternion4d	vector/special/quaternion.h	/^    Quaternion4d(__m256d const & x) {$/;"	f	class:Quaternion4d
Quaternion4d	vector/special/quaternion.h	/^    Quaternion4d(double re) {$/;"	f	class:Quaternion4d
Quaternion4d	vector/special/quaternion.h	/^    Quaternion4d(double re, double im0, double im1, double im2) {$/;"	f	class:Quaternion4d
Quaternion4d	vector/special/quaternion.h	/^class Quaternion4d {$/;"	c
Quaternion4f	vector/special/quaternion.h	/^    Quaternion4f() {$/;"	f	class:Quaternion4f
Quaternion4f	vector/special/quaternion.h	/^    Quaternion4f(Complex2f const & a0, Complex2f const & a1) {$/;"	f	class:Quaternion4f
Quaternion4f	vector/special/quaternion.h	/^    Quaternion4f(Vec3f const & x) {$/;"	f	class:Quaternion4f
Quaternion4f	vector/special/quaternion.h	/^    Quaternion4f(Vec4f const & x) {$/;"	f	class:Quaternion4f
Quaternion4f	vector/special/quaternion.h	/^    Quaternion4f(__m128 const & x) {$/;"	f	class:Quaternion4f
Quaternion4f	vector/special/quaternion.h	/^    Quaternion4f(float re) {$/;"	f	class:Quaternion4f
Quaternion4f	vector/special/quaternion.h	/^    Quaternion4f(float re, float im0, float im1, float im2) {$/;"	f	class:Quaternion4f
Quaternion4f	vector/special/quaternion.h	/^class Quaternion4f {$/;"	c
Query	MUMmer/src/tigr/combineMUMs.cc	/^char  * Query = NULL;$/;"	v
QueryContig	MUMmer/src/tigr/show-tiling.cc	/^struct QueryContig$/;"	s	file:
Query_Len	MUMmer/src/tigr/combineMUMs.cc	/^long int  Query_Len;$/;"	v
Query_Suffix	MUMmer/src/tigr/combineMUMs.cc	/^char  * Query_Suffix = "Query";$/;"	v
REALLY_VERBOSE	MUMmer/src/tigr/combineMUMs.cc	72;"	d	file:
RECALLBRANCHADDRESS	MUMmer/src/kurtz/streesrc/streeacc.h	211;"	d
RECALLLEAFADDRESS	MUMmer/src/kurtz/streesrc/streeacc.h	209;"	d
RECALLNEWLEAFADDRESS	MUMmer/src/kurtz/streesrc/streeacc.h	207;"	d
RECALLSUCC	MUMmer/src/kurtz/streesrc/streeacc.h	196;"	d
RECALLSUCC	MUMmer/src/kurtz/streesrc/streeacc.h	198;"	d
REFERENCE_MASK	MUMmer/src/tigr/prepro.cc	/^const char REFERENCE_MASK = 'X';     \/\/ masking character to use for reference$/;"	v
REPEAT_PIDY_DIFF	MUMmer/src/tigr/show-tiling.cc	/^const float REPEAT_PIDY_DIFF = 0.25;$/;"	v
REVERSE_CHAR	MUMmer/src/tigr/postnuc.cc	/^const signed char REVERSE_CHAR = -1;$/;"	v
REVERSE_CHAR	MUMmer/src/tigr/show-tiling.cc	/^const char REVERSE_CHAR  =  '-';$/;"	v
REVERSE_DIR	MUMmer/src/tigr/delta.hh	/^const Dir_t REVERSE_DIR = 1;                \/\/!< reverse direction$/;"	v
ROOT	MUMmer/src/kurtz/streesrc/streemac.h	45;"	d
ROOTLOCATION	MUMmer/src/kurtz/streesrc/streemac.h	52;"	d
Read_String	MUMmer/src/tigr/combineMUMs.cc	/^int  Read_String$/;"	f
Read_String	MUMmer/src/tigr/tigrinc.cc	/^int Read_String  (FILE * fp, char * & T, long int & Size, char Name [],$/;"	f
Ref	MUMmer/src/tigr/combineMUMs.cc	/^char  * Ref = NULL;$/;"	v
RefFileName	MUMmer/src/tigr/show-aligns.cc	/^char RefFileName [MAX_LINE], QryFileName [MAX_LINE];$/;"	v
RefFileName	MUMmer/src/tigr/show-coords.cc	/^char RefFileName [MAX_LINE], QryFileName [MAX_LINE];$/;"	v
RefFileName	MUMmer/src/tigr/show-tiling.cc	/^char RefFileName [MAX_LINE], QryFileName [MAX_LINE];$/;"	v
Ref_File_Path	MUMmer/src/tigr/combineMUMs.cc	/^char  * Ref_File_Path = NULL;$/;"	v
Ref_Len	MUMmer/src/tigr/combineMUMs.cc	/^long int  Ref_Len;$/;"	v
Ref_Size	MUMmer/src/tigr/combineMUMs.cc	/^long int  Ref_Size;$/;"	v
Ref_Suffix	MUMmer/src/tigr/combineMUMs.cc	/^char  * Ref_Suffix = "Ref";$/;"	v
Reference	MUMmer/src/kurtz/streesrc/streetyp.h	/^} Reference;            \/\/ \\Typedef{Reference}$/;"	t	typeref:struct:__anon7
References	papers/BBC2013/procs-sample.tex	/^\\section*{References}$/;"	s
Results	papers/APBC2012/wga_APBC2012.tex	/^        \\paragraph*{Results:} We evaluate several genome sizes in order to test if our novel parallelization reduces the execution time and it produces the same set of matches than the serial execution. A data level parallelism is used in the reference and query genome.$/;"	P
Results and Discussion	papers/APBC2012/wga_APBC2012.tex	/^\\section*{Results and Discussion}$/;"	s
RevC	MUMmer/src/tigr/delta.cc	/^inline long RevC (const long & coord,$/;"	f
RevC	MUMmer/src/tigr/show-snps.cc	/^inline long RevC (long coord, long len)$/;"	f
Rev_Complement	MUMmer/src/tigr/combineMUMs.cc	/^void  Rev_Complement$/;"	f
Rev_Display_Alignment	MUMmer/src/tigr/combineMUMs.cc	/^void  Rev_Display_Alignment$/;"	f
Rev_Prefix_Edit_Dist	MUMmer/src/tigr/combineMUMs.cc	/^int  Rev_Prefix_Edit_Dist$/;"	f
Rev_Show_Diffs	MUMmer/src/tigr/combineMUMs.cc	/^void  Rev_Show_Diffs$/;"	f
Reverse_Complement	MUMmer/src/tigr/tigrinc.cc	/^void  Reverse_Complement$/;"	f
RunAlignment	MUMmer/dnadiff	/^sub RunAlignment()$/;"	s
RunAlignment	MUMmer/scripts/dnadiff.pl	/^sub RunAlignment()$/;"	s
RunCoords	MUMmer/dnadiff	/^sub RunCoords()$/;"	s
RunCoords	MUMmer/scripts/dnadiff.pl	/^sub RunCoords()$/;"	s
RunDiff	MUMmer/dnadiff	/^sub RunDiff()$/;"	s
RunDiff	MUMmer/scripts/dnadiff.pl	/^sub RunDiff()$/;"	s
RunFilter	MUMmer/dnadiff	/^sub RunFilter()$/;"	s
RunFilter	MUMmer/scripts/dnadiff.pl	/^sub RunFilter()$/;"	s
RunGP	MUMmer/mummerplot	/^sub RunGP ( )$/;"	s
RunGP	MUMmer/scripts/mummerplot.pl	/^sub RunGP ( )$/;"	s
RunSNPs	MUMmer/dnadiff	/^sub RunSNPs()$/;"	s
RunSNPs	MUMmer/scripts/dnadiff.pl	/^sub RunSNPs()$/;"	s
S	MUMmer/src/tigr/sw_align.hh	/^  Score S[3];$/;"	m	struct:Node
S	sparseSA.hpp	/^  string &S; \/\/!< Reference to sequence data.$/;"	m	struct:sparseSA
SA	sparseSA.hpp	/^  vector<unsigned int> SA;  \/\/ Suffix array.$/;"	m	struct:sparseSA
SCRIPT_DIR	MUMmer/Makefile	/^SCRIPT_DIR    := $(TOP_DIR)\/scripts$/;"	m
SCRIPT_DIR	MUMmer/scripts/Makefile	/^SCRIPT_DIR := $(CURDIR)$/;"	m
SEARCH_BIT	MUMmer/src/tigr/sw_align.hh	/^static const unsigned int SEARCH_BIT = 0x2;$/;"	v
SECONDBIT	MUMmer/src/kurtz/libbasedir/intbits.h	34;"	d
SED	MUMmer/Makefile	/^SED  := $(filter \/%,$(shell \/bin\/sh -c 'type sed'))$/;"	m
SED	MUMmer/scripts/Makefile	/^SED := $(filter \/%,$(shell \/bin\/sh -c 'type sed'))$/;"	m
SEPARATOR	MUMmer/src/kurtz/libbasedir/chardef.h	22;"	d
SEQEND_BIT	MUMmer/src/tigr/sw_align.hh	/^static const unsigned int SEQEND_BIT = 0x10;$/;"	v
SEQEND_CHAR	MUMmer/src/tigr/show-snps.cc	/^const char SEQEND_CHAR = '-';$/;"	v
SETBRANCHNODEOFFSET	MUMmer/src/kurtz/streesrc/streehuge.h	87;"	d
SETBRANCHNODEOFFSET	MUMmer/src/kurtz/streesrc/streelarge.h	109;"	d
SETBRANCHNODEOFFSET	MUMmer/src/kurtz/streesrc/streesmall.h	95;"	d
SETBRANCHUSED	MUMmer/src/kurtz/streesrc/streedbg.c	22;"	d	file:
SETBROTHER	MUMmer/src/kurtz/streesrc/streehuge.h	69;"	d
SETBROTHER	MUMmer/src/kurtz/streesrc/streelarge.h	92;"	d
SETBROTHER	MUMmer/src/kurtz/streesrc/streesmall.h	75;"	d
SETCHILD	MUMmer/src/kurtz/streesrc/streehuge.h	68;"	d
SETCHILD	MUMmer/src/kurtz/streesrc/streelarge.h	88;"	d
SETCHILD	MUMmer/src/kurtz/streesrc/streesmall.h	66;"	d
SETCURRENT	MUMmer/src/kurtz/streesrc/dfs.c	16;"	d	file:
SETCURRENT	MUMmer/src/kurtz/streesrc/iterator.c	16;"	d	file:
SETDEPTHHEADPOS	MUMmer/src/kurtz/streesrc/streehuge.h	73;"	d
SETDEPTHHEADPOS	MUMmer/src/kurtz/streesrc/streelarge.h	95;"	d
SETDEPTHHEADPOS	MUMmer/src/kurtz/streesrc/streesmall.h	80;"	d
SETDISTANCE	MUMmer/src/kurtz/streesrc/streehuge.h	71;"	d
SETDISTANCE	MUMmer/src/kurtz/streesrc/streelarge.h	93;"	d
SETDISTANCE	MUMmer/src/kurtz/streesrc/streesmall.h	70;"	d
SETIBIT	MUMmer/src/kurtz/libbasedir/intbits.h	88;"	d
SETLEAFBROTHER	MUMmer/src/kurtz/streesrc/streehuge.h	83;"	d
SETLEAFBROTHER	MUMmer/src/kurtz/streesrc/streelarge.h	105;"	d
SETLEAFBROTHER	MUMmer/src/kurtz/streesrc/streesmall.h	92;"	d
SETLEAFUSED	MUMmer/src/kurtz/streesrc/streedbg.c	19;"	d	file:
SETMAXBRANCHDEPTH	MUMmer/src/kurtz/streesrc/streeacc.h	226;"	d
SETNEWCHILD	MUMmer/src/kurtz/streesrc/streehuge.h	76;"	d
SETNEWCHILD	MUMmer/src/kurtz/streesrc/streelarge.h	97;"	d
SETNEWCHILD	MUMmer/src/kurtz/streesrc/streesmall.h	84;"	d
SETNEWCHILDBROTHER	MUMmer/src/kurtz/streesrc/streehuge.h	77;"	d
SETNEWCHILDBROTHER	MUMmer/src/kurtz/streesrc/streelarge.h	98;"	d
SETNEWCHILDBROTHER	MUMmer/src/kurtz/streesrc/streesmall.h	85;"	d
SETNILBIT	MUMmer/src/kurtz/streesrc/streeacc.h	215;"	d
SETNILBIT	MUMmer/src/kurtz/streesrc/streeacc.h	217;"	d
SETSUFFIXLINK	MUMmer/src/kurtz/streesrc/streehuge.h	80;"	d
SETSUFFIXLINK	MUMmer/src/kurtz/streesrc/streelarge.h	102;"	d
SETSUFFIXLINK	MUMmer/src/kurtz/streesrc/streesmall.h	89;"	d
SETVAL	MUMmer/src/kurtz/streesrc/streeacc.h	26;"	d
SETVAL	MUMmer/src/kurtz/streesrc/streeacc.h	40;"	d
SHELL	MUMmer/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHIFTHIGHER	MUMmer/src/kurtz/streesrc/streelarge.h	56;"	d
SHIFTMIDDLE	MUMmer/src/kurtz/streesrc/streelarge.h	50;"	d
SHOWBIT	MUMmer/src/kurtz/libbasedir/types.h	231;"	d
SHOWBOOL	MUMmer/src/kurtz/libbasedir/types.h	230;"	d
SHOWBOOLEANVALUE	MUMmer/src/kurtz/mm3src/maxmat3.c	26;"	d	file:
SHOWCHAR	MUMmer/src/kurtz/libbasedir/visible.h	76;"	d
SHOWCHARFP	MUMmer/src/kurtz/libbasedir/visible.h	62;"	d
SHOWINDEX	MUMmer/src/kurtz/streesrc/streeacc.h	244;"	d
SHOWINDEX	MUMmer/src/kurtz/streesrc/streeacc.h	271;"	d
SHOWREF	MUMmer/src/kurtz/streesrc/streedbg.c	571;"	d	file:
SHOWVAL	MUMmer/src/kurtz/streesrc/streeacc.h	25;"	d
SHOW_TREE	MUMmer/src/tigr/repeat-match.cc	14;"	d	file:
SIMPLESTANDARDMESSAGE	MUMmer/src/kurtz/libbasedir/errordef.h	110;"	d
SIZEFLAG	MUMmer/src/kurtz/streesrc/Makefile	/^SIZEFLAG=-DSTREEHUGE$/;"	m
SKIP_PEP_CHAR	MUMmer/src/tigr/translate.hh	21;"	d
SMALLBIT	MUMmer/src/kurtz/streesrc/streehuge.h	36;"	d
SMALLDEPTH	MUMmer/src/kurtz/streesrc/streelarge.h	51;"	d
SMALLDEPTH	MUMmer/src/kurtz/streesrc/streesmall.h	58;"	d
SMALLDEPTHBITS	MUMmer/src/kurtz/streesrc/streelarge.h	49;"	d
SMALLDEPTHBITS	MUMmer/src/kurtz/streesrc/streesmall.h	56;"	d
SMALLDEPTHMARK	MUMmer/src/kurtz/streesrc/streelarge.h	48;"	d
SMALLDEPTHMARK	MUMmer/src/kurtz/streesrc/streesmall.h	57;"	d
SMALLINTS	MUMmer/src/kurtz/streesrc/streehuge.h	30;"	d
SMALLINTS	MUMmer/src/kurtz/streesrc/streelarge.h	32;"	d
SMALLINTS	MUMmer/src/kurtz/streesrc/streesmall.h	34;"	d
SMALL_INIT_SIZE	MUMmer/src/tigr/tigrinc.hh	28;"	d
SNP_Q_Sort	MUMmer/src/tigr/show-snps.cc	/^struct SNP_Q_Sort$/;"	s	file:
SNP_R_Sort	MUMmer/src/tigr/show-snps.cc	/^struct SNP_R_Sort$/;"	s	file:
SNP_t	MUMmer/src/tigr/delta.hh	/^  SNP_t ( )$/;"	f	struct:SNP_t
SNP_t	MUMmer/src/tigr/delta.hh	/^struct SNP_t$/;"	s
SPACEDEF_H	MUMmer/src/kurtz/libbasedir/spacedef.h	12;"	d
SPLINTALL	MUMmer/src/kurtz/mm3src/Makefile	/^SPLINTALL=maxmat3.splint maxmatopt.splint maxmatinp.splint\\$/;"	m
SPLINTALL	MUMmer/src/kurtz/streesrc/Makefile	/^SPLINTALL=access.splint scanpref.splint linkloc.splint depthtab.splint\\$/;"	m
SPLINTFLAGS	MUMmer/src/kurtz/libbasedir/Makefile	/^SPLINTFLAGS=-f ..\/Splintoptions -DDEBUG$/;"	m
SPLINTFLAGS	MUMmer/src/kurtz/mm3src/Makefile	/^SPLINTFLAGS=${INCLUDEDIR} -f ..\/Splintoptions -DDEBUG$/;"	m
SPLINTFLAGS	MUMmer/src/kurtz/streesrc/Makefile	/^SPLINTFLAGS=${SIZEFLAG} -I${INCLUDEDIR} -f ..\/Splintoptions -DDEBUG$/;"	m
SRC	Makefile	/^SRC = mummer.cpp qsufsort.c sparseSA.cpp fasta.cpp$/;"	m
STAMP	MUMmer/src/kurtz/libbasedir/debugdef.h	30;"	d
STANDARDMESSAGE	MUMmer/src/kurtz/libbasedir/errordef.h	106;"	d
START	MUMmer/src/tigr/sw_align.cc	/^static const int START  = 3;$/;"	v	file:
STARTFACTOR	MUMmer/src/kurtz/streesrc/construct.c	88;"	d	file:
START_CHAR	MUMmer/src/tigr/repeat-match.cc	/^const char  START_CHAR = '%';$/;"	v
STOP_CHAR	MUMmer/src/tigr/prepro.cc	/^const char STOP_CHAR = '*';          \/\/ stop codon character$/;"	v
STOP_CHAR	MUMmer/src/tigr/sw_alignscore.hh	/^const char STOP_CHAR = 'O';$/;"	v
STOP_MASK	MUMmer/src/tigr/prepro.cc	/^const char STOP_MASK = 'J';          \/\/ alpha character for stop codons$/;"	v
STOREINARRAY	MUMmer/src/kurtz/libbasedir/arraydef.h	107;"	d
STORESTARTDESC	MUMmer/src/kurtz/libbasedir/multiseq.c	54;"	d	file:
STORESTARTDESC	MUMmer/src/kurtz/mm3src/maxmatinp.c	37;"	d	file:
STREEACC_H	MUMmer/src/kurtz/streesrc/streeacc.h	10;"	d
STREEDEF_H	MUMmer/src/kurtz/streesrc/streedef.h	10;"	d
STREEHUGE_H	MUMmer/src/kurtz/streesrc/streehuge.h	16;"	d
STREELARGE_H	MUMmer/src/kurtz/streesrc/streelarge.h	16;"	d
STREEMAC_H	MUMmer/src/kurtz/streesrc/streemac.h	10;"	d
STREEPROTO_H	MUMmer/src/kurtz/streesrc/streeproto.h	14;"	d
STREESTDEF_H	MUMmer/src/kurtz/streesrc/streesmall.h	16;"	d
STREETYP_H	MUMmer/src/kurtz/streesrc/streetyp.h	10;"	d
SWAP	qsufsort.c	22;"	d	file:
SWITCH	MUMmer/mummerplot	/^  SWITCH: {$/;"	l
SWITCH	MUMmer/scripts/mummerplot.pl	/^  SWITCH: {$/;"	l
SYMBOL	MUMmer/src/kurtz/streesrc/symboldef.h	/^typedef Uchar SYMBOL;$/;"	t
SYMBOL	MUMmer/src/kurtz/streesrc/symboldef.h	/^typedef Uint SYMBOL;$/;"	t
SYMBOL	MUMmer/src/kurtz/streesrc/symboldef.h	/^typedef Ushort SYMBOL;$/;"	t
SYMBOLBYTES	MUMmer/src/kurtz/streesrc/symboldef.h	13;"	d
SYMBOLDEF_H	MUMmer/src/kurtz/streesrc/symboldef.h	10;"	d
Safe_calloc	MUMmer/src/tigr/tigrinc.cc	/^void *  Safe_calloc  (size_t N, size_t Len)$/;"	f
Safe_malloc	MUMmer/src/tigr/tigrinc.cc	/^void *  Safe_malloc  (size_t Len)$/;"	f
Safe_realloc	MUMmer/src/tigr/tigrinc.cc	/^void *  Safe_realloc  (void * Q, size_t Len)$/;"	f
Scaninteger	MUMmer/src/kurtz/libbasedir/types.h	/^typedef signed long Scaninteger;    \/\/ \\Typedef{Scaninteger}$/;"	t
Score	MUMmer/src/tigr/sw_align.hh	/^struct Score$/;"	s
ScoreGlobal	MUMmer/src/tigr/delta.cc	/^inline long ScoreGlobal$/;"	f
ScoreLocal	MUMmer/src/tigr/delta.cc	/^inline long ScoreLocal$/;"	f
Screen_Width	MUMmer/src/tigr/show-aligns.cc	/^int Screen_Width = DEFAULT_SCREEN_WIDTH;$/;"	v
SelectAligns	MUMmer/src/tigr/show-snps.cc	/^void SelectAligns ( )$/;"	f
Separation_Factor	MUMmer/src/tigr/mgaps.cc	/^static double  Separation_Factor = DEFAULT_SEPARATION_FACTOR;$/;"	v	file:
SeqLenA	MUMmer/src/tigr/show-coords.cc	/^  long int SeqLenA, SeqLenB;              \/\/ length of seq A, seq B$/;"	m	struct:AlignStats	file:
SeqLenB	MUMmer/src/tigr/show-coords.cc	/^  long int SeqLenA, SeqLenB;              \/\/ length of seq A, seq B$/;"	m	struct:AlignStats	file:
SeqLenQ	MUMmer/src/tigr/show-tiling.cc	/^  long int SeqLenQ;                        \/\/ length of the query$/;"	m	struct:QueryContig	file:
SeqLenR	MUMmer/src/tigr/show-tiling.cc	/^  long int SeqLenR;                        \/\/ sequence length of the reference$/;"	m	struct:QueryContig	file:
SeqLenR	MUMmer/src/tigr/show-tiling.cc	/^  long int SeqLenR;                     \/\/ length of the reference$/;"	m	struct:AlignStats	file:
SeqQ	MUMmer/src/tigr/show-tiling.cc	/^  char * SeqQ;                             \/\/ query sequence$/;"	m	struct:QueryContig	file:
Seqinfo	MUMmer/src/kurtz/libbasedir/multidef.h	/^} Seqinfo;           \/\/ \\Typedef{Seqinfo}$/;"	t	typeref:struct:__anon23
SetTheRangeForEachFile	MUMmer/mapview	/^sub SetTheRangeForEachFile{      $/;"	s
SetTheRangeForEachFile	MUMmer/scripts/mapview.pl	/^sub SetTheRangeForEachFile{      $/;"	s
Set_Deltas	MUMmer/src/tigr/combineMUMs.cc	/^void  Set_Deltas$/;"	f
Set_Left_Pad	MUMmer/src/tigr/combineMUMs.cc	/^static void  Set_Left_Pad$/;"	f	file:
Set_Right_Pad	MUMmer/src/tigr/combineMUMs.cc	/^static void  Set_Right_Pad$/;"	f	file:
Set_Subtree_Size	MUMmer/src/tigr/repeat-match.cc	/^void  Set_Subtree_Size$/;"	f
Should_Skip	MUMmer/src/tigr/repeat-match.cc	/^   unsigned  Should_Skip : 1;$/;"	m	struct:node	file:
Show_Alignment	MUMmer/src/tigr/annotate.cc	/^void  Show_Alignment (char A [], long int M, char B [], long int N)$/;"	f
Show_Coverage	MUMmer/src/tigr/combineMUMs.cc	/^void  Show_Coverage$/;"	f
Show_Differences	MUMmer/src/tigr/combineMUMs.cc	/^int  Show_Differences = FALSE;$/;"	v
Show_Diffs	MUMmer/src/tigr/combineMUMs.cc	/^void  Show_Diffs$/;"	f
Showdescinfo	MUMmer/src/kurtz/libbasedir/multidef.h	/^} Showdescinfo;$/;"	t	typeref:struct:__anon22
Showsint	MUMmer/src/kurtz/libbasedir/types.h	/^typedef signed long Showsint;       \/\/ \\Typedef{Showsint}$/;"	t
Showuint	MUMmer/src/kurtz/libbasedir/types.h	/^typedef unsigned long Showuint;     \/\/ \\Typedef{Showuint}$/;"	t
Sibling	MUMmer/src/tigr/repeat-match.cc	/^   int  Sibling : 31;$/;"	m	struct:leaf	file:
Sibling	MUMmer/src/tigr/repeat-match.cc	/^   int  Sibling : 31;$/;"	m	struct:node	file:
Sibling_Is_Leaf	MUMmer/src/tigr/repeat-match.cc	/^   unsigned  Sibling_Is_Leaf : 1;$/;"	m	struct:leaf	file:
Sibling_Is_Leaf	MUMmer/src/tigr/repeat-match.cc	/^   unsigned  Sibling_Is_Leaf : 1;$/;"	m	struct:node	file:
Sign	MUMmer/src/tigr/combineMUMs.cc	/^int  Sign$/;"	f
Sim	MUMmer/src/tigr/show-coords.cc	/^  float Sim;                              \/\/ percent similarity (0.0 - 100.0)$/;"	m	struct:AlignStats	file:
Sim	MUMmer/src/tigr/show-tiling.cc	/^  float Sim;                            \/\/ percent similarity [0.0, 100.0]$/;"	m	struct:AlignStats	file:
SimErrors	MUMmer/src/tigr/postnuc.cc	/^  long int Errors, SimErrors, NonAlphas; \/\/ errors, similarity errors, nonalphas$/;"	m	struct:Alignment	file:
SimErrors	MUMmer/src/tigr/postpro.cc	/^  long int Errors, SimErrors, NonAlphas; \/\/ errors, similarity errors, nonalphas$/;"	m	struct:Alignment	file:
Simple_Adj	MUMmer/src/tigr/gaps.cc	/^   long int  Simple_Adj, Wrap_Adj;$/;"	m	struct:Match	file:
Simple_Adj	MUMmer/src/tigr/mgaps.cc	/^   long int  Simple_Adj;$/;"	m	struct:Match_t	file:
Simple_From	MUMmer/src/tigr/gaps.cc	/^   long int  Simple_From, Wrap_From;$/;"	m	struct:Match	file:
Simple_From	MUMmer/src/tigr/mgaps.cc	/^   long int  Simple_From;$/;"	m	struct:Match_t	file:
Simple_Score	MUMmer/src/tigr/gaps.cc	/^   long int  Simple_Score, Wrap_Score;$/;"	m	struct:Match	file:
Simple_Score	MUMmer/src/tigr/mgaps.cc	/^   long int  Simple_Score;$/;"	m	struct:Match_t	file:
Simpleloc	MUMmer/src/kurtz/streesrc/streetyp.h	/^DECLAREARRAYSTRUCT(Simpleloc);$/;"	v
Simpleloc	MUMmer/src/kurtz/streesrc/streetyp.h	/^} Simpleloc;     \/\/ \\Typedef{Simpleloc}$/;"	t	typeref:struct:__anon10
Sint	MUMmer/src/kurtz/libbasedir/arraydef.h	/^DECLAREARRAYSTRUCT(Sint);$/;"	v
Sint	MUMmer/src/kurtz/libbasedir/types.h	/^typedef signed   int  Sint;          \/\/ \\Typedef{Sint}$/;"	t
Sint	MUMmer/src/kurtz/libbasedir/types.h	/^typedef signed   long  Sint;          \/\/ \\Typedef{Sint}$/;"	t
SpanXwY	MUMmer/mummerplot	/^sub SpanXwY ($$$$$) {$/;"	s
SpanXwY	MUMmer/scripts/mummerplot.pl	/^sub SpanXwY ($$$$$) {$/;"	s
Sprintfreturntype	MUMmer/src/kurtz/libbasedir/types.h	/^typedef int Sprintfreturntype;     \/\/ \\Typedef{Sprintfreturntype} $/;"	t
Start1	MUMmer/src/tigr/gaps.cc	/^   long int  Start1, Start2, Len;$/;"	m	struct:Match	file:
Start1	MUMmer/src/tigr/mgaps.cc	/^   long int  Start1, Start2, Len;$/;"	m	struct:Match_t	file:
Start2	MUMmer/src/tigr/gaps.cc	/^   long int  Start1, Start2, Len;$/;"	m	struct:Match	file:
Start2	MUMmer/src/tigr/mgaps.cc	/^   long int  Start1, Start2, Len;$/;"	m	struct:Match_t	file:
StartR	MUMmer/src/tigr/show-tiling.cc	/^  long int StartR, EndR;                   \/\/ contig -> reference mapping coords$/;"	m	struct:QueryContig	file:
Static_error_check	vector/instrset.h	/^    private: Static_error_check(){};$/;"	f	class:Static_error_check
Static_error_check	vector/instrset.h	/^    public:  Static_error_check(){};$/;"	f	class:Static_error_check
Static_error_check	vector/instrset.h	/^template <> class Static_error_check<false> {    \/\/ generate compile-time error if false$/;"	c
Static_error_check	vector/instrset.h	/^template <bool> class Static_error_check {$/;"	c
Stp	MUMmer/src/tigr/show-coords.cc	/^  float Stp;                              \/\/ precent stop codon (0.0 - 100.0)$/;"	m	struct:AlignStats	file:
Stp	MUMmer/src/tigr/show-tiling.cc	/^  float Stp;                            \/\/ precent stop codon [0.0, 100.0]$/;"	m	struct:AlignStats	file:
Strcmpreturntype	MUMmer/src/kurtz/libbasedir/types.h	/^typedef int Strcmpreturntype;       \/\/ \\Typedef{Strcmpreturntype}$/;"	t
String_Separator	MUMmer/src/tigr/repeat-match.cc	/^int  String_Separator;$/;"	v
Stringtype	MUMmer/src/kurtz/libbasedir/types.h	/^typedef Listtype Stringtype;    \/\/ \\Typedef{Stringtype}$/;"	t
Structure	papers/BBC2013/procs-sample.tex	/^\\subsection{Structure}$/;"	b
Subtree_Size	MUMmer/src/tigr/repeat-match.cc	/^   int  Subtree_Size;$/;"	m	struct:node	file:
Suffixtree	MUMmer/src/kurtz/streesrc/streetyp.h	/^typedef struct Suffixtreetype Suffixtree;$/;"	t	typeref:struct:Suffixtreetype
Suffixtreetype	MUMmer/src/kurtz/streesrc/streetyp.h	/^struct Suffixtreetype$/;"	s
Swap	MUMmer/src/tigr/delta.cc	/^inline void Swap (long & a, long & b)$/;"	f
Swap	MUMmer/src/tigr/show-snps.cc	/^inline void Swap (long & a, long & b)$/;"	f
Synteny	MUMmer/src/tigr/postnuc.cc	/^struct Synteny$/;"	s	file:
Synteny	MUMmer/src/tigr/postpro.cc	/^struct Synteny$/;"	s	file:
Sysconfargtype	MUMmer/src/kurtz/libbasedir/types.h	/^typedef int Sysconfargtype;         \/\/ \\Typedef{Sysconfargtype}$/;"	t
THIRDBIT	MUMmer/src/kurtz/libbasedir/intbits.h	36;"	d
THROWERRORLINE	MUMmer/src/kurtz/libbasedir/errordef.h	46;"	d
THROWERRORLINE	MUMmer/src/kurtz/libbasedir/errordef.h	50;"	d
TIGR::Foundation	MUMmer/scripts/Foundation.pm	/^package TIGR::Foundation;$/;"	p
TIGR_GetOptions	MUMmer/scripts/Foundation.pm	/^   sub TIGR_GetOptions(@) {$/;"	s
TIGR_SRC_DIR	MUMmer/Makefile	/^TIGR_SRC_DIR  := $(TOP_DIR)\/src\/tigr$/;"	m
TOP_DIR	MUMmer/Makefile	/^TOP_DIR     := $(CURDIR)$/;"	m
TO_SEQEND	MUMmer/src/tigr/postnuc.cc	/^bool TO_SEQEND = false;$/;"	v
TO_SEQEND	MUMmer/src/tigr/postpro.cc	/^bool TO_SEQEND = false;$/;"	v
TRANSLATE_MASK	MUMmer/src/tigr/prepro.cc	/^const char TRANSLATE_MASK = 'X';     \/\/ translator masking character$/;"	v
TRUE	MUMmer/src/tigr/tigrinc.hh	18;"	d
TYPES_H	MUMmer/src/kurtz/libbasedir/types.h	12;"	d
Tables	papers/BBC2013/procs-sample.tex	/^\\subsection{Tables}$/;"	b
Tag_From_Fasta_Line	MUMmer/src/tigr/combineMUMs.cc	/^int  Tag_From_Fasta_Line = FALSE;$/;"	v
Tandem_Only	MUMmer/src/tigr/repeat-match.cc	/^static bool  Tandem_Only = false;$/;"	v	file:
Tentative	MUMmer/src/tigr/mgaps.cc	/^   unsigned int  Tentative : 1;$/;"	m	struct:Match_t	file:
Test	presentations/LLEIDA/alg.tex	/^\\section{Test}$/;"	s
The MUM an heuristic approach	papers/BBC2013/mum-multithread.tex	/^\\subsection{The  MUM: an heuristic approach}$/;"	b
The Program and its Options	MUMmer/docs/maxmat3man.tex	/^\\section{The Program and its Options}$/;"	s
ThreeUint	MUMmer/src/kurtz/libbasedir/arraydef.h	/^DECLAREARRAYSTRUCT(ThreeUint);$/;"	v
ThreeUint	MUMmer/src/kurtz/libbasedir/types.h	/^} ThreeUint;               \/\/ \\Typedef{ThreeUint}$/;"	t	typeref:struct:__anon14
TileLevel	MUMmer/src/tigr/show-tiling.cc	/^  int TileLevel;                      \/\/ describes tiling status of query contig$/;"	m	struct:QueryContig	file:
Translate_DNA	MUMmer/src/tigr/translate.cc	/^long int Translate_DNA$/;"	f
True	MUMmer/src/kurtz/libbasedir/types.h	223;"	d
UF	MUMmer/src/tigr/mgaps.cc	/^static int  * UF = NULL;$/;"	v	file:
UNDEFCHAR	MUMmer/src/kurtz/libbasedir/chardef.h	24;"	d
UNDEFFILESEP	MUMmer/src/kurtz/libbasedir/multidef.h	85;"	d
UNDEFINEDREFERENCE	MUMmer/src/kurtz/streesrc/streehuge.h	59;"	d
UNDEFINEDREFERENCE	MUMmer/src/kurtz/streesrc/streelarge.h	79;"	d
UNDEFINEDREFERENCE	MUMmer/src/kurtz/streesrc/streesmall.h	62;"	d
UNDEFNUMOFDBSEQ	MUMmer/src/kurtz/libbasedir/multiseq.c	42;"	d	file:
UNSETIBIT	MUMmer/src/kurtz/libbasedir/intbits.h	95;"	d
UNUSABLE_TILE_LEVEL	MUMmer/src/tigr/show-tiling.cc	/^const int UNUSABLE_TILE_LEVEL  =  -2;$/;"	v
UNUSEDINLEAF	MUMmer/src/kurtz/streesrc/streelarge.h	54;"	d
UNUSED_TILE_LEVEL	MUMmer/src/tigr/show-tiling.cc	/^const int UNUSED_TILE_LEVEL    =   0;$/;"	v
USAGE	MUMmer/dnadiff	/^  USAGE: dnadiff  [options]  <reference>  <query>$/;"	l
USAGE	MUMmer/mapview	/^  USAGE:  mapview  [options]  <coords file>  [UTR coords]  [CDS coords]$/;"	l
USAGE	MUMmer/mapview	/^  USAGE: mapview  [options]  <coords file>  [UTR coords]  [CDS coords]$/;"	l
USAGE	MUMmer/mummerplot	/^  USAGE: mummerplot  [options]  <match file>$/;"	l
USAGE	MUMmer/nucmer	/^  USAGE: nucmer  [options]  <Reference>  <Query>$/;"	l
USAGE	MUMmer/promer	/^  USAGE: promer  [options]  <Reference>  <Query>$/;"	l
USAGE	MUMmer/scripts/dnadiff.pl	/^  USAGE: dnadiff  [options]  <reference>  <query>$/;"	l
USAGE	MUMmer/scripts/mapview.pl	/^  USAGE:  mapview  [options]  <coords file>  [UTR coords]  [CDS coords]$/;"	l
USAGE	MUMmer/scripts/mapview.pl	/^  USAGE: mapview  [options]  <coords file>  [UTR coords]  [CDS coords]$/;"	l
USAGE	MUMmer/scripts/mummerplot.pl	/^  USAGE: mummerplot  [options]  <match file>$/;"	l
USAGE	MUMmer/scripts/nucmer.pl	/^  USAGE: nucmer  [options]  <Reference>  <Query>$/;"	l
USAGE	MUMmer/scripts/promer.pl	/^  USAGE: promer  [options]  <Reference>  <Query>$/;"	l
USAGEOUT	MUMmer/src/kurtz/libbasedir/errordef.h	95;"	d
USED_TILE_LEVEL	MUMmer/src/tigr/show-tiling.cc	/^const int USED_TILE_LEVEL      =   1;$/;"	v
USE_EXTRA_FIELDS	MUMmer/src/tigr/repeat-match.cc	15;"	d	file:
Uchar	MUMmer/src/kurtz/libbasedir/arraydef.h	/^DECLAREARRAYSTRUCT(Uchar);$/;"	v
Uchar	MUMmer/src/kurtz/libbasedir/types.h	/^typedef unsigned char  Uchar;         \/\/ \\Typedef{Uchar}$/;"	t
Uint	MUMmer/src/kurtz/libbasedir/arraydef.h	/^DECLAREARRAYSTRUCT(Uint);$/;"	v
Uint	MUMmer/src/kurtz/libbasedir/types.h	/^typedef unsigned int  Uint;          \/\/ \\Typedef{Uint}$/;"	t
Uint	MUMmer/src/kurtz/libbasedir/types.h	/^typedef unsigned long  Uint;          \/\/ \\Typedef{Uint}$/;"	t
UintConst	MUMmer/src/kurtz/libbasedir/types.h	53;"	d
UintConst	MUMmer/src/kurtz/libbasedir/types.h	60;"	d
Union	MUMmer/src/tigr/mgaps.cc	/^static void  Union$/;"	f	file:
UpdateBest	MUMmer/src/tigr/delta.cc	/^bool UpdateBest$/;"	f
Usage	MUMmer/src/tigr/combineMUMs.cc	/^void  Usage$/;"	f
Usage	MUMmer/src/tigr/mgaps.cc	/^static void  Usage$/;"	f	file:
Usage	MUMmer/src/tigr/repeat-match.cc	/^static void  Usage$/;"	f	file:
Use_Extents	MUMmer/src/tigr/mgaps.cc	/^static int  Use_Extents = FALSE;$/;"	v	file:
UserScoring	MUMmer/src/tigr/combineMUMs.cc	/^int UserScoring = FALSE;$/;"	v
Ushort	MUMmer/src/kurtz/libbasedir/arraydef.h	/^DECLAREARRAYSTRUCT(Ushort);$/;"	v
Ushort	MUMmer/src/kurtz/libbasedir/types.h	/^typedef unsigned short Ushort;        \/\/ \\Typedef{Ushort}$/;"	t
V	qsufsort.c	/^   *V,                          \/* inverse array, ultimately inverse of I.*\/$/;"	v	file:
VALIDINIT	MUMmer/src/kurtz/streesrc/construct.c	28;"	d	file:
VECTOR3D_H	vector/special/vector3d.h	16;"	d
VECTORCLASS_H	vector/vectorclass.h	29;"	d
VECTORF128_H	vector/vectorf128.h	36;"	d
VECTORF256_H	vector/vectorf256.h	39;"	d
VECTORF256_H	vector/vectorf256e.h	28;"	d
VECTORI128_H	vector/vectori128.h	41;"	d
VECTORI256_H	vector/vectori256.h	44;"	d
VECTORI256_H	vector/vectori256e.h	33;"	d
VECTORMATH	vector/special/vectormath.h	31;"	d
VECTORMATH	vector/special/vectormath.h	33;"	d
VECTORMATH_H	vector/special/vectormath.h	25;"	d
VERBOSE	MUMmer/src/tigr/combineMUMs.cc	74;"	d	file:
VERSION	MUMmer/Makefile	/^VERSION := 3.23$/;"	m
VISIBLECHAR	MUMmer/src/kurtz/libbasedir/visible.h	48;"	d
VISIBLE_H	MUMmer/src/kurtz/libbasedir/visible.h	13;"	d
VPATH	MUMmer/scripts/Makefile	/^VPATH := $(BIN_DIR)$/;"	m
VPATH	MUMmer/src/kurtz/mm3src/Makefile	/^VPATH := $(BIN_DIR)$/;"	m
VPATH	MUMmer/src/tigr/Makefile	/^VPATH := $(AUX_BIN_DIR):$(BIN_DIR)$/;"	m
Vec128b	vector/vectori128.h	/^    Vec128b() {$/;"	f	class:Vec128b
Vec128b	vector/vectori128.h	/^    Vec128b(__m128i const & x) {$/;"	f	class:Vec128b
Vec128b	vector/vectori128.h	/^    Vec128b(int i) {$/;"	f	class:Vec128b
Vec128b	vector/vectori128.h	/^class Vec128b {$/;"	c
Vec16c	vector/vectori128.h	/^    Vec16c() {$/;"	f	class:Vec16c
Vec16c	vector/vectori128.h	/^    Vec16c(__m128i const & x) {$/;"	f	class:Vec16c
Vec16c	vector/vectori128.h	/^    Vec16c(int i) {$/;"	f	class:Vec16c
Vec16c	vector/vectori128.h	/^    Vec16c(int8_t i0, int8_t i1, int8_t i2, int8_t i3, int8_t i4, int8_t i5, int8_t i6, int8_t i7,$/;"	f	class:Vec16c
Vec16c	vector/vectori128.h	/^class Vec16c : public Vec128b {$/;"	c
Vec16s	vector/vectori256.h	/^    Vec16s() {$/;"	f	class:Vec16s
Vec16s	vector/vectori256.h	/^    Vec16s(Vec8s const & a0, Vec8s const & a1) {$/;"	f	class:Vec16s
Vec16s	vector/vectori256.h	/^    Vec16s(__m256i const & x) {$/;"	f	class:Vec16s
Vec16s	vector/vectori256.h	/^    Vec16s(int i) {$/;"	f	class:Vec16s
Vec16s	vector/vectori256.h	/^    Vec16s(int16_t i0, int16_t i1, int16_t i2,  int16_t i3,  int16_t i4,  int16_t i5,  int16_t i6,  int16_t i7,$/;"	f	class:Vec16s
Vec16s	vector/vectori256.h	/^class Vec16s : public Vec256b {$/;"	c
Vec16s	vector/vectori256e.h	/^    Vec16s() {$/;"	f	class:Vec16s
Vec16s	vector/vectori256e.h	/^    Vec16s(Vec256ie const & x) {$/;"	f	class:Vec16s
Vec16s	vector/vectori256e.h	/^    Vec16s(Vec8s const & a0, Vec8s const & a1) {$/;"	f	class:Vec16s
Vec16s	vector/vectori256e.h	/^    Vec16s(int i) {$/;"	f	class:Vec16s
Vec16s	vector/vectori256e.h	/^    Vec16s(int16_t i0, int16_t i1, int16_t i2,  int16_t i3,  int16_t i4,  int16_t i5,  int16_t i6,  int16_t i7,$/;"	f	class:Vec16s
Vec16s	vector/vectori256e.h	/^class Vec16s : public Vec256b {$/;"	c
Vec16uc	vector/vectori128.h	/^    Vec16uc() {$/;"	f	class:Vec16uc
Vec16uc	vector/vectori128.h	/^    Vec16uc(__m128i const & x) {$/;"	f	class:Vec16uc
Vec16uc	vector/vectori128.h	/^    Vec16uc(uint32_t i) {$/;"	f	class:Vec16uc
Vec16uc	vector/vectori128.h	/^    Vec16uc(uint8_t i0, uint8_t i1, uint8_t i2, uint8_t i3, uint8_t i4, uint8_t i5, uint8_t i6, uint8_t i7,$/;"	f	class:Vec16uc
Vec16uc	vector/vectori128.h	/^class Vec16uc : public Vec16c {$/;"	c
Vec16us	vector/vectori256.h	/^    Vec16us(){$/;"	f	class:Vec16us
Vec16us	vector/vectori256.h	/^    Vec16us(Vec8us const & a0, Vec8us const & a1) {$/;"	f	class:Vec16us
Vec16us	vector/vectori256.h	/^    Vec16us(__m256i const & x) {$/;"	f	class:Vec16us
Vec16us	vector/vectori256.h	/^    Vec16us(uint16_t i0, uint16_t i1, uint16_t i2,  uint16_t i3,  uint16_t i4,  uint16_t i5,  uint16_t i6,  uint16_t i7,$/;"	f	class:Vec16us
Vec16us	vector/vectori256.h	/^    Vec16us(uint32_t i) {$/;"	f	class:Vec16us
Vec16us	vector/vectori256.h	/^class Vec16us : public Vec16s {$/;"	c
Vec16us	vector/vectori256e.h	/^    Vec16us(){$/;"	f	class:Vec16us
Vec16us	vector/vectori256e.h	/^    Vec16us(Vec256ie const & x) {$/;"	f	class:Vec16us
Vec16us	vector/vectori256e.h	/^    Vec16us(Vec8us const & a0, Vec8us const & a1) {$/;"	f	class:Vec16us
Vec16us	vector/vectori256e.h	/^    Vec16us(uint16_t i0, uint16_t i1, uint16_t i2,  uint16_t i3,  uint16_t i4,  uint16_t i5,  uint16_t i6,  uint16_t i7,$/;"	f	class:Vec16us
Vec16us	vector/vectori256e.h	/^    Vec16us(uint32_t i) {$/;"	f	class:Vec16us
Vec16us	vector/vectori256e.h	/^class Vec16us : public Vec16s {$/;"	c
Vec256b	vector/vectori256.h	/^    Vec256b() {$/;"	f	class:Vec256b
Vec256b	vector/vectori256.h	/^    Vec256b(Vec128b const & a0, Vec128b const & a1) {$/;"	f	class:Vec256b
Vec256b	vector/vectori256.h	/^    Vec256b(__m256i const & x) {$/;"	f	class:Vec256b
Vec256b	vector/vectori256.h	/^    Vec256b(int i) {$/;"	f	class:Vec256b
Vec256b	vector/vectori256.h	/^class Vec256b {$/;"	c
Vec256b	vector/vectori256e.h	/^    Vec256b() {$/;"	f	class:Vec256b
Vec256b	vector/vectori256e.h	/^    Vec256b(Vec128b const & a0, Vec128b const & a1) {$/;"	f	class:Vec256b
Vec256b	vector/vectori256e.h	/^    Vec256b(Vec256ie const & x) {$/;"	f	class:Vec256b
Vec256b	vector/vectori256e.h	/^    Vec256b(int i) {$/;"	f	class:Vec256b
Vec256b	vector/vectori256e.h	/^class Vec256b : public Vec256ie {$/;"	c
Vec256de	vector/vectorf256e.h	/^    Vec256de() {};                     \/\/ default constructor$/;"	f	class:Vec256de
Vec256de	vector/vectorf256e.h	/^    Vec256de(__m128d x0, __m128d x1) { \/\/ constructor to build from two __m128d$/;"	f	class:Vec256de
Vec256de	vector/vectorf256e.h	/^class Vec256de {$/;"	c
Vec256fe	vector/vectorf256e.h	/^    Vec256fe(__m128 x0, __m128 x1) {   \/\/ constructor to build from two __m128$/;"	f	class:Vec256fe
Vec256fe	vector/vectorf256e.h	/^    Vec256fe(void) {};                 \/\/ default constructor$/;"	f	class:Vec256fe
Vec256fe	vector/vectorf256e.h	/^class Vec256fe {$/;"	c
Vec256ie	vector/vectori256e.h	/^    Vec256ie(__m128i x0, __m128i x1) {  \/\/ constructor to build from two __m128i$/;"	f	class:Vec256ie
Vec256ie	vector/vectori256e.h	/^    Vec256ie(void) {};                  \/\/ default constructor$/;"	f	class:Vec256ie
Vec256ie	vector/vectori256e.h	/^class Vec256ie {$/;"	c
Vec2d	vector/vectorf128.h	/^    Vec2d() {$/;"	f	class:Vec2d
Vec2d	vector/vectorf128.h	/^    Vec2d(__m128d const & x) {$/;"	f	class:Vec2d
Vec2d	vector/vectorf128.h	/^    Vec2d(double d) {$/;"	f	class:Vec2d
Vec2d	vector/vectorf128.h	/^    Vec2d(double d0, double d1) {$/;"	f	class:Vec2d
Vec2d	vector/vectorf128.h	/^class Vec2d {$/;"	c
Vec2db	vector/vectorf128.h	/^    Vec2db() {$/;"	f	class:Vec2db
Vec2db	vector/vectorf128.h	/^    Vec2db(Vec2q const & x) {$/;"	f	class:Vec2db
Vec2db	vector/vectorf128.h	/^    Vec2db(__m128d const & x) {$/;"	f	class:Vec2db
Vec2db	vector/vectorf128.h	/^    Vec2db(bool b) {$/;"	f	class:Vec2db
Vec2db	vector/vectorf128.h	/^    Vec2db(bool b0, bool b1) {$/;"	f	class:Vec2db
Vec2db	vector/vectorf128.h	/^class Vec2db {$/;"	c
Vec2q	vector/vectori128.h	/^    Vec2q() {$/;"	f	class:Vec2q
Vec2q	vector/vectori128.h	/^    Vec2q(__m128i const & x) {$/;"	f	class:Vec2q
Vec2q	vector/vectori128.h	/^    Vec2q(int64_t i) {$/;"	f	class:Vec2q
Vec2q	vector/vectori128.h	/^    Vec2q(int64_t i0, int64_t i1) {$/;"	f	class:Vec2q
Vec2q	vector/vectori128.h	/^class Vec2q : public Vec128b {$/;"	c
Vec2uq	vector/vectori128.h	/^    Vec2uq() {$/;"	f	class:Vec2uq
Vec2uq	vector/vectori128.h	/^    Vec2uq(__m128i const & x) {$/;"	f	class:Vec2uq
Vec2uq	vector/vectori128.h	/^    Vec2uq(uint64_t i) {$/;"	f	class:Vec2uq
Vec2uq	vector/vectori128.h	/^    Vec2uq(uint64_t i0, uint64_t i1) {$/;"	f	class:Vec2uq
Vec2uq	vector/vectori128.h	/^class Vec2uq : public Vec2q {$/;"	c
Vec32c	vector/vectori256.h	/^    Vec32c(){$/;"	f	class:Vec32c
Vec32c	vector/vectori256.h	/^    Vec32c(Vec16c const & a0, Vec16c const & a1) {$/;"	f	class:Vec32c
Vec32c	vector/vectori256.h	/^    Vec32c(__m256i const & x) {$/;"	f	class:Vec32c
Vec32c	vector/vectori256.h	/^    Vec32c(int i) {$/;"	f	class:Vec32c
Vec32c	vector/vectori256.h	/^    Vec32c(int8_t i0, int8_t i1, int8_t i2, int8_t i3, int8_t i4, int8_t i5, int8_t i6, int8_t i7,$/;"	f	class:Vec32c
Vec32c	vector/vectori256.h	/^class Vec32c : public Vec256b {$/;"	c
Vec32c	vector/vectori256e.h	/^    Vec32c(){$/;"	f	class:Vec32c
Vec32c	vector/vectori256e.h	/^    Vec32c(Vec16c const & a0, Vec16c const & a1) {$/;"	f	class:Vec32c
Vec32c	vector/vectori256e.h	/^    Vec32c(Vec256ie const & x) {$/;"	f	class:Vec32c
Vec32c	vector/vectori256e.h	/^    Vec32c(int i) {$/;"	f	class:Vec32c
Vec32c	vector/vectori256e.h	/^    Vec32c(int8_t i0, int8_t i1, int8_t i2, int8_t i3, int8_t i4, int8_t i5, int8_t i6, int8_t i7,$/;"	f	class:Vec32c
Vec32c	vector/vectori256e.h	/^class Vec32c : public Vec256b {$/;"	c
Vec32uc	vector/vectori256.h	/^    Vec32uc(){$/;"	f	class:Vec32uc
Vec32uc	vector/vectori256.h	/^    Vec32uc(Vec16uc const & a0, Vec16uc const & a1) {$/;"	f	class:Vec32uc
Vec32uc	vector/vectori256.h	/^    Vec32uc(__m256i const & x) {$/;"	f	class:Vec32uc
Vec32uc	vector/vectori256.h	/^    Vec32uc(uint32_t i) {$/;"	f	class:Vec32uc
Vec32uc	vector/vectori256.h	/^    Vec32uc(uint8_t i0, uint8_t i1, uint8_t i2, uint8_t i3, uint8_t i4, uint8_t i5, uint8_t i6, uint8_t i7,$/;"	f	class:Vec32uc
Vec32uc	vector/vectori256.h	/^class Vec32uc : public Vec32c {$/;"	c
Vec32uc	vector/vectori256e.h	/^    Vec32uc(){$/;"	f	class:Vec32uc
Vec32uc	vector/vectori256e.h	/^    Vec32uc(Vec16uc const & a0, Vec16uc const & a1) {$/;"	f	class:Vec32uc
Vec32uc	vector/vectori256e.h	/^    Vec32uc(Vec256ie const & x) {$/;"	f	class:Vec32uc
Vec32uc	vector/vectori256e.h	/^    Vec32uc(uint32_t i) {$/;"	f	class:Vec32uc
Vec32uc	vector/vectori256e.h	/^    Vec32uc(uint8_t i0, uint8_t i1, uint8_t i2, uint8_t i3, uint8_t i4, uint8_t i5, uint8_t i6, uint8_t i7,$/;"	f	class:Vec32uc
Vec32uc	vector/vectori256e.h	/^class Vec32uc : public Vec32c {$/;"	c
Vec3d	vector/special/vector3d.h	/^    Vec3d() {$/;"	f	class:Vec3d
Vec3d	vector/special/vector3d.h	/^    Vec3d(Vec256de const & x) : Vec4d(x) {}$/;"	f	class:Vec3d
Vec3d	vector/special/vector3d.h	/^    Vec3d(Vec4d const & x) $/;"	f	class:Vec3d
Vec3d	vector/special/vector3d.h	/^    Vec3d(__m256d const & x) : Vec4d(x) {}$/;"	f	class:Vec3d
Vec3d	vector/special/vector3d.h	/^    Vec3d(double x, double y, double z) $/;"	f	class:Vec3d
Vec3d	vector/special/vector3d.h	/^class Vec3d : public Vec4d {$/;"	c
Vec3f	vector/special/vector3d.h	/^    Vec3f() {$/;"	f	class:Vec3f
Vec3f	vector/special/vector3d.h	/^    Vec3f(Vec4f const & x) {$/;"	f	class:Vec3f
Vec3f	vector/special/vector3d.h	/^    Vec3f(__m128 const & x) {$/;"	f	class:Vec3f
Vec3f	vector/special/vector3d.h	/^    Vec3f(float x, float y, float z) {$/;"	f	class:Vec3f
Vec3f	vector/special/vector3d.h	/^class Vec3f : public Vec4f {$/;"	c
Vec4d	vector/vectorf256.h	/^    Vec4d() {$/;"	f	class:Vec4d
Vec4d	vector/vectorf256.h	/^    Vec4d(Vec2d const & a0, Vec2d const & a1) {$/;"	f	class:Vec4d
Vec4d	vector/vectorf256.h	/^    Vec4d(__m256d const & x) {$/;"	f	class:Vec4d
Vec4d	vector/vectorf256.h	/^    Vec4d(double d) {$/;"	f	class:Vec4d
Vec4d	vector/vectorf256.h	/^    Vec4d(double d0, double d1, double d2, double d3) {$/;"	f	class:Vec4d
Vec4d	vector/vectorf256.h	/^class Vec4d {$/;"	c
Vec4d	vector/vectorf256e.h	/^    Vec4d() {$/;"	f	class:Vec4d
Vec4d	vector/vectorf256e.h	/^    Vec4d(Vec256de const & x) {$/;"	f	class:Vec4d
Vec4d	vector/vectorf256e.h	/^    Vec4d(Vec2d const & a0, Vec2d const & a1) {$/;"	f	class:Vec4d
Vec4d	vector/vectorf256e.h	/^    Vec4d(double d) {$/;"	f	class:Vec4d
Vec4d	vector/vectorf256e.h	/^    Vec4d(double d0, double d1, double d2, double d3) {$/;"	f	class:Vec4d
Vec4d	vector/vectorf256e.h	/^class Vec4d : public Vec256de {$/;"	c
Vec4db	vector/vectorf256.h	/^    Vec4db() {$/;"	f	class:Vec4db
Vec4db	vector/vectorf256.h	/^    Vec4db(Vec2db const & a0, Vec2db const & a1) {$/;"	f	class:Vec4db
Vec4db	vector/vectorf256.h	/^    Vec4db(Vec4q const & x) {$/;"	f	class:Vec4db
Vec4db	vector/vectorf256.h	/^    Vec4db(__m256d const & x) {$/;"	f	class:Vec4db
Vec4db	vector/vectorf256.h	/^    Vec4db(bool b) {$/;"	f	class:Vec4db
Vec4db	vector/vectorf256.h	/^    Vec4db(bool b0, bool b1, bool b2, bool b3) {$/;"	f	class:Vec4db
Vec4db	vector/vectorf256.h	/^class Vec4db {$/;"	c
Vec4db	vector/vectorf256e.h	/^    Vec4db() {$/;"	f	class:Vec4db
Vec4db	vector/vectorf256e.h	/^    Vec4db(Vec256de const & x) {$/;"	f	class:Vec4db
Vec4db	vector/vectorf256e.h	/^    Vec4db(Vec2db const & a0, Vec2db const & a1) {$/;"	f	class:Vec4db
Vec4db	vector/vectorf256e.h	/^    Vec4db(Vec4q const & x) {$/;"	f	class:Vec4db
Vec4db	vector/vectorf256e.h	/^    Vec4db(bool b) {$/;"	f	class:Vec4db
Vec4db	vector/vectorf256e.h	/^    Vec4db(bool b0, bool b1, bool b2, bool b3) {$/;"	f	class:Vec4db
Vec4db	vector/vectorf256e.h	/^class Vec4db : public Vec256de {$/;"	c
Vec4f	vector/vectorf128.h	/^    Vec4f() {$/;"	f	class:Vec4f
Vec4f	vector/vectorf128.h	/^    Vec4f(__m128 const & x) {$/;"	f	class:Vec4f
Vec4f	vector/vectorf128.h	/^    Vec4f(float f) {$/;"	f	class:Vec4f
Vec4f	vector/vectorf128.h	/^    Vec4f(float f0, float f1, float f2, float f3) {$/;"	f	class:Vec4f
Vec4f	vector/vectorf128.h	/^class Vec4f {$/;"	c
Vec4fb	vector/vectorf128.h	/^    Vec4fb() {$/;"	f	class:Vec4fb
Vec4fb	vector/vectorf128.h	/^    Vec4fb(Vec4i const & x) {$/;"	f	class:Vec4fb
Vec4fb	vector/vectorf128.h	/^    Vec4fb(__m128 const & x) {$/;"	f	class:Vec4fb
Vec4fb	vector/vectorf128.h	/^    Vec4fb(bool b) {$/;"	f	class:Vec4fb
Vec4fb	vector/vectorf128.h	/^    Vec4fb(bool b0, bool b1, bool b2, bool b3) {$/;"	f	class:Vec4fb
Vec4fb	vector/vectorf128.h	/^class Vec4fb {$/;"	c
Vec4i	vector/vectori128.h	/^    Vec4i() {$/;"	f	class:Vec4i
Vec4i	vector/vectori128.h	/^    Vec4i(__m128i const & x) {$/;"	f	class:Vec4i
Vec4i	vector/vectori128.h	/^    Vec4i(int i) {$/;"	f	class:Vec4i
Vec4i	vector/vectori128.h	/^    Vec4i(int32_t i0, int32_t i1, int32_t i2, int32_t i3) {$/;"	f	class:Vec4i
Vec4i	vector/vectori128.h	/^class Vec4i : public Vec128b {$/;"	c
Vec4q	vector/vectori256.h	/^    Vec4q() {$/;"	f	class:Vec4q
Vec4q	vector/vectori256.h	/^    Vec4q(Vec2q const & a0, Vec2q const & a1) {$/;"	f	class:Vec4q
Vec4q	vector/vectori256.h	/^    Vec4q(__m256i const & x) {$/;"	f	class:Vec4q
Vec4q	vector/vectori256.h	/^    Vec4q(int64_t i) {$/;"	f	class:Vec4q
Vec4q	vector/vectori256.h	/^    Vec4q(int64_t i0, int64_t i1, int64_t i2, int64_t i3) {$/;"	f	class:Vec4q
Vec4q	vector/vectori256.h	/^class Vec4q : public Vec256b {$/;"	c
Vec4q	vector/vectori256e.h	/^    Vec4q() {$/;"	f	class:Vec4q
Vec4q	vector/vectori256e.h	/^    Vec4q(Vec256ie const & x) {$/;"	f	class:Vec4q
Vec4q	vector/vectori256e.h	/^    Vec4q(Vec2q const & a0, Vec2q const & a1) {$/;"	f	class:Vec4q
Vec4q	vector/vectori256e.h	/^    Vec4q(int64_t i) {$/;"	f	class:Vec4q
Vec4q	vector/vectori256e.h	/^    Vec4q(int64_t i0, int64_t i1, int64_t i2, int64_t i3) {$/;"	f	class:Vec4q
Vec4q	vector/vectori256e.h	/^class Vec4q : public Vec256b {$/;"	c
Vec4ui	vector/vectori128.h	/^    Vec4ui() {$/;"	f	class:Vec4ui
Vec4ui	vector/vectori128.h	/^    Vec4ui(__m128i const & x) {$/;"	f	class:Vec4ui
Vec4ui	vector/vectori128.h	/^    Vec4ui(uint32_t i) {$/;"	f	class:Vec4ui
Vec4ui	vector/vectori128.h	/^    Vec4ui(uint32_t i0, uint32_t i1, uint32_t i2, uint32_t i3) {$/;"	f	class:Vec4ui
Vec4ui	vector/vectori128.h	/^class Vec4ui : public Vec4i {$/;"	c
Vec4uq	vector/vectori256.h	/^    Vec4uq() {$/;"	f	class:Vec4uq
Vec4uq	vector/vectori256.h	/^    Vec4uq(Vec2uq const & a0, Vec2uq const & a1) {$/;"	f	class:Vec4uq
Vec4uq	vector/vectori256.h	/^    Vec4uq(__m256i const & x) {$/;"	f	class:Vec4uq
Vec4uq	vector/vectori256.h	/^    Vec4uq(uint64_t i) {$/;"	f	class:Vec4uq
Vec4uq	vector/vectori256.h	/^    Vec4uq(uint64_t i0, uint64_t i1, uint64_t i2, uint64_t i3) {$/;"	f	class:Vec4uq
Vec4uq	vector/vectori256.h	/^class Vec4uq : public Vec4q {$/;"	c
Vec4uq	vector/vectori256e.h	/^    Vec4uq() {$/;"	f	class:Vec4uq
Vec4uq	vector/vectori256e.h	/^    Vec4uq(Vec256ie const & x) {$/;"	f	class:Vec4uq
Vec4uq	vector/vectori256e.h	/^    Vec4uq(Vec2uq const & a0, Vec2uq const & a1) {$/;"	f	class:Vec4uq
Vec4uq	vector/vectori256e.h	/^    Vec4uq(uint64_t i) {$/;"	f	class:Vec4uq
Vec4uq	vector/vectori256e.h	/^    Vec4uq(uint64_t i0, uint64_t i1, uint64_t i2, uint64_t i3) {$/;"	f	class:Vec4uq
Vec4uq	vector/vectori256e.h	/^class Vec4uq : public Vec4q {$/;"	c
Vec8f	vector/vectorf256.h	/^    Vec8f() {$/;"	f	class:Vec8f
Vec8f	vector/vectorf256.h	/^    Vec8f(Vec4f const & a0, Vec4f const & a1) {$/;"	f	class:Vec8f
Vec8f	vector/vectorf256.h	/^    Vec8f(__m256 const & x) {$/;"	f	class:Vec8f
Vec8f	vector/vectorf256.h	/^    Vec8f(float f) {$/;"	f	class:Vec8f
Vec8f	vector/vectorf256.h	/^    Vec8f(float f0, float f1, float f2, float f3, float f4, float f5, float f6, float f7) {$/;"	f	class:Vec8f
Vec8f	vector/vectorf256.h	/^class Vec8f {$/;"	c
Vec8f	vector/vectorf256e.h	/^    Vec8f() {$/;"	f	class:Vec8f
Vec8f	vector/vectorf256e.h	/^    Vec8f(Vec256fe const & x) {$/;"	f	class:Vec8f
Vec8f	vector/vectorf256e.h	/^    Vec8f(Vec4f const & a0, Vec4f const & a1) {$/;"	f	class:Vec8f
Vec8f	vector/vectorf256e.h	/^    Vec8f(float f) {$/;"	f	class:Vec8f
Vec8f	vector/vectorf256e.h	/^    Vec8f(float f0, float f1, float f2, float f3, float f4, float f5, float f6, float f7) {$/;"	f	class:Vec8f
Vec8f	vector/vectorf256e.h	/^class Vec8f : public Vec256fe {$/;"	c
Vec8fb	vector/vectorf256.h	/^    Vec8fb() {$/;"	f	class:Vec8fb
Vec8fb	vector/vectorf256.h	/^    Vec8fb(Vec4fb const & a0, Vec4fb const & a1) {$/;"	f	class:Vec8fb
Vec8fb	vector/vectorf256.h	/^    Vec8fb(Vec8i const & x) {$/;"	f	class:Vec8fb
Vec8fb	vector/vectorf256.h	/^    Vec8fb(__m256 const & x) {$/;"	f	class:Vec8fb
Vec8fb	vector/vectorf256.h	/^    Vec8fb(bool b) {$/;"	f	class:Vec8fb
Vec8fb	vector/vectorf256.h	/^    Vec8fb(bool b0, bool b1, bool b2, bool b3, bool b4, bool b5, bool b6, bool b7) {$/;"	f	class:Vec8fb
Vec8fb	vector/vectorf256.h	/^class Vec8fb {$/;"	c
Vec8fb	vector/vectorf256e.h	/^    Vec8fb() {$/;"	f	class:Vec8fb
Vec8fb	vector/vectorf256e.h	/^    Vec8fb(Vec256fe const & x) {$/;"	f	class:Vec8fb
Vec8fb	vector/vectorf256e.h	/^    Vec8fb(Vec4fb const & a0, Vec4fb const & a1) {$/;"	f	class:Vec8fb
Vec8fb	vector/vectorf256e.h	/^    Vec8fb(Vec8i const & x) {$/;"	f	class:Vec8fb
Vec8fb	vector/vectorf256e.h	/^    Vec8fb(bool b) {$/;"	f	class:Vec8fb
Vec8fb	vector/vectorf256e.h	/^class Vec8fb : public Vec256fe {$/;"	c
Vec8i	vector/vectori256.h	/^    Vec8i() {$/;"	f	class:Vec8i
Vec8i	vector/vectori256.h	/^    Vec8i(Vec4i const & a0, Vec4i const & a1) {$/;"	f	class:Vec8i
Vec8i	vector/vectori256.h	/^    Vec8i(__m256i const & x) {$/;"	f	class:Vec8i
Vec8i	vector/vectori256.h	/^    Vec8i(int i) {$/;"	f	class:Vec8i
Vec8i	vector/vectori256.h	/^    Vec8i(int32_t i0, int32_t i1, int32_t i2, int32_t i3, int32_t i4, int32_t i5, int32_t i6, int32_t i7) {$/;"	f	class:Vec8i
Vec8i	vector/vectori256.h	/^class Vec8i : public Vec256b {$/;"	c
Vec8i	vector/vectori256e.h	/^    Vec8i() {$/;"	f	class:Vec8i
Vec8i	vector/vectori256e.h	/^    Vec8i(Vec256ie const & x) {$/;"	f	class:Vec8i
Vec8i	vector/vectori256e.h	/^    Vec8i(Vec4i const & a0, Vec4i const & a1) {$/;"	f	class:Vec8i
Vec8i	vector/vectori256e.h	/^    Vec8i(int i) {$/;"	f	class:Vec8i
Vec8i	vector/vectori256e.h	/^    Vec8i(int32_t i0, int32_t i1, int32_t i2, int32_t i3, int32_t i4, int32_t i5, int32_t i6, int32_t i7) {$/;"	f	class:Vec8i
Vec8i	vector/vectori256e.h	/^class Vec8i : public Vec256b {$/;"	c
Vec8s	vector/vectori128.h	/^    Vec8s() {$/;"	f	class:Vec8s
Vec8s	vector/vectori128.h	/^    Vec8s(__m128i const & x) {$/;"	f	class:Vec8s
Vec8s	vector/vectori128.h	/^    Vec8s(int i) {$/;"	f	class:Vec8s
Vec8s	vector/vectori128.h	/^    Vec8s(int16_t i0, int16_t i1, int16_t i2, int16_t i3, int16_t i4, int16_t i5, int16_t i6, int16_t i7) {$/;"	f	class:Vec8s
Vec8s	vector/vectori128.h	/^class Vec8s : public Vec128b {$/;"	c
Vec8ui	vector/vectori256.h	/^    Vec8ui() {$/;"	f	class:Vec8ui
Vec8ui	vector/vectori256.h	/^    Vec8ui(Vec4ui const & a0, Vec4ui const & a1) {$/;"	f	class:Vec8ui
Vec8ui	vector/vectori256.h	/^    Vec8ui(__m256i const & x) {$/;"	f	class:Vec8ui
Vec8ui	vector/vectori256.h	/^    Vec8ui(uint32_t i) {$/;"	f	class:Vec8ui
Vec8ui	vector/vectori256.h	/^    Vec8ui(uint32_t i0, uint32_t i1, uint32_t i2, uint32_t i3, uint32_t i4, uint32_t i5, uint32_t i6, uint32_t i7) {$/;"	f	class:Vec8ui
Vec8ui	vector/vectori256.h	/^class Vec8ui : public Vec8i {$/;"	c
Vec8ui	vector/vectori256e.h	/^    Vec8ui() {$/;"	f	class:Vec8ui
Vec8ui	vector/vectori256e.h	/^    Vec8ui(Vec256ie const & x) {$/;"	f	class:Vec8ui
Vec8ui	vector/vectori256e.h	/^    Vec8ui(Vec4ui const & a0, Vec4ui const & a1) {$/;"	f	class:Vec8ui
Vec8ui	vector/vectori256e.h	/^    Vec8ui(uint32_t i) {$/;"	f	class:Vec8ui
Vec8ui	vector/vectori256e.h	/^    Vec8ui(uint32_t i0, uint32_t i1, uint32_t i2, uint32_t i3, uint32_t i4, uint32_t i5, uint32_t i6, uint32_t i7) {$/;"	f	class:Vec8ui
Vec8ui	vector/vectori256e.h	/^class Vec8ui : public Vec8i {$/;"	c
Vec8us	vector/vectori128.h	/^    Vec8us() {$/;"	f	class:Vec8us
Vec8us	vector/vectori128.h	/^    Vec8us(__m128i const & x) {$/;"	f	class:Vec8us
Vec8us	vector/vectori128.h	/^    Vec8us(uint16_t i0, uint16_t i1, uint16_t i2, uint16_t i3, uint16_t i4, uint16_t i5, uint16_t i6, uint16_t i7) {$/;"	f	class:Vec8us
Vec8us	vector/vectori128.h	/^    Vec8us(uint32_t i) {$/;"	f	class:Vec8us
Vec8us	vector/vectori128.h	/^class Vec8us : public Vec8s {$/;"	c
Verbose	MUMmer/src/tigr/combineMUMs.cc	/^int  Verbose = 0;$/;"	v
Verbose	MUMmer/src/tigr/repeat-match.cc	/^int  Verbose = 0;$/;"	v
Verify_Match	MUMmer/src/tigr/repeat-match.cc	/^void  Verify_Match$/;"	f
WIDTH	MUMmer/src/tigr/annotate.cc	21;"	d	file:
WILDCARD	MUMmer/src/kurtz/libbasedir/chardef.h	23;"	d
Wrap_Adj	MUMmer/src/tigr/gaps.cc	/^   long int  Simple_Adj, Wrap_Adj;$/;"	m	struct:Match	file:
Wrap_From	MUMmer/src/tigr/gaps.cc	/^   long int  Simple_From, Wrap_From;$/;"	m	struct:Match	file:
Wrap_Here	MUMmer/src/tigr/gaps.cc	/^   int  Wrap_Here : 1;$/;"	m	struct:Match	file:
Wrap_Score	MUMmer/src/tigr/gaps.cc	/^   long int  Simple_Score, Wrap_Score;$/;"	m	struct:Match	file:
WriteGP	MUMmer/mummerplot	/^sub WriteGP ($$)$/;"	s
WriteGP	MUMmer/scripts/mummerplot.pl	/^sub WriteGP ($$)$/;"	s
XOP_MUL_BUG	vector/vectori128.h	4859;"	d
_4column	mummer.cpp	/^bool rev_comp = false, _4column = false, nucleotides_only = false;$/;"	v
_4column	sparseSA.hpp	/^  bool _4column; \/\/ Use 4 column output format.$/;"	m	struct:sparseSA
_INTPTR_T_DEFINED	vector/instrset.h	114;"	d
__DELTA_HH	MUMmer/src/tigr/delta.hh	12;"	d
__FASTA_HPP__	fasta.hpp	2;"	d
__SW_ALIGNSCORE_HH	MUMmer/src/tigr/sw_alignscore.hh	12;"	d
__SW_ALIGN_HH	MUMmer/src/tigr/sw_align.hh	14;"	d
__TIGRINC_HH	MUMmer/src/tigr/tigrinc.hh	2;"	d
__TRANSLATE_HH	MUMmer/src/tigr/translate.hh	4;"	d
__sparseSA_hpp__	sparseSA.hpp	2;"	d
__x86_64__	vector/instrset.h	23;"	d
_alignEngine	MUMmer/src/tigr/sw_align.cc	/^bool _alignEngine$/;"	f
_banding	MUMmer/src/tigr/sw_align.cc	/^int _banding = DEFAULT_BANDING;$/;"	v
_break_len	MUMmer/src/tigr/sw_align.cc	/^int _break_len = DEFAULT_BREAK_LEN;$/;"	v
_matrix_type	MUMmer/src/tigr/sw_align.cc	/^int _matrix_type = NUCLEOTIDE;$/;"	v
a	MUMmer/src/tigr/delta.cc	/^  DeltaEdgelet_t * a;$/;"	m	struct:LIS_t	file:
abs	vector/special/complexvec.h	/^static inline Complex4d abs(Complex4d const & a) {$/;"	f
abs	vector/special/complexvec.h	/^static inline Complex4f abs(Complex4f const & a) {$/;"	f
abs	vector/special/complexvec.h	/^static inline Complex8f abs(Complex8f const & a) {$/;"	f
abs	vector/special/complexvec.h	/^static inline double abs(Complex2d const & a) {$/;"	f
abs	vector/special/complexvec.h	/^static inline float abs(Complex2f const & a) {$/;"	f
abs	vector/special/quaternion.h	/^static inline Quaternion4d abs(Quaternion4d const & a) {$/;"	f
abs	vector/special/quaternion.h	/^static inline Quaternion4f abs(Quaternion4f const & a) {$/;"	f
abs	vector/vectorf128.h	/^static inline Vec2d abs(Vec2d const & a) {$/;"	f
abs	vector/vectorf128.h	/^static inline Vec4f abs(Vec4f const & a) {$/;"	f
abs	vector/vectorf256.h	/^static inline Vec4d abs(Vec4d const & a) {$/;"	f
abs	vector/vectorf256.h	/^static inline Vec8f abs(Vec8f const & a) {$/;"	f
abs	vector/vectorf256e.h	/^static inline Vec4d abs(Vec4d const & a) {$/;"	f
abs	vector/vectorf256e.h	/^static inline Vec8f abs(Vec8f const & a) {$/;"	f
abs	vector/vectori128.h	/^static inline Vec16c abs(Vec16c const & a) {$/;"	f
abs	vector/vectori128.h	/^static inline Vec2q abs(Vec2q const & a) {$/;"	f
abs	vector/vectori128.h	/^static inline Vec4i abs(Vec4i const & a) {$/;"	f
abs	vector/vectori128.h	/^static inline Vec8s abs(Vec8s const & a) {$/;"	f
abs	vector/vectori256.h	/^static inline Vec16s abs(Vec16s const & a) {$/;"	f
abs	vector/vectori256.h	/^static inline Vec32c abs(Vec32c const & a) {$/;"	f
abs	vector/vectori256.h	/^static inline Vec4q abs(Vec4q const & a) {$/;"	f
abs	vector/vectori256.h	/^static inline Vec8i abs(Vec8i const & a) {$/;"	f
abs	vector/vectori256e.h	/^static inline Vec16s abs(Vec16s const & a) {$/;"	f
abs	vector/vectori256e.h	/^static inline Vec32c abs(Vec32c const & a) {$/;"	f
abs	vector/vectori256e.h	/^static inline Vec4q abs(Vec4q const & a) {$/;"	f
abs	vector/vectori256e.h	/^static inline Vec8i abs(Vec8i const & a) {$/;"	f
abs_saturated	vector/vectori128.h	/^static inline Vec16c abs_saturated(Vec16c const & a) {$/;"	f
abs_saturated	vector/vectori128.h	/^static inline Vec2q abs_saturated(Vec2q const & a) {$/;"	f
abs_saturated	vector/vectori128.h	/^static inline Vec4i abs_saturated(Vec4i const & a) {$/;"	f
abs_saturated	vector/vectori128.h	/^static inline Vec8s abs_saturated(Vec8s const & a) {$/;"	f
abs_saturated	vector/vectori256.h	/^static inline Vec16s abs_saturated(Vec16s const & a) {$/;"	f
abs_saturated	vector/vectori256.h	/^static inline Vec32c abs_saturated(Vec32c const & a) {$/;"	f
abs_saturated	vector/vectori256.h	/^static inline Vec4q abs_saturated(Vec4q const & a) {$/;"	f
abs_saturated	vector/vectori256.h	/^static inline Vec8i abs_saturated(Vec8i const & a) {$/;"	f
abs_saturated	vector/vectori256e.h	/^static inline Vec16s abs_saturated(Vec16s const & a) {$/;"	f
abs_saturated	vector/vectori256e.h	/^static inline Vec32c abs_saturated(Vec32c const & a) {$/;"	f
abs_saturated	vector/vectori256e.h	/^static inline Vec4q abs_saturated(Vec4q const & a) {$/;"	f
abs_saturated	vector/vectori256e.h	/^static inline Vec8i abs_saturated(Vec8i const & a) {$/;"	f
access	sparseSA.hpp	/^  long access=0;$/;"	m	struct:vec_uchar
acknowledgements	MUMmer/docs/web/manual/index.html	/^<h2><a name="acknowledgements"><\/a>6. Acknowledgements<\/h2>$/;"	a
acos	vector/special/vectormath.h	/^static inline Vec2d acos (Vec2d const & x) {   \/\/ inverse cosine$/;"	f
acos	vector/special/vectormath.h	/^static inline Vec2d acos (Vec2d const & x) {$/;"	f
acos	vector/special/vectormath.h	/^static inline Vec4d acos (Vec4d const & x) {   \/\/ inverse cosine$/;"	f
acos	vector/special/vectormath.h	/^static inline Vec4f acos (Vec4f const & x) {   \/\/ inverse cosine$/;"	f
acos	vector/special/vectormath.h	/^static inline Vec4f acos(Vec4f const & x) {$/;"	f
acos	vector/special/vectormath.h	/^static inline Vec8f acos (Vec8f const & x) {   \/\/ inverse cosine$/;"	f
acosh	vector/special/vectormath.h	/^static inline Vec2d acosh (Vec2d const & x) {   \/\/ inverse hyperbolic cosine$/;"	f
acosh	vector/special/vectormath.h	/^static inline Vec4d acosh (Vec4d const & x) {   \/\/ inverse hyperbolic cosine$/;"	f
acosh	vector/special/vectormath.h	/^static inline Vec4f acosh (Vec4f const & x) {   \/\/ inverse hyperbolic cosine$/;"	f
acosh	vector/special/vectormath.h	/^static inline Vec8f acosh (Vec8f const & x) {   \/\/ inverse hyperbolic cosine$/;"	f
activeblocks	MUMmer/src/kurtz/libbasedir/space.c	/^void activeblocks(void)$/;"	f
addDependInfo	MUMmer/scripts/Foundation.pm	/^   sub addDependInfo(@) {$/;"	s
addNewAlignment	MUMmer/src/tigr/postnuc.cc	/^void addNewAlignment$/;"	f
addNewAlignment	MUMmer/src/tigr/postpro.cc	/^void addNewAlignment$/;"	f
add_saturated	vector/vectori128.h	/^static inline Vec16c add_saturated(Vec16c const & a, Vec16c const & b) {$/;"	f
add_saturated	vector/vectori128.h	/^static inline Vec16uc add_saturated(Vec16uc const & a, Vec16uc const & b) {$/;"	f
add_saturated	vector/vectori128.h	/^static inline Vec4i add_saturated(Vec4i const & a, Vec4i const & b) {$/;"	f
add_saturated	vector/vectori128.h	/^static inline Vec4ui add_saturated(Vec4ui const & a, Vec4ui const & b) {$/;"	f
add_saturated	vector/vectori128.h	/^static inline Vec8s add_saturated(Vec8s const & a, Vec8s const & b) {$/;"	f
add_saturated	vector/vectori128.h	/^static inline Vec8us add_saturated(Vec8us const & a, Vec8us const & b) {$/;"	f
add_saturated	vector/vectori256.h	/^static inline Vec16s add_saturated(Vec16s const & a, Vec16s const & b) {$/;"	f
add_saturated	vector/vectori256.h	/^static inline Vec16us add_saturated(Vec16us const & a, Vec16us const & b) {$/;"	f
add_saturated	vector/vectori256.h	/^static inline Vec32c add_saturated(Vec32c const & a, Vec32c const & b) {$/;"	f
add_saturated	vector/vectori256.h	/^static inline Vec32uc add_saturated(Vec32uc const & a, Vec32uc const & b) {$/;"	f
add_saturated	vector/vectori256.h	/^static inline Vec8i add_saturated(Vec8i const & a, Vec8i const & b) {$/;"	f
add_saturated	vector/vectori256.h	/^static inline Vec8ui add_saturated(Vec8ui const & a, Vec8ui const & b) {$/;"	f
add_saturated	vector/vectori256e.h	/^static inline Vec16s add_saturated(Vec16s const & a, Vec16s const & b) {$/;"	f
add_saturated	vector/vectori256e.h	/^static inline Vec16us add_saturated(Vec16us const & a, Vec16us const & b) {$/;"	f
add_saturated	vector/vectori256e.h	/^static inline Vec32c add_saturated(Vec32c const & a, Vec32c const & b) {$/;"	f
add_saturated	vector/vectori256e.h	/^static inline Vec32uc add_saturated(Vec32uc const & a, Vec32uc const & b) {$/;"	f
add_saturated	vector/vectori256e.h	/^static inline Vec8i add_saturated(Vec8i const & a, Vec8i const & b) {$/;"	f
add_saturated	vector/vectori256e.h	/^static inline Vec8ui add_saturated(Vec8ui const & a, Vec8ui const & b) {$/;"	f
addleafcountsstree	MUMmer/src/kurtz/streesrc/addleafcount.c	/^Sint addleafcountsstree(Suffixtree *stree)$/;"	f
addleafcountsstree	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^void addleafcountsstree(Suffixtree *stree)$/;"	f
addoption	MUMmer/src/kurtz/libbasedir/procopt.c	/^Sint addoption(OptionDescription *options,Uint numofoptions,$/;"	f
address	MUMmer/src/kurtz/streesrc/streetyp.h	/^  Uint *address;$/;"	m	struct:__anon7
addspace	MUMmer/src/kurtz/libbasedir/space.c	/^static void addspace(Uint space)$/;"	f	file:
alignSearch	MUMmer/src/tigr/sw_align.hh	/^inline bool alignSearch$/;"	f
alignTarget	MUMmer/src/tigr/sw_align.hh	/^inline bool alignTarget$/;"	f
aligningdraft	MUMmer/docs/web/manual/index.html	/^<h3><a name="aligningdraft"><\/a>4.2. Aligning two draft sequences<\/h3>$/;"	a
aligningfinished	MUMmer/docs/web/manual/index.html	/^<h3><a name="aligningfinished"><\/a>4.1. Aligning two finished sequences<\/h3>$/;"	a
alignment	MUMmer/docs/web/manual/index.html	/^<h3><a name="alignment"><\/a>5.3. Alignment generators<\/h3>$/;"	a
aligns	MUMmer/docs/web/manual/index.html	/^<h4><a name="aligns"><\/a>5.4.4. show-aligns<\/h4>$/;"	a
aligns	MUMmer/src/tigr/delta.hh	/^  std::vector<DeltaAlignment_t> aligns; \/\/!< alignments between the two seqs$/;"	m	struct:DeltaRecord_t
allocandusespaceviaptr	MUMmer/src/kurtz/libbasedir/space.c	/^\/*@notnull@*\/ void *allocandusespaceviaptr(char *file,Uint line, $/;"	f
allocatedStrings	MUMmer/src/kurtz/libbasedir/arraydef.h	/^  Uint stringbufferlength, nextfreeStrings, allocatedStrings;$/;"	m	struct:__anon20
alphabet	MUMmer/src/kurtz/streesrc/streetyp.h	/^  Uchar *alphabet;$/;"	m	struct:Suffixtreetype
alphasize	MUMmer/src/kurtz/streesrc/streetyp.h	/^       alphasize,             \/\/ the number of different characters in t$/;"	m	struct:Suffixtreetype
andnot	vector/vectorf128.h	/^static inline Vec2db andnot(Vec2db const & a, Vec2db const & b) {$/;"	f
andnot	vector/vectorf128.h	/^static inline Vec4fb andnot(Vec4fb const & a, Vec4fb const & b) {$/;"	f
andnot	vector/vectorf256.h	/^static inline Vec4db andnot(Vec4db const & a, Vec4db const & b) {$/;"	f
andnot	vector/vectorf256.h	/^static inline Vec8fb andnot(Vec8fb const & a, Vec8fb const & b) {$/;"	f
andnot	vector/vectorf256e.h	/^static inline Vec4db andnot(Vec4db const & a, Vec4db const & b) {$/;"	f
andnot	vector/vectorf256e.h	/^static inline Vec8fb andnot(Vec8fb const & a, Vec8fb const & b) {$/;"	f
andnot	vector/vectori128.h	/^static inline Vec128b andnot (Vec128b const & a, Vec128b const & b) {$/;"	f
andnot	vector/vectori256.h	/^static inline Vec256b andnot (Vec256b const & a, Vec256b const & b) {$/;"	f
andnot	vector/vectori256e.h	/^static inline Vec256b andnot (Vec256b const & a, Vec256b const & b) {$/;"	f
annot	MUMmer/src/tigr/show-coords.cc	/^  char annot [12];                        \/\/ annotation string$/;"	m	struct:AlignStats	file:
annotateOverlaps	MUMmer/src/tigr/show-coords.cc	/^void annotateOverlaps$/;"	f
approx_recipr	vector/vectorf128.h	/^static inline Vec4f approx_recipr(Vec4f const & a) {$/;"	f
approx_recipr	vector/vectorf256.h	/^static inline Vec8f approx_recipr(Vec8f const & a) {$/;"	f
approx_recipr	vector/vectorf256e.h	/^static inline Vec8f approx_recipr(Vec8f const & a) {$/;"	f
approx_rsqrt	vector/vectorf128.h	/^static inline Vec4f approx_rsqrt(Vec4f const & a) {$/;"	f
approx_rsqrt	vector/vectorf256.h	/^static inline Vec8f approx_rsqrt(Vec8f const & a) {$/;"	f
approx_rsqrt	vector/vectorf256e.h	/^static inline Vec8f approx_rsqrt(Vec8f const & a) {$/;"	f
artificial	MUMmer/src/kurtz/streesrc/streetyp.h	/^       artificial,$/;"	m	struct:Suffixtreetype
ascii2bin	vector/special/decimal.h	/^static Vec4i ascii2bin(Vec32c const & string) {$/;"	f
asi	MUMmer/src/tigr/show-coords.cc	/^  vector<AlignStats>::iterator asi;$/;"	m	struct:LASstats	file:
asin	vector/special/vectormath.h	/^static inline Vec2d asin (Vec2d const & x) {   \/\/ inverse sine$/;"	f
asin	vector/special/vectormath.h	/^static inline Vec2d asin (Vec2d const & x) {$/;"	f
asin	vector/special/vectormath.h	/^static inline Vec4d asin (Vec4d const & x) {   \/\/ inverse sine$/;"	f
asin	vector/special/vectormath.h	/^static inline Vec4f asin (Vec4f const & x) {   \/\/ inverse sine$/;"	f
asin	vector/special/vectormath.h	/^static inline Vec4f asin(Vec4f const & x) {$/;"	f
asin	vector/special/vectormath.h	/^static inline Vec8f asin (Vec8f const & x) {   \/\/ inverse sine$/;"	f
asinh	vector/special/vectormath.h	/^static inline Vec2d asinh (Vec2d const & x) {   \/\/ inverse hyperbolic sine$/;"	f
asinh	vector/special/vectormath.h	/^static inline Vec4d asinh (Vec4d const & x) {   \/\/ inverse hyperbolic sine$/;"	f
asinh	vector/special/vectormath.h	/^static inline Vec4f asinh (Vec4f const & x) {   \/\/ inverse hyperbolic sine$/;"	f
asinh	vector/special/vectormath.h	/^static inline Vec8f asinh (Vec8f const & x) {   \/\/ inverse hyperbolic sine$/;"	f
atan	vector/special/vectormath.h	/^static inline Vec2d atan (Vec2d const & a, Vec2d const & b) {   \/\/ inverse tangent of a\/b$/;"	f
atan	vector/special/vectormath.h	/^static inline Vec2d atan (Vec2d const & x) {   \/\/ inverse tangent$/;"	f
atan	vector/special/vectormath.h	/^static inline Vec2d atan (Vec2d const & x) {$/;"	f
atan	vector/special/vectormath.h	/^static inline Vec4d atan (Vec4d const & a, Vec4d const & b) {   \/\/ inverse tangent of a\/b$/;"	f
atan	vector/special/vectormath.h	/^static inline Vec4d atan (Vec4d const & x) {   \/\/ inverse tangent$/;"	f
atan	vector/special/vectormath.h	/^static inline Vec4f atan (Vec4f const & a, Vec4f const & b) {   \/\/ inverse tangent of a\/b$/;"	f
atan	vector/special/vectormath.h	/^static inline Vec4f atan (Vec4f const & x) {   \/\/ inverse tangent$/;"	f
atan	vector/special/vectormath.h	/^static inline Vec4f atan(Vec4f const & x) {$/;"	f
atan	vector/special/vectormath.h	/^static inline Vec8f atan (Vec8f const & a, Vec8f const & b) {   \/\/ inverse tangent of a\/b$/;"	f
atan	vector/special/vectormath.h	/^static inline Vec8f atan (Vec8f const & x) {   \/\/ inverse tangent$/;"	f
atanh	vector/special/vectormath.h	/^static inline Vec2d atanh (Vec2d const & x) {   \/\/ inverse hyperbolic tangent$/;"	f
atanh	vector/special/vectormath.h	/^static inline Vec4d atanh (Vec4d const & x) {   \/\/ inverse hyperbolic tangent$/;"	f
atanh	vector/special/vectormath.h	/^static inline Vec4f atanh (Vec4f const & x) {   \/\/ inverse hyperbolic tangent$/;"	f
atanh	vector/special/vectormath.h	/^static inline Vec8f atanh (Vec8f const & x) {   \/\/ inverse hyperbolic tangent$/;"	f
automatic	mummer.cpp	/^bool automatic = true;$/;"	v
automaticSkip	mummer.cpp	/^bool automaticSkip = true;$/;"	v
bail	MUMmer/scripts/Foundation.pm	/^   sub bail($;$) {$/;"	s
base	genDNA.py	/^    base = randint(1,4)$/;"	v
bin2ascii	vector/special/decimal.h	/^static int bin2ascii (Vec16c const & a, char * string, int fieldlen = 2, int numdat = 16, bool signd = true, char ovfl = '*', char separator = ',', bool term = true) {$/;"	f
bin2ascii	vector/special/decimal.h	/^static int bin2ascii (Vec16s const & a, char * string, int fieldlen = 4, int numdat = 16, bool signd = true, char ovfl = '*', char separator = ',', bool term = true) {$/;"	f
bin2ascii	vector/special/decimal.h	/^static int bin2ascii (Vec32c const & a, char * string, int fieldlen = 2, int numdat = 32, bool signd = true, char ovfl = '*', char separator = ',', bool term = true) {$/;"	f
bin2ascii	vector/special/decimal.h	/^static int bin2ascii (Vec4i const & a, char * string, int fieldlen = 8, int numdat = 4, bool signd = true, char ovfl = '*', char separator = ',', bool term = true) {$/;"	f
bin2ascii	vector/special/decimal.h	/^static int bin2ascii (Vec8i const & a, char * string, int fieldlen = 8, int numdat = 8, bool signd = true, char ovfl = '*', char separator = ',', bool term = true) {$/;"	f
bin2ascii	vector/special/decimal.h	/^static int bin2ascii (Vec8s const & a, char * string, int fieldlen = 4, int numdat = 8, bool signd = true, char ovfl = '*', char separator = ',', bool term = true) {$/;"	f
bin2bcd	vector/special/decimal.h	/^static inline Vec16uc bin2bcd (Vec16uc const & a) {$/;"	f
bin2bcd	vector/special/decimal.h	/^static inline Vec16us bin2bcd (Vec16us const & a) {$/;"	f
bin2bcd	vector/special/decimal.h	/^static inline Vec2uq bin2bcd (Vec2uq const & a) {$/;"	f
bin2bcd	vector/special/decimal.h	/^static inline Vec32uc bin2bcd (Vec32uc const & a) {$/;"	f
bin2bcd	vector/special/decimal.h	/^static inline Vec4ui bin2bcd (Vec4ui const & a) {$/;"	f
bin2bcd	vector/special/decimal.h	/^static inline Vec4uq bin2bcd (Vec4uq const & a) {$/;"	f
bin2bcd	vector/special/decimal.h	/^static inline Vec8ui bin2bcd (Vec8ui const & a) {$/;"	f
bin2bcd	vector/special/decimal.h	/^static inline Vec8us bin2bcd (Vec8us const & a) {$/;"	f
bin2hex_ascii	vector/special/decimal.h	/^static int bin2hex_ascii (Vec16c const & a, char * string, int numdat = 16, char separator = ',', bool term = true) {$/;"	f
bin2hex_ascii	vector/special/decimal.h	/^static int bin2hex_ascii (Vec16s const & a, char * string, int numdat = 16, char separator = ',', bool term = true) {$/;"	f
bin2hex_ascii	vector/special/decimal.h	/^static int bin2hex_ascii (Vec2q const & a, char * string, int numdat = 2, char separator = ',', bool term = true) {$/;"	f
bin2hex_ascii	vector/special/decimal.h	/^static int bin2hex_ascii (Vec32c const & a, char * string, int numdat = 32, char separator = ',', bool term = true) {$/;"	f
bin2hex_ascii	vector/special/decimal.h	/^static int bin2hex_ascii (Vec4i const & a, char * string, int numdat = 4, char separator = ',', bool term = true) {$/;"	f
bin2hex_ascii	vector/special/decimal.h	/^static int bin2hex_ascii (Vec4q const & a, char * string, int numdat = 4, char separator = ',', bool term = true) {$/;"	f
bin2hex_ascii	vector/special/decimal.h	/^static int bin2hex_ascii (Vec8i const & a, char * string, int numdat = 8, char separator = ',', bool term = true) {$/;"	f
bin2hex_ascii	vector/special/decimal.h	/^static int bin2hex_ascii (Vec8s const & a, char * string, int numdat = 8, char separator = ',', bool term = true) {$/;"	f
bit_scan_reverse	vector/vectori128.h	/^static inline uint32_t bit_scan_reverse (uint32_t a) {	$/;"	f
bit_scan_reverse_const	vector/vectori128.h	4656;"	d
blend16c	vector/vectori128.h	/^static inline Vec16c blend16c(Vec16c const & a, Vec16c const & b) {$/;"	f
blend16s	vector/vectori256.h	/^static inline Vec16s blend16s(Vec16s const & a, Vec16s const & b) {  $/;"	f
blend16s	vector/vectori256e.h	/^static inline Vec16s blend16s(Vec16s const & a, Vec16s const & b) {$/;"	f
blend16uc	vector/vectori128.h	/^static inline Vec16uc blend16uc(Vec16uc const & a, Vec16uc const & b) {$/;"	f
blend16us	vector/vectori256.h	/^static inline Vec16us blend16us(Vec16us const & a, Vec16us const & b) {$/;"	f
blend16us	vector/vectori256e.h	/^static inline Vec16us blend16us(Vec16us const & a, Vec16us const & b) {$/;"	f
blend2d	vector/vectorf128.h	/^static inline Vec2d blend2d(Vec2d const & a, Vec2d const & b) {$/;"	f
blend2q	vector/vectori128.h	/^static inline Vec2q blend2q(Vec2q const & a, Vec2q const & b) {$/;"	f
blend2uq	vector/vectori128.h	/^static inline Vec2uq blend2uq(Vec2uq const & a, Vec2uq const & b) {$/;"	f
blend32c	vector/vectori256.h	/^static inline Vec32c blend32c(Vec32c const & a, Vec32c const & b) {  $/;"	f
blend32c	vector/vectori256e.h	/^static inline Vec32c blend32c(Vec32c const & a, Vec32c const & b) {  $/;"	f
blend32uc	vector/vectori256.h	/^    static inline Vec32uc blend32uc(Vec32uc const & a, Vec32uc const & b) {$/;"	f
blend32uc	vector/vectori256e.h	/^    static inline Vec32uc blend32uc(Vec32uc const & a, Vec32uc const & b) {$/;"	f
blend4d	vector/vectorf256.h	/^static inline Vec4d blend4d(Vec4d const & a, Vec4d const & b) {$/;"	f
blend4d	vector/vectorf256e.h	/^static inline Vec4d blend4d(Vec4d const & a, Vec4d const & b) {$/;"	f
blend4f	vector/vectorf128.h	/^static inline Vec4f blend4f(Vec4f const & a, Vec4f const & b) {$/;"	f
blend4i	vector/vectori128.h	/^static inline Vec4i blend4i(Vec4i const & a, Vec4i const & b) {$/;"	f
blend4q	vector/vectori256.h	/^static inline Vec4q blend4q(Vec4q const & a, Vec4q const & b) {  $/;"	f
blend4q	vector/vectori256e.h	/^static inline Vec4q blend4q(Vec4q const & a, Vec4q const & b) {$/;"	f
blend4ui	vector/vectori128.h	/^static inline Vec4ui blend4ui(Vec4ui const & a, Vec4ui const & b) {$/;"	f
blend4uq	vector/vectori256.h	/^static inline Vec4uq blend4uq(Vec4uq const & a, Vec4uq const & b) {$/;"	f
blend4uq	vector/vectori256e.h	/^static inline Vec4uq blend4uq(Vec4uq const & a, Vec4uq const & b) {$/;"	f
blend8f	vector/vectorf256.h	/^static inline Vec8f blend8f(Vec8f const & a, Vec8f const & b) {$/;"	f
blend8f	vector/vectorf256e.h	/^static inline Vec8f blend8f(Vec8f const & a, Vec8f const & b) {$/;"	f
blend8i	vector/vectori256.h	/^static inline Vec8i blend8i(Vec8i const & a, Vec8i const & b) {  $/;"	f
blend8i	vector/vectori256e.h	/^static inline Vec8i blend8i(Vec8i const & a, Vec8i const & b) {$/;"	f
blend8s	vector/vectori128.h	/^static inline Vec8s blend8s(Vec8s const & a, Vec8s const & b) {$/;"	f
blend8ui	vector/vectori256.h	/^static inline Vec8ui blend8ui(Vec8ui const & a, Vec8ui const & b) {$/;"	f
blend8ui	vector/vectori256e.h	/^static inline Vec8ui blend8ui(Vec8ui const & a, Vec8ui const & b) {$/;"	f
blend8us	vector/vectori128.h	/^static inline Vec8us blend8us(Vec8us const & a, Vec8us const & b) {$/;"	f
blocks	MUMmer/src/kurtz/libbasedir/space.c	/^\/*@null@*\/ static Blockdescription *blocks = NULL;$/;"	v	file:
branchbrother	MUMmer/src/kurtz/streesrc/streetyp.h	/^            branchbrother;  \/\/ the reference to the right brother; $/;"	m	struct:__anon8
branchnodeoffset	MUMmer/src/kurtz/streesrc/streetyp.h	/^       branchnodeoffset,      \/\/ number of leafs in tree$/;"	m	struct:Suffixtreetype
branchtab	MUMmer/src/kurtz/streesrc/streetyp.h	/^       *branchtab,            \/\/ table TBranch$/;"	m	struct:Suffixtreetype
bsearch_left	sparseSA.cpp	/^long sparseSA::bsearch_left(char c, long i, long s, long e) {$/;"	f	class:sparseSA
bsearch_right	sparseSA.cpp	/^long sparseSA::bsearch_right(char c, long i, long s, long e) {$/;"	f	class:sparseSA
bucketsort	qsufsort.c	/^static void bucketsort(int *x, int *p, int n, int k)$/;"	f	file:
buff	MUMmer/src/tigr/delta.hh	/^  long buff;$/;"	m	struct:SNP_t
build	MUMmer/src/tigr/delta.cc	/^void DeltaEdge_t::build (const DeltaRecord_t & rec)$/;"	f	class:DeltaEdge_t
build	MUMmer/src/tigr/delta.cc	/^void DeltaGraph_t::build (const string & deltapath, bool getdeltas)$/;"	f	class:DeltaGraph_t
by_ref	sparseSA.cpp	/^struct by_ref { bool operator() (const match_t &a, const match_t &b) const { if(a.ref == b.ref) return a.len > b.len; else return a.ref < b.ref; }  };$/;"	s	file:
cQ	MUMmer/src/tigr/delta.hh	/^  char cQ, cR;$/;"	m	struct:SNP_t
cR	MUMmer/src/tigr/delta.hh	/^  char cQ, cR;$/;"	m	struct:SNP_t
caddr_t	MUMmer/src/kurtz/libbasedir/types.h	/^typedef void * caddr_t;$/;"	t
cdfnorm	vector/special/vectormath.h	/^static inline Vec2d cdfnorm (Vec2d const & x) {   \/\/ cumulative normal distribution function$/;"	f
cdfnorm	vector/special/vectormath.h	/^static inline Vec4d cdfnorm (Vec4d const & x) {   \/\/ cumulative normal distribution function$/;"	f
cdfnorm	vector/special/vectormath.h	/^static inline Vec4f cdfnorm (Vec4f const & x) {   \/\/ cumulative normal distribution function$/;"	f
cdfnorm	vector/special/vectormath.h	/^static inline Vec8f cdfnorm (Vec8f const & x) {   \/\/ cumulative normal distribution function$/;"	f
cdfnorminv	vector/special/vectormath.h	/^static inline Vec2d cdfnorminv (Vec2d const & x) {   \/\/ inverse cumulative normal distribution function$/;"	f
cdfnorminv	vector/special/vectormath.h	/^static inline Vec4d cdfnorminv (Vec4d const & x) {   \/\/ inverse cumulative normal distribution function$/;"	f
cdfnorminv	vector/special/vectormath.h	/^static inline Vec4f cdfnorminv (Vec4f const & x) {   \/\/ inverse cumulative normal distribution function$/;"	f
cdfnorminv	vector/special/vectormath.h	/^static inline Vec8f cdfnorminv (Vec8f const & x) {   \/\/ inverse cumulative normal distribution function$/;"	f
ceil	vector/vectorf128.h	/^static inline Vec2d ceil(Vec2d const & a) {$/;"	f
ceil	vector/vectorf128.h	/^static inline Vec4f ceil(Vec4f const & a) {$/;"	f
ceil	vector/vectorf256.h	/^static inline Vec4d ceil(Vec4d const & a) {$/;"	f
ceil	vector/vectorf256.h	/^static inline Vec8f ceil(Vec8f const & a) {$/;"	f
ceil	vector/vectorf256e.h	/^static inline Vec4d ceil(Vec4d const & a) {$/;"	f
ceil	vector/vectorf256e.h	/^static inline Vec8f ceil(Vec8f const & a) {$/;"	f
cexp	vector/special/complexvec.h	/^static inline Complex2d cexp (Complex2d const & a) {$/;"	f
cexp	vector/special/complexvec.h	/^static inline Complex2f cexp (Complex2f const & a) {   \/\/ complex exponential function$/;"	f
cexp	vector/special/complexvec.h	/^static inline Complex2f cexp (Complex2f const & a) {$/;"	f
cexp	vector/special/complexvec.h	/^static inline Complex4d cexp (Complex4d const & a) {$/;"	f
cexp	vector/special/complexvec.h	/^static inline Complex4f cexp (Complex4f const & a) {$/;"	f
cexp	vector/special/complexvec.h	/^static inline Complex4f cexp (Complex4f const & x) {   \/\/ complex exponential function$/;"	f
cexp	vector/special/complexvec.h	/^static inline Complex8f cexp (Complex8f const & a) {$/;"	f
cexp	vector/special/vectormath.h	/^static inline Vec2d cexp (Vec2d const & x) {   \/\/ complex exponential function$/;"	f
cexp	vector/special/vectormath.h	/^static inline Vec4d cexp (Vec4d const & x) {   \/\/ complex exponential function$/;"	f
cexp	vector/special/vectormath.h	/^static inline Vec4f cexp (Vec4f const & x) {   \/\/ complex exponential function$/;"	f
cexp	vector/special/vectormath.h	/^static inline Vec8f cexp (Vec8f const & x) {   \/\/ complex exponential function$/;"	f
chainstart	MUMmer/src/kurtz/streesrc/streetyp.h	/^       *chainstart,           \/\/ address of the node, current chains starts at$/;"	m	struct:Suffixtreetype
change_file_format	MUMmer/mapview	/^sub change_file_format{   $/;"	s
change_file_format	MUMmer/scripts/mapview.pl	/^sub change_file_format{   $/;"	s
change_sign	vector/vectorf128.h	/^static inline Vec2d change_sign(Vec2d const & a) {$/;"	f
change_sign	vector/vectorf128.h	/^static inline Vec4f change_sign(Vec4f const & a) {$/;"	f
change_sign	vector/vectorf256.h	/^static inline Vec4d change_sign(Vec4d const & a) {$/;"	f
change_sign	vector/vectorf256.h	/^static inline Vec8f change_sign(Vec8f const & a) {$/;"	f
change_sign	vector/vectorf256e.h	/^static inline Vec4d change_sign(Vec4d const & a) {$/;"	f
change_sign	vector/vectorf256e.h	/^static inline Vec8f change_sign(Vec8f const & a) {$/;"	f
checkStream	MUMmer/src/tigr/delta.hh	/^  void checkStream ( )$/;"	f	class:DeltaReader_t
checkdoubleexclude	MUMmer/src/kurtz/libbasedir/procopt.c	/^Sint checkdoubleexclude(Uint numofopts,OptionDescription *opt,$/;"	f
checkexclude	MUMmer/src/kurtz/libbasedir/procopt.c	/^Sint checkexclude(OptionDescription *opt,Sint *excludetab,Uint len)$/;"	f
checkiflocationisMUMcand	MUMmer/src/kurtz/mm3src/findmumcand.c	/^static Sint checkiflocationisMUMcand (Location *loc,$/;"	f	file:
checkleafcount	MUMmer/src/kurtz/streesrc/addleafcount.c	/^static void checkleafcount(Suffixtree *stree,$/;"	f	file:
checkleafcountall	MUMmer/src/kurtz/streesrc/addleafcount.c	/^static void checkleafcountall(Suffixtree *stree)$/;"	f	file:
checklocation	MUMmer/src/kurtz/streesrc/streedbg.c	/^void checklocation(Suffixtree *stree,Location *loc)$/;"	f
checkquerycommonprefix	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^static void checkquerycommonprefix(Maxmatchinfo *maxmatchinfo,$/;"	f	file:
checkspaceleak	MUMmer/src/kurtz/libbasedir/space.c	/^void checkspaceleak(void)$/;"	f
checkstree	MUMmer/src/kurtz/streesrc/streedbg.c	/^void checkstree(Suffixtree *stree)$/;"	f
child	mummer.cpp	/^bool child = true;$/;"	v
choose_pivot	qsufsort.c	/^static int choose_pivot(int *p, int n) {$/;"	f	file:
chunks	mummer.cpp	/^int chunks = 1;$/;"	v
clean	MUMmer/src/tigr/delta.cc	/^void DeltaGraph_t::clean()$/;"	f	class:DeltaGraph_t
cleanLogFILES	MUMmer/scripts/Foundation.pm	/^   sub cleanLogFILES() {$/;"	s
clear	MUMmer/src/tigr/annotate.cc	/^  void clear()$/;"	f	class:Matrix_t
clear	MUMmer/src/tigr/delta.cc	/^void DeltaGraph_t::clear ( )$/;"	f	class:DeltaGraph_t
clear	MUMmer/src/tigr/delta.hh	/^  void clear ( )$/;"	f	struct:DeltaAlignment_t
clear	MUMmer/src/tigr/delta.hh	/^  void clear ( )$/;"	f	struct:DeltaRecord_t
close	MUMmer/src/tigr/delta.hh	/^  void close ( )$/;"	f	class:DeltaReader_t
closeLogERROR	MUMmer/scripts/Foundation.pm	/^   sub closeLogERROR() {$/;"	s
closeLogMSG	MUMmer/scripts/Foundation.pm	/^   sub closeLogMSG() {$/;"	s
cluster_id	MUMmer/src/tigr/mgaps.cc	/^   int  cluster_id : 30;$/;"	m	struct:Match_t	file:
clustering	MUMmer/docs/web/manual/index.html	/^<h3><a name="clustering"><\/a>5.2. Clustering<\/h3>$/;"	a
clusters	MUMmer/src/tigr/postnuc.cc	/^  vector<Cluster> clusters;  \/\/ the ordered set of clusters between A and B$/;"	m	struct:Synteny	file:
clusters	MUMmer/src/tigr/postpro.cc	/^  vector<Cluster> clusters;  \/\/ the ordered set of clusters between A and B$/;"	m	struct:Synteny	file:
cmaxmatch	MUMmer/src/kurtz/mm3src/maxmatdef.h	/^       cmaxmatch,               \/\/ compute all maximal matches$/;"	m	struct:__anon4
cmum	MUMmer/src/kurtz/mm3src/maxmatdef.h	/^       cmum;                    \/\/ compute real matches unique in both sequences$/;"	m	struct:__anon4
cmum	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^       cmum,                   \/\/ compute MUMs$/;"	m	struct:__anon3	file:
cmumcand	MUMmer/src/kurtz/mm3src/maxmatdef.h	/^       cmumcand,                \/\/ compute reference-unique maximal matches$/;"	m	struct:__anon4
cmumcand	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^       cmumcand,               \/\/ compute MUM candidates$/;"	m	struct:__anon3	file:
collectMEMs	sparseSA.cpp	/^void sparseSA::collectMEMs(string &P, long prefix, interval_t mli, interval_t xmi, vector<match_t> &matches, int min_len, bool print) {$/;"	f	class:sparseSA
commondepthstack	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^  ArrayNodeinfo commondepthstack; \/\/ stack to store depth values$/;"	m	struct:__anon2	file:
compare	MUMmer/docs/web/manual/index.html	/^<h3><a name="compare"><\/a>1.2. Comparative genomics<\/h3>$/;"	a
compareMUMcandidates	MUMmer/src/kurtz/libbasedir/cleanMUMcand.c	/^static Sint compareMUMcandidates(MUMcandidate *p,MUMcandidate *q)$/;"	f	file:
comparelocs	MUMmer/src/kurtz/streesrc/streedbg.c	/^static Sint comparelocs(Suffixtree *stree,Location *loc1,Location *loc2)$/;"	f	file:
compdna	MUMmer/src/tigr/translate.hh	/^const int	compdna[NUM_DNA_SYMBOLS] = {$/;"	v
compilation	MUMmer/docs/web/manual/index.html	/^<h3><a name="compilation"><\/a>2.3. Compilation and installation<\/h3>$/;"	a
completelarge	MUMmer/src/kurtz/streesrc/construct.c	/^static void completelarge(Suffixtree *stree)$/;"	f	file:
compress	vector/vectorf128.h	/^static inline Vec4f compress (Vec2d const & low, Vec2d const & high) {$/;"	f
compress	vector/vectorf256.h	/^static inline Vec8f compress (Vec4d const & low, Vec4d const & high) {$/;"	f
compress	vector/vectorf256e.h	/^static inline Vec8f compress (Vec4d const & low, Vec4d const & high) {$/;"	f
compress	vector/vectori128.h	/^static inline Vec16c compress (Vec8s const & low, Vec8s const & high) {$/;"	f
compress	vector/vectori128.h	/^static inline Vec16uc compress (Vec8us const & low, Vec8us const & high) {$/;"	f
compress	vector/vectori128.h	/^static inline Vec4i compress (Vec2q const & low, Vec2q const & high) {$/;"	f
compress	vector/vectori128.h	/^static inline Vec4ui compress (Vec2uq const & low, Vec2uq const & high) {$/;"	f
compress	vector/vectori128.h	/^static inline Vec8s compress (Vec4i const & low, Vec4i const & high) {$/;"	f
compress	vector/vectori128.h	/^static inline Vec8us compress (Vec4ui const & low, Vec4ui const & high) {$/;"	f
compress	vector/vectori256.h	/^static inline Vec16s compress (Vec8i const & low, Vec8i const & high) {$/;"	f
compress	vector/vectori256.h	/^static inline Vec16us compress (Vec8ui const & low, Vec8ui const & high) {$/;"	f
compress	vector/vectori256.h	/^static inline Vec32c compress (Vec16s const & low, Vec16s const & high) {$/;"	f
compress	vector/vectori256.h	/^static inline Vec32uc compress (Vec16us const & low, Vec16us const & high) {$/;"	f
compress	vector/vectori256.h	/^static inline Vec8i compress (Vec4q const & low, Vec4q const & high) {$/;"	f
compress	vector/vectori256.h	/^static inline Vec8ui compress (Vec4uq const & low, Vec4uq const & high) {$/;"	f
compress	vector/vectori256e.h	/^static inline Vec16s compress (Vec8i const & low, Vec8i const & high) {$/;"	f
compress	vector/vectori256e.h	/^static inline Vec16us compress (Vec8ui const & low, Vec8ui const & high) {$/;"	f
compress	vector/vectori256e.h	/^static inline Vec32c compress (Vec16s const & low, Vec16s const & high) {$/;"	f
compress	vector/vectori256e.h	/^static inline Vec32uc compress (Vec16us const & low, Vec16us const & high) {$/;"	f
compress	vector/vectori256e.h	/^static inline Vec8i compress (Vec4q const & low, Vec4q const & high) {$/;"	f
compress	vector/vectori256e.h	/^static inline Vec8ui compress (Vec4uq const & low, Vec4uq const & high) {$/;"	f
compress_saturated	vector/vectori128.h	/^static inline Vec16c compress_saturated (Vec8s const & low, Vec8s const & high) {$/;"	f
compress_saturated	vector/vectori128.h	/^static inline Vec16uc compress_saturated (Vec8us const & low, Vec8us const & high) {$/;"	f
compress_saturated	vector/vectori128.h	/^static inline Vec4i compress_saturated (Vec2q const & low, Vec2q const & high) {$/;"	f
compress_saturated	vector/vectori128.h	/^static inline Vec4ui compress_saturated (Vec2uq const & low, Vec2uq const & high) {$/;"	f
compress_saturated	vector/vectori128.h	/^static inline Vec8s compress_saturated (Vec4i const & low, Vec4i const & high) {$/;"	f
compress_saturated	vector/vectori128.h	/^static inline Vec8us compress_saturated (Vec4ui const & low, Vec4ui const & high) {$/;"	f
compress_saturated	vector/vectori256.h	/^static inline Vec16s compress_saturated (Vec8i const & low, Vec8i const & high) {$/;"	f
compress_saturated	vector/vectori256.h	/^static inline Vec16us compress_saturated (Vec8ui const & low, Vec8ui const & high) {$/;"	f
compress_saturated	vector/vectori256.h	/^static inline Vec32c compress_saturated (Vec16s const & low, Vec16s const & high) {$/;"	f
compress_saturated	vector/vectori256.h	/^static inline Vec32uc compress_saturated (Vec16us const & low, Vec16us const & high) {$/;"	f
compress_saturated	vector/vectori256.h	/^static inline Vec8i compress_saturated (Vec4q const & low, Vec4q const & high) {$/;"	f
compress_saturated	vector/vectori256.h	/^static inline Vec8ui compress_saturated (Vec4uq const & low, Vec4uq const & high) {$/;"	f
compress_saturated	vector/vectori256e.h	/^static inline Vec16s compress_saturated (Vec8i const & low, Vec8i const & high) {$/;"	f
compress_saturated	vector/vectori256e.h	/^static inline Vec16us compress_saturated (Vec8ui const & low, Vec8ui const & high) {$/;"	f
compress_saturated	vector/vectori256e.h	/^static inline Vec32c compress_saturated (Vec16s const & low, Vec16s const & high) {$/;"	f
compress_saturated	vector/vectori256e.h	/^static inline Vec32uc compress_saturated (Vec16us const & low, Vec16us const & high) {$/;"	f
compress_saturated	vector/vectori256e.h	/^static inline Vec8i compress_saturated (Vec4q const & low, Vec4q const & high) {$/;"	f
compress_saturated	vector/vectori256e.h	/^static inline Vec8ui compress_saturated (Vec4uq const & low, Vec4uq const & high) {$/;"	f
computeChild	sparseSA.cpp	/^void sparseSA::computeChild() {$/;"	f	class:sparseSA
computeLCP	sparseSA.cpp	/^void sparseSA::computeLCP() {$/;"	f	class:sparseSA
conQ	MUMmer/src/tigr/delta.hh	/^  int conQ, conR;$/;"	m	struct:SNP_t
conR	MUMmer/src/tigr/delta.hh	/^  int conQ, conR;$/;"	m	struct:SNP_t
const_int	vector/instrset.h	158;"	d
const_uint	vector/instrset.h	159;"	d
constant4i	vector/vectori128.h	/^static inline __m128i constant4i() {$/;"	f
constant8f	vector/vectorf256.h	/^static inline __m256 constant8f() {$/;"	f
constant8f	vector/vectorf256e.h	/^static inline Vec256fe constant8f() {$/;"	f
constant8i	vector/vectori256.h	/^static inline __m256i constant8i() {$/;"	f
constant8i	vector/vectori256e.h	/^static inline Vec256ie constant8i() {$/;"	f
constructheadstree	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^Sint constructheadstree(Suffixtree *stree,SYMBOL *text,$/;"	f
constructmarkmaxstree	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^Sint constructmarkmaxstree(Suffixtree *stree,SYMBOL *text,$/;"	f
constructprogressstree	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^Sint constructprogressstree(Suffixtree *stree,SYMBOL *text,$/;"	f
constructstree	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^Sint constructstree(Suffixtree *stree,SYMBOL *text,Uint textlen)$/;"	f
contact	MUMmer/docs/web/examples/index.html	/^<h2><a name="contact"><\/a>3. Contact information<\/h2>$/;"	a
contact	MUMmer/docs/web/manual/index.html	/^<h2><a name="contact"><\/a>7. Contact information<\/h2>$/;"	a
coords	MUMmer/docs/web/manual/index.html	/^<h4><a name="coords"><\/a>5.4.5. show-coords<\/h4>$/;"	a
cos	vector/special/vectormath.h	/^static inline Vec2d cos (Vec2d const & x) {   \/\/ cosine$/;"	f
cos	vector/special/vectormath.h	/^static inline Vec2d cos (Vec2d const & x) {$/;"	f
cos	vector/special/vectormath.h	/^static inline Vec4d cos (Vec4d const & x) {   \/\/ cosine$/;"	f
cos	vector/special/vectormath.h	/^static inline Vec4f cos (Vec4f const & x) {   \/\/ cosine$/;"	f
cos	vector/special/vectormath.h	/^static inline Vec4f cos(Vec4f const & x) {$/;"	f
cos	vector/special/vectormath.h	/^static inline Vec8f cos (Vec8f const & x) {   \/\/ cosine$/;"	f
cosh	vector/special/vectormath.h	/^static inline Vec2d cosh (Vec2d const & x) {   \/\/ hyperbolic cosine$/;"	f
cosh	vector/special/vectormath.h	/^static inline Vec2d cosh (Vec2d const & x) {$/;"	f
cosh	vector/special/vectormath.h	/^static inline Vec4d cosh (Vec4d const & x) {   \/\/ hyperbolic cosine$/;"	f
cosh	vector/special/vectormath.h	/^static inline Vec4f cosh (Vec4f const & x) {   \/\/ hyperbolic cosine$/;"	f
cosh	vector/special/vectormath.h	/^static inline Vec4f cosh(Vec4f const & x) {   \/\/ hyperbolic cosine$/;"	f
cosh	vector/special/vectormath.h	/^static inline Vec8f cosh (Vec8f const & x) {   \/\/ hyperbolic cosine$/;"	f
countleafs	MUMmer/src/kurtz/streesrc/addleafcount.c	/^static Sint countleafs(\/*@unused@*\/ Uint leafindex,$/;"	f	file:
countstack	MUMmer/src/kurtz/streesrc/addleafcount.c	/^  ArrayUint countstack;$/;"	m	struct:__anon6	file:
cout_mutex	sparseSA.cpp	/^pthread_mutex_t cout_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
cpuid	vector/instrset_detect.cpp	/^static inline void cpuid (int output[4], int functionnumber) {	$/;"	f	file:
creatememorymap	MUMmer/src/kurtz/libbasedir/mapfile.c	/^\/*@null@*\/ void *creatememorymap(char *file,Uint line,char *filename,$/;"	f
creatememorymapforfiledesc	MUMmer/src/kurtz/libbasedir/mapfile.c	/^\/*@null@*\/ void *creatememorymapforfiledesc(char *file,Uint line,Sint fd,$/;"	f
cross_product	vector/special/vector3d.h	/^static inline Vec3d cross_product (Vec3d const & a, Vec3d const & b) {$/;"	f
cross_product	vector/special/vector3d.h	/^static inline Vec3f cross_product (Vec3f const & a, Vec3f const & b) {$/;"	f
ctxQ	MUMmer/src/tigr/delta.hh	/^  std::string ctxQ, ctxR;$/;"	m	struct:SNP_t
ctxR	MUMmer/src/tigr/delta.hh	/^  std::string ctxQ, ctxR;$/;"	m	struct:SNP_t
cubic_root	vector/special/vectormath.h	/^static inline Vec2d cubic_root (Vec2d const & x) {   \/\/ pow(x,1\/3)$/;"	f
cubic_root	vector/special/vectormath.h	/^static inline Vec4d cubic_root (Vec4d const & x) {   \/\/ pow(x,1\/3)$/;"	f
cubic_root	vector/special/vectormath.h	/^static inline Vec4f cubic_root (Vec4f const & x) {   \/\/ pow(x,1\/3)$/;"	f
cubic_root	vector/special/vectormath.h	/^static inline Vec8f cubic_root (Vec8f const & x) {   \/\/ pow(x,1\/3)$/;"	f
currentbranchtabsize	MUMmer/src/kurtz/streesrc/streetyp.h	/^       currentbranchtabsize,  \/\/ current number of cells in branchtab$/;"	m	struct:Suffixtreetype
currentdepth	MUMmer/src/kurtz/streesrc/streetyp.h	/^       currentdepth,          \/\/ depth of the new branch node$/;"	m	struct:Suffixtreetype
currentisrcmatch	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^       currentisrcmatch;       \/\/ true iff currently rc-matches are computed$/;"	m	struct:__anon3	file:
currentquerylen	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^       currentquerylen;        \/\/ length of the current query sequence$/;"	m	struct:__anon3	file:
currentspace	MUMmer/src/kurtz/libbasedir/mapfile.c	/^static Uint currentspace = 0,              \/\/ currently mapped num of bytes$/;"	v	file:
currentspace	MUMmer/src/kurtz/libbasedir/space.c	/^            currentspace = 0,   \/\/ currently allocated num of bytes$/;"	v	file:
cutoff	vector/vectorf128.h	/^    Vec2d & cutoff(int n) {$/;"	f	class:Vec2d
cutoff	vector/vectorf128.h	/^    Vec4f & cutoff(int n) {$/;"	f	class:Vec4f
cutoff	vector/vectorf256.h	/^    Vec4d & cutoff(int n) {$/;"	f	class:Vec4d
cutoff	vector/vectorf256.h	/^    Vec8f & cutoff(int n) {$/;"	f	class:Vec8f
cutoff	vector/vectorf256e.h	/^    Vec4d & cutoff(int n) {$/;"	f	class:Vec4d
cutoff	vector/vectorf256e.h	/^    Vec8f & cutoff(int n) {$/;"	f	class:Vec8f
cutoff	vector/vectori128.h	/^    Vec16c & cutoff(int n) {$/;"	f	class:Vec16c
cutoff	vector/vectori128.h	/^    Vec2q & cutoff(int n) {$/;"	f	class:Vec2q
cutoff	vector/vectori128.h	/^    Vec4i & cutoff(int n) {$/;"	f	class:Vec4i
cutoff	vector/vectori128.h	/^    Vec8s & cutoff(int n) {$/;"	f	class:Vec8s
cutoff	vector/vectori256.h	/^    Vec16s & cutoff(int n) {$/;"	f	class:Vec16s
cutoff	vector/vectori256.h	/^    Vec32c & cutoff(int n) {$/;"	f	class:Vec32c
cutoff	vector/vectori256.h	/^    Vec4q & cutoff(int n) {$/;"	f	class:Vec4q
cutoff	vector/vectori256.h	/^    Vec8i & cutoff(int n) {$/;"	f	class:Vec8i
cutoff	vector/vectori256e.h	/^    Vec16s & cutoff(int n) {$/;"	f	class:Vec16s
cutoff	vector/vectori256e.h	/^    Vec32c & cutoff(int n) {$/;"	f	class:Vec32c
cutoff	vector/vectori256e.h	/^    Vec4q & cutoff(int n) {$/;"	f	class:Vec4q
cutoff	vector/vectori256e.h	/^    Vec8i & cutoff(int n) {$/;"	f	class:Vec8i
d_m	MUMmer/src/tigr/annotate.cc	/^  vector<T> d_m;$/;"	m	class:Matrix_t	file:
data_type_m	MUMmer/src/tigr/delta.hh	/^  std::string data_type_m;       \/\/!< the type of alignment data$/;"	m	class:DeltaReader_t
datatype	MUMmer/src/tigr/delta.hh	/^  AlignmentType_t datatype;    \/\/!< alignment data type$/;"	m	class:DeltaGraph_t
dbstart	MUMmer/src/kurtz/libbasedir/mumcand.h	/^       dbstart,      \/\/ start position in the subject-sequence$/;"	m	struct:__anon19
debugPop	MUMmer/scripts/Foundation.pm	/^   sub debugPop() {$/;"	s
debugPush	MUMmer/scripts/Foundation.pm	/^   sub debugPush() {$/;"	s
debugclosefile	MUMmer/src/kurtz/libbasedir/debug.c	/^void debugclosefile(void)$/;"	f
debugfileptr	MUMmer/src/kurtz/libbasedir/debug.c	/^           *debugfileptr = NULL;  \/\/ the file pointer to show the debug info$/;"	v	file:
debuglevel	MUMmer/src/kurtz/libbasedir/debug.c	/^static Sint debuglevel = 0;        \/\/ the value of \\texttt{DEBUGLEVEL}$/;"	v	file:
debugwhere	MUMmer/src/kurtz/libbasedir/debug.c	/^static BOOL debugwhere = False;    \/\/ the value of \\texttt{DEBUGWHERE}$/;"	v	file:
declared	MUMmer/src/kurtz/libbasedir/optdesc.h	/^       declared;             \/\/ is the option declared by$/;"	m	struct:__anon18
defined	MUMmer/src/kurtz/libbasedir/multidef.h	/^  BOOL defined,          \/\/ show a description$/;"	m	struct:__anon22
deletememorymap	MUMmer/src/kurtz/libbasedir/mapfile.c	/^Sint deletememorymap(char *file,Uint line,void *mappedfile)$/;"	f
delta	MUMmer/src/tigr/delta.hh	/^  std::string delta;          \/\/!< delta information$/;"	m	struct:DeltaEdgelet_t
delta	MUMmer/src/tigr/postnuc.cc	/^  vector<long int> delta;         \/\/ the delta values, with NO zero at the end$/;"	m	struct:Alignment	file:
delta	MUMmer/src/tigr/postpro.cc	/^  vector<long int> delta;         \/\/ the delta values, with NO zero at the end$/;"	m	struct:Alignment	file:
deltaApos	MUMmer/src/tigr/postnuc.cc	/^  long int deltaApos;        \/\/ sum of abs(deltas) - #of negative deltas$/;"	m	struct:Alignment	file:
deltaApos	MUMmer/src/tigr/postpro.cc	/^  long int deltaApos;        \/\/ sum of abs(deltas) - #of negative deltas$/;"	m	struct:Alignment	file:
delta_path_m	MUMmer/src/tigr/delta.hh	/^  std::string delta_path_m;      \/\/!< the name of the delta input file$/;"	m	class:DeltaReader_t
delta_stream_m	MUMmer/src/tigr/delta.hh	/^  std::ifstream delta_stream_m;  \/\/!< the delta file input stream$/;"	m	class:DeltaReader_t
deltas	MUMmer/src/tigr/delta.hh	/^  std::vector<long> deltas;  \/\/!< delta encoded alignment informaiton$/;"	m	struct:DeltaAlignment_t
depth	MUMmer/src/kurtz/streesrc/streetyp.h	/^       depth;               \/\/ the depth of the branching node$/;"	m	struct:__anon8
depth	MUMmer/src/kurtz/streesrc/streetyp.h	/^  Uint depth, headposition;$/;"	m	struct:__anon11
depth	sparseSA.hpp	/^  long depth, start, end;$/;"	m	struct:interval_t
depthfirststree	MUMmer/src/kurtz/streesrc/dfs.c	/^Sint depthfirststree(Suffixtree *stree,Reference *startnode,$/;"	f
depthfirststree	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^Sint depthfirststree(Suffixtree *stree,Reference *startnode,$/;"	f
depthofpreviousmaxloc	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^       depthofpreviousmaxloc;     \/\/ the depth of the previous maxloc$/;"	m	struct:__anon2	file:
descr	sparseSA.hpp	/^  vector<string> &descr; \/\/ Descriptions of concatenated sequences.$/;"	m	struct:sparseSA
description	MUMmer/docs/web/manual/index.html	/^<h3><a name="description"><\/a>1.1. Description<\/h3>$/;"	a
description	MUMmer/src/kurtz/libbasedir/optdesc.h	/^       *description;         \/\/ help text describing purpose of option$/;"	m	struct:__anon18
descspace	MUMmer/src/kurtz/libbasedir/multidef.h	/^  ArrayCharacters descspace;           \/\/ the space for the descriptions$/;"	m	struct:__anon21
diff	MUMmer/src/tigr/delta.cc	/^  long diff;$/;"	m	struct:LIS_t	file:
dirB	MUMmer/src/tigr/postnuc.cc	/^  signed char dirB;          \/\/ the query sequence direction$/;"	m	struct:Alignment	file:
dirB	MUMmer/src/tigr/postnuc.cc	/^  signed char dirB;          \/\/ the query sequence direction$/;"	m	struct:Cluster	file:
dirQ	MUMmer/src/tigr/delta.hh	/^  unsigned char dirQ   : 1;   \/\/!< query match direction$/;"	m	struct:DeltaEdgelet_t
dirR	MUMmer/src/tigr/delta.hh	/^  unsigned char dirR   : 1;   \/\/!< reference match direction$/;"	m	struct:DeltaEdgelet_t
divide_by_i	vector/vectori128.h	/^static inline Vec4i divide_by_i(Vec4i const & x) {$/;"	f
divide_by_i	vector/vectori128.h	/^static inline Vec8s divide_by_i(Vec8s const & x) {$/;"	f
divide_by_i	vector/vectori256.h	/^static inline Vec16s divide_by_i(Vec16s x) {$/;"	f
divide_by_i	vector/vectori256.h	/^static inline Vec8i divide_by_i(Vec8i const & x) {$/;"	f
divide_by_i	vector/vectori256e.h	/^static inline Vec16s divide_by_i(Vec16s const & a) {$/;"	f
divide_by_i	vector/vectori256e.h	/^static inline Vec8i divide_by_i(Vec8i const & a) {$/;"	f
divide_by_ui	vector/vectori128.h	/^static inline Vec4ui divide_by_ui(Vec4ui const & x) {$/;"	f
divide_by_ui	vector/vectori128.h	/^static inline Vec8us divide_by_ui(Vec8us const & x) {$/;"	f
divide_by_ui	vector/vectori256.h	/^static inline Vec16us divide_by_ui(Vec16us const & x) {$/;"	f
divide_by_ui	vector/vectori256.h	/^static inline Vec8ui divide_by_ui(Vec8ui const & x) {$/;"	f
divide_by_ui	vector/vectori256e.h	/^static inline Vec16us divide_by_ui(Vec16us const & a) {$/;"	f
divide_by_ui	vector/vectori256e.h	/^static inline Vec8ui divide_by_ui(Vec8ui const & a) {$/;"	f
dna	genDNA.py	/^dna = {1 : "a", 2 : "c", 3 : "g", 4 : "t"}$/;"	v
dot_product	vector/special/vector3d.h	/^static inline double dot_product (Vec3d const & a, Vec3d const & b) {$/;"	f
dot_product	vector/special/vector3d.h	/^static inline float dot_product (Vec3f const & a, Vec3f const & b) {$/;"	f
dynamicstrdup	MUMmer/src/kurtz/libbasedir/space.c	/^\/*@notnull@*\/ char *dynamicstrdup(char *file,Uint line,char *source)$/;"	f
eA	MUMmer/src/tigr/postnuc.cc	/^  long int sA, sB, eA, eB;   \/\/ the start in A, B and the end in A, B$/;"	m	struct:Alignment	file:
eA	MUMmer/src/tigr/postpro.cc	/^  long int sA, sB, eA, eB;   \/\/ the start in A, B and the end in A, B$/;"	m	struct:Alignment	file:
eA	MUMmer/src/tigr/show-coords.cc	/^  long int sA, eA, sB, eB;                \/\/ start, end in A, start, end in B$/;"	m	struct:AlignStats	file:
eB	MUMmer/src/tigr/postnuc.cc	/^  long int sA, sB, eA, eB;   \/\/ the start in A, B and the end in A, B$/;"	m	struct:Alignment	file:
eB	MUMmer/src/tigr/postpro.cc	/^  long int sA, sB, eA, eB;   \/\/ the start in A, B and the end in A, B$/;"	m	struct:Alignment	file:
eB	MUMmer/src/tigr/show-coords.cc	/^  long int sA, eA, sB, eB;                \/\/ start, end in A, start, end in B$/;"	m	struct:AlignStats	file:
eQ	MUMmer/src/tigr/delta.hh	/^  long eQ;    \/\/!< end coordinate in the reference$/;"	m	struct:DeltaAlignment_t
eQ	MUMmer/src/tigr/show-aligns.cc	/^  long int sQ, eQ, sR, eR;              \/\/ start and end in Query and Reference$/;"	m	struct:AlignStats	file:
eQ	MUMmer/src/tigr/show-tiling.cc	/^  long int sQ, eQ, sR, eR;              \/\/ start and end in Query and Reference$/;"	m	struct:AlignStats	file:
eR	MUMmer/src/tigr/delta.hh	/^  long eR;    \/\/!< end coordinate in the reference$/;"	m	struct:DeltaAlignment_t
eR	MUMmer/src/tigr/show-aligns.cc	/^  long int sQ, eQ, sR, eR;              \/\/ start and end in Query and Reference$/;"	m	struct:AlignStats	file:
eR	MUMmer/src/tigr/show-tiling.cc	/^  long int sQ, eQ, sR, eR;              \/\/ start and end in Query and Reference$/;"	m	struct:AlignStats	file:
edge	MUMmer/src/tigr/delta.hh	/^  DeltaEdge_t * edge;$/;"	m	struct:DeltaEdgelet_t
edgelen	MUMmer/src/kurtz/streesrc/streetyp.h	/^  Uint edgelen,         \/\/ length of edge$/;"	m	struct:__anon9
edgelets	MUMmer/src/tigr/delta.hh	/^  std::vector<DeltaEdgelet_t *> edgelets;  \/\/!< the set of individual alignments$/;"	m	struct:DeltaEdge_t
edges	MUMmer/src/tigr/delta.hh	/^  std::vector<DeltaEdge_t *> edges;   \/\/!< the set of related edges$/;"	m	struct:DeltaNode_t
end	sparseSA.hpp	/^  long depth, start, end;$/;"	m	struct:interval_t
enumeratemaxmatches	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^static Sint enumeratemaxmatches (Maxmatchinfo *maxmatchinfo,$/;"	f	file:
enumlocations	MUMmer/src/kurtz/streesrc/streedbg.c	/^void enumlocations(Suffixtree *stree,$/;"	f
enumlocationssubtree	MUMmer/src/kurtz/streesrc/streedbg.c	/^static void enumlocationssubtree(Suffixtree *stree,Uint *btptr,$/;"	f	file:
ep	MUMmer/src/tigr/delta.hh	/^  DeltaEdge_t * ep;$/;"	m	struct:SNP_t
erf	vector/special/vectormath.h	/^static inline Vec2d erf (Vec2d const & x) {   \/\/ error function$/;"	f
erf	vector/special/vectormath.h	/^static inline Vec2d erf (Vec2d const & x) {$/;"	f
erf	vector/special/vectormath.h	/^static inline Vec4d erf (Vec4d const & x) {   \/\/ error function$/;"	f
erf	vector/special/vectormath.h	/^static inline Vec4f erf (Vec4f const & x) {   \/\/ error function$/;"	f
erf	vector/special/vectormath.h	/^static inline Vec4f erf(Vec4f const & x) {$/;"	f
erf	vector/special/vectormath.h	/^static inline Vec8f erf (Vec8f const & x) {   \/\/ error function$/;"	f
erfc	vector/special/vectormath.h	/^static inline Vec2d erfc (Vec2d const & x) {   \/\/ error function complement$/;"	f
erfc	vector/special/vectormath.h	/^static inline Vec2d erfc (Vec2d const & x) {$/;"	f
erfc	vector/special/vectormath.h	/^static inline Vec4d erfc (Vec4d const & x) {   \/\/ error function complement$/;"	f
erfc	vector/special/vectormath.h	/^static inline Vec4f erfc (Vec4f const & x) {   \/\/ error function complement$/;"	f
erfc	vector/special/vectormath.h	/^static inline Vec4f erfc(Vec4f const & x) {$/;"	f
erfc	vector/special/vectormath.h	/^static inline Vec8f erfc (Vec8f const & x) {   \/\/ error function complement$/;"	f
erfinv	vector/special/vectormath.h	/^static inline Vec2d erfinv (Vec2d const & x) {   \/\/ inverse error function$/;"	f
erfinv	vector/special/vectormath.h	/^static inline Vec4d erfinv (Vec4d const & x) {   \/\/ inverse error function$/;"	f
erfinv	vector/special/vectormath.h	/^static inline Vec4f erfinv (Vec4f const & x) {   \/\/ inverse error function$/;"	f
erfinv	vector/special/vectormath.h	/^static inline Vec8f erfinv (Vec8f const & x) {   \/\/ inverse error function$/;"	f
errorcode	MUMmer/src/kurtz/libbasedir/seterror.c	/^static Sint errorcode = 0;$/;"	v	file:
errormessage	MUMmer/src/kurtz/libbasedir/seterror.c	/^static char errormessage[MAXERRORMSG+1];$/;"	v	file:
exact	MUMmer/docs/web/manual/index.html	/^<h4><a name="exact"><\/a>5.1.3. exact-tandems<\/h4>$/;"	a
exactlytwoleavesstree	MUMmer/src/kurtz/streesrc/ex2leav.c	/^BOOL exactlytwoleavesstree(Suffixtree *stree,PairUint *twoleaves,Bref start)$/;"	f
exactlytwoleavesstree	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^BOOL exactlytwoleavesstree(Suffixtree *stree,$/;"	f
examples	MUMmer/docs/web/examples/index.html	/^<h2><a name="examples"><\/a>2. Examples<\/h2>$/;"	a
exp	vector/special/vectormath.h	/^static inline Vec2d exp (Vec2d const & x) {   \/\/ exponential function$/;"	f
exp	vector/special/vectormath.h	/^static inline Vec2d exp (Vec2d const & x) {$/;"	f
exp	vector/special/vectormath.h	/^static inline Vec4d exp (Vec4d const & x) {   \/\/ exponential function$/;"	f
exp	vector/special/vectormath.h	/^static inline Vec4f exp (Vec4f const & x) {   \/\/ exponential function$/;"	f
exp	vector/special/vectormath.h	/^static inline Vec4f exp (Vec4f const & x) {$/;"	f
exp	vector/special/vectormath.h	/^static inline Vec8f exp (Vec8f const & x) {   \/\/ exponential function$/;"	f
exp10	vector/special/vectormath.h	/^static inline Vec2d exp10 (Vec2d const & x) {   \/\/ pow(10,x)$/;"	f
exp10	vector/special/vectormath.h	/^static inline Vec2d exp10 (Vec2d const & x) {$/;"	f
exp10	vector/special/vectormath.h	/^static inline Vec4d exp10 (Vec4d const & x) {   \/\/ pow(10,x)$/;"	f
exp10	vector/special/vectormath.h	/^static inline Vec4f exp10 (Vec4f const & x) {   \/\/ pow(10,x)$/;"	f
exp10	vector/special/vectormath.h	/^static inline Vec4f exp10 (Vec4f const & x) {$/;"	f
exp10	vector/special/vectormath.h	/^static inline Vec8f exp10 (Vec8f const & x) {   \/\/ pow(10,x)$/;"	f
exp2	vector/special/vectormath.h	/^static inline Vec2d exp2 (Vec2d const & x) {   \/\/ pow(2,x)$/;"	f
exp2	vector/special/vectormath.h	/^static inline Vec2d exp2 (Vec2d const & x) {$/;"	f
exp2	vector/special/vectormath.h	/^static inline Vec4d exp2 (Vec4d const & x) {   \/\/ pow(2,x)$/;"	f
exp2	vector/special/vectormath.h	/^static inline Vec4f exp2 (Vec4f const & x) {   \/\/ pow(2,x)$/;"	f
exp2	vector/special/vectormath.h	/^static inline Vec4f exp2 (Vec4f const & x) {$/;"	f
exp2	vector/special/vectormath.h	/^static inline Vec8f exp2 (Vec8f const & x) {   \/\/ pow(2,x)$/;"	f
exp2	vector/vectorf128.h	/^static inline Vec2d exp2(Vec2q const & n) {$/;"	f
exp2	vector/vectorf128.h	/^static inline Vec4f exp2(Vec4i const & n) {$/;"	f
exp2	vector/vectorf256.h	/^static inline Vec4d exp2(Vec4q const & n) {$/;"	f
exp2	vector/vectorf256.h	/^static inline Vec8f exp2(Vec8i const & n) {$/;"	f
exp2	vector/vectorf256e.h	/^static inline Vec4d exp2(Vec4q const & a) {$/;"	f
exp2	vector/vectorf256e.h	/^static inline Vec8f exp2(Vec8i const & a) {$/;"	f
expand_link	sparseSA.hpp	/^  inline bool expand_link(interval_t &link) {$/;"	f	struct:sparseSA
expm1	vector/special/vectormath.h	/^static inline Vec2d expm1 (Vec2d const & x) {   \/\/ exp(x)-1. Avoids loss of precision if x is close to 1$/;"	f
expm1	vector/special/vectormath.h	/^static inline Vec2d expm1 (Vec2d const & x) {$/;"	f
expm1	vector/special/vectormath.h	/^static inline Vec4d expm1 (Vec4d const & x) {   \/\/ exp(x)-1$/;"	f
expm1	vector/special/vectormath.h	/^static inline Vec4d expm1 (Vec4d const & x) {   \/\/ exp(x)-1. Avoids loss of precision if x is close to 1$/;"	f
expm1	vector/special/vectormath.h	/^static inline Vec4f expm1 (Vec4f const & x) {   \/\/ exp(x)-1. Avoids loss of precision if x is close to 1$/;"	f
expm1	vector/special/vectormath.h	/^static inline Vec4f expm1 (Vec4f const & x) {$/;"	f
expm1	vector/special/vectormath.h	/^static inline Vec8f expm1 (Vec8f const & x) {   \/\/ exp(x)-1$/;"	f
expm1	vector/special/vectormath.h	/^static inline Vec8f expm1 (Vec8f const & x) {   \/\/ exp(x)-1. Avoids loss of precision if x is close to 1$/;"	f
exponent	vector/vectorf128.h	/^static inline Vec2q exponent(Vec2d const & a) {$/;"	f
exponent	vector/vectorf128.h	/^static inline Vec4i exponent(Vec4f const & a) {$/;"	f
exponent	vector/vectorf256.h	/^static inline Vec4q exponent(Vec4d const & a) {$/;"	f
exponent	vector/vectorf256.h	/^static inline Vec8i exponent(Vec8f const & a) {$/;"	f
exponent	vector/vectorf256e.h	/^static inline Vec4q exponent(Vec4d const & a) {$/;"	f
exponent	vector/vectorf256e.h	/^static inline Vec8i exponent(Vec8f const & a) {$/;"	f
extendBackward	MUMmer/src/tigr/postnuc.cc	/^bool extendBackward$/;"	f
extendBackward	MUMmer/src/tigr/postpro.cc	/^bool extendBackward$/;"	f
extendClusters	MUMmer/src/tigr/postnuc.cc	/^void extendClusters$/;"	f
extendClusters	MUMmer/src/tigr/postpro.cc	/^void extendClusters$/;"	f
extendForward	MUMmer/src/tigr/postnuc.cc	/^bool extendForward$/;"	f
extendForward	MUMmer/src/tigr/postpro.cc	/^bool extendForward$/;"	f
extend_high	vector/vectorf128.h	/^static inline Vec2d extend_high (Vec4f const & a) {$/;"	f
extend_high	vector/vectorf256.h	/^static inline Vec4d extend_high (Vec8f const & a) {$/;"	f
extend_high	vector/vectorf256e.h	/^static inline Vec4d extend_high (Vec8f const & a) {$/;"	f
extend_high	vector/vectori128.h	/^static inline Vec2q extend_high (Vec4i const & a) {$/;"	f
extend_high	vector/vectori128.h	/^static inline Vec2uq extend_high (Vec4ui const & a) {$/;"	f
extend_high	vector/vectori128.h	/^static inline Vec4i extend_high (Vec8s const & a) {$/;"	f
extend_high	vector/vectori128.h	/^static inline Vec4ui extend_high (Vec8us const & a) {$/;"	f
extend_high	vector/vectori128.h	/^static inline Vec8s extend_high (Vec16c const & a) {$/;"	f
extend_high	vector/vectori128.h	/^static inline Vec8us extend_high (Vec16uc const & a) {$/;"	f
extend_high	vector/vectori256.h	/^static inline Vec16s extend_high (Vec32c const & a) {$/;"	f
extend_high	vector/vectori256.h	/^static inline Vec16us extend_high (Vec32uc const & a) {$/;"	f
extend_high	vector/vectori256.h	/^static inline Vec4q extend_high (Vec8i const & a) {$/;"	f
extend_high	vector/vectori256.h	/^static inline Vec4uq extend_high (Vec8ui const & a) {$/;"	f
extend_high	vector/vectori256.h	/^static inline Vec8i extend_high (Vec16s const & a) {$/;"	f
extend_high	vector/vectori256.h	/^static inline Vec8ui extend_high (Vec16us const & a) {$/;"	f
extend_high	vector/vectori256e.h	/^static inline Vec16s extend_high (Vec32c const & a) {$/;"	f
extend_high	vector/vectori256e.h	/^static inline Vec16us extend_high (Vec32uc const & a) {$/;"	f
extend_high	vector/vectori256e.h	/^static inline Vec4q extend_high (Vec8i const & a) {$/;"	f
extend_high	vector/vectori256e.h	/^static inline Vec4uq extend_high (Vec8ui const & a) {$/;"	f
extend_high	vector/vectori256e.h	/^static inline Vec8i extend_high (Vec16s const & a) {$/;"	f
extend_high	vector/vectori256e.h	/^static inline Vec8ui extend_high (Vec16us const & a) {$/;"	f
extend_low	vector/vectorf128.h	/^static inline Vec2d extend_low (Vec4f const & a) {$/;"	f
extend_low	vector/vectorf256.h	/^static inline Vec4d extend_low(Vec8f const & a) {$/;"	f
extend_low	vector/vectorf256e.h	/^static inline Vec4d extend_low (Vec8f const & a) {$/;"	f
extend_low	vector/vectori128.h	/^static inline Vec2q extend_low (Vec4i const & a) {$/;"	f
extend_low	vector/vectori128.h	/^static inline Vec2uq extend_low (Vec4ui const & a) {$/;"	f
extend_low	vector/vectori128.h	/^static inline Vec4i extend_low (Vec8s const & a) {$/;"	f
extend_low	vector/vectori128.h	/^static inline Vec4ui extend_low (Vec8us const & a) {$/;"	f
extend_low	vector/vectori128.h	/^static inline Vec8s extend_low (Vec16c const & a) {$/;"	f
extend_low	vector/vectori128.h	/^static inline Vec8us extend_low (Vec16uc const & a) {$/;"	f
extend_low	vector/vectori256.h	/^static inline Vec16s extend_low (Vec32c const & a) {$/;"	f
extend_low	vector/vectori256.h	/^static inline Vec16us extend_low (Vec32uc const & a) {$/;"	f
extend_low	vector/vectori256.h	/^static inline Vec4q extend_low (Vec8i const & a) {$/;"	f
extend_low	vector/vectori256.h	/^static inline Vec4uq extend_low (Vec8ui const & a) {$/;"	f
extend_low	vector/vectori256.h	/^static inline Vec8i extend_low (Vec16s const & a) {$/;"	f
extend_low	vector/vectori256.h	/^static inline Vec8ui extend_low (Vec16us const & a) {$/;"	f
extend_low	vector/vectori256e.h	/^static inline Vec16s extend_low (Vec32c const & a) {$/;"	f
extend_low	vector/vectori256e.h	/^static inline Vec16us extend_low (Vec32uc const & a) {$/;"	f
extend_low	vector/vectori256e.h	/^static inline Vec4q extend_low (Vec8i const & a) {$/;"	f
extend_low	vector/vectori256e.h	/^static inline Vec4uq extend_low (Vec8ui const & a) {$/;"	f
extend_low	vector/vectori256e.h	/^static inline Vec8i extend_low (Vec16s const & a) {$/;"	f
extend_low	vector/vectori256e.h	/^static inline Vec8ui extend_low (Vec16us const & a) {$/;"	f
extract	vector/special/complexvec.h	/^    double extract(uint32_t index) const {$/;"	f	class:Complex2d
extract	vector/special/complexvec.h	/^    double extract(uint32_t index) const {$/;"	f	class:Complex4d
extract	vector/special/complexvec.h	/^    float extract(uint32_t index) const {$/;"	f	class:Complex2f
extract	vector/special/complexvec.h	/^    float extract(uint32_t index) const {$/;"	f	class:Complex4f
extract	vector/special/complexvec.h	/^    float extract(uint32_t index) const {$/;"	f	class:Complex8f
extract	vector/special/quaternion.h	/^    double extract(uint32_t index) const {$/;"	f	class:Quaternion4d
extract	vector/special/quaternion.h	/^    float extract(uint32_t index) const {$/;"	f	class:Quaternion4f
extract	vector/special/vector3d.h	/^    double extract(uint32_t index) const {$/;"	f	class:Vec3d
extract	vector/special/vector3d.h	/^    float extract(uint32_t index) const {$/;"	f	class:Vec3f
extract	vector/vectorf128.h	/^    double extract(uint32_t index) const {$/;"	f	class:Vec2d
extract	vector/vectorf128.h	/^    float extract(uint32_t index) const {$/;"	f	class:Vec4f
extract	vector/vectorf128.h	/^    int extract(uint32_t index) const {$/;"	f	class:Vec2db
extract	vector/vectorf128.h	/^    int extract(uint32_t index) const {$/;"	f	class:Vec4fb
extract	vector/vectorf256.h	/^    double extract(uint32_t index) const {$/;"	f	class:Vec4d
extract	vector/vectorf256.h	/^    float extract(uint32_t index) const {$/;"	f	class:Vec8f
extract	vector/vectorf256.h	/^    int extract(uint32_t index) const {$/;"	f	class:Vec4db
extract	vector/vectorf256.h	/^    int extract(uint32_t index) const {$/;"	f	class:Vec8fb
extract	vector/vectorf256e.h	/^    double extract(uint32_t index) const {$/;"	f	class:Vec4d
extract	vector/vectorf256e.h	/^    float extract(uint32_t index) const {$/;"	f	class:Vec8f
extract	vector/vectorf256e.h	/^    int extract(uint32_t index) const {$/;"	f	class:Vec4db
extract	vector/vectorf256e.h	/^    int extract(uint32_t index) const {$/;"	f	class:Vec8fb
extract	vector/vectori128.h	/^    int16_t extract(uint32_t index) const {$/;"	f	class:Vec8s
extract	vector/vectori128.h	/^    int32_t extract(uint32_t index) const {$/;"	f	class:Vec4i
extract	vector/vectori128.h	/^    int64_t extract(uint32_t index) const {$/;"	f	class:Vec2q
extract	vector/vectori128.h	/^    int8_t extract(uint32_t index) const {$/;"	f	class:Vec16c
extract	vector/vectori128.h	/^    uint16_t extract(uint32_t index) const {$/;"	f	class:Vec8us
extract	vector/vectori128.h	/^    uint32_t extract(uint32_t index) const {$/;"	f	class:Vec4ui
extract	vector/vectori128.h	/^    uint64_t extract(uint32_t index) const {$/;"	f	class:Vec2uq
extract	vector/vectori128.h	/^    uint8_t extract(uint32_t index) const {$/;"	f	class:Vec16uc
extract	vector/vectori256.h	/^    int16_t extract(uint32_t index) const {$/;"	f	class:Vec16s
extract	vector/vectori256.h	/^    int32_t extract(uint32_t index) const {$/;"	f	class:Vec8i
extract	vector/vectori256.h	/^    int64_t extract(uint32_t index) const {$/;"	f	class:Vec4q
extract	vector/vectori256.h	/^    int8_t extract(uint32_t index) const {$/;"	f	class:Vec32c
extract	vector/vectori256.h	/^    uint16_t extract(uint32_t index) const {$/;"	f	class:Vec16us
extract	vector/vectori256.h	/^    uint32_t extract(uint32_t index) const {$/;"	f	class:Vec8ui
extract	vector/vectori256.h	/^    uint64_t extract(uint32_t index) const {$/;"	f	class:Vec4uq
extract	vector/vectori256.h	/^    uint8_t extract(uint32_t index) const {$/;"	f	class:Vec32uc
extract	vector/vectori256e.h	/^    int16_t extract(uint32_t index) const {$/;"	f	class:Vec16s
extract	vector/vectori256e.h	/^    int32_t extract(uint32_t index) const {$/;"	f	class:Vec8i
extract	vector/vectori256e.h	/^    int64_t extract(uint32_t index) const {$/;"	f	class:Vec4q
extract	vector/vectori256e.h	/^    int8_t extract(uint32_t index) const {$/;"	f	class:Vec32c
extract	vector/vectori256e.h	/^    uint16_t extract(uint32_t index) const {$/;"	f	class:Vec16us
extract	vector/vectori256e.h	/^    uint32_t extract(uint32_t index) const {$/;"	f	class:Vec8ui
extract	vector/vectori256e.h	/^    uint64_t extract(uint32_t index) const {$/;"	f	class:Vec4uq
extract	vector/vectori256e.h	/^    uint8_t extract(uint32_t index) const {$/;"	f	class:Vec32uc
fileallocated	MUMmer/src/kurtz/libbasedir/space.c	/^  char *fileallocated; \/\/ the filenames where the block was allocated$/;"	m	struct:__anon24	file:
filelength	MUMmer/src/kurtz/libbasedir/types.h	/^  Uint filelength;      \/\/ the length of the corresponding file$/;"	m	struct:__anon17
filemapped	MUMmer/src/kurtz/libbasedir/mapfile.c	/^static char *filemapped[MAXMAPPEDFILES] = {NULL};  $/;"	v	file:
filenamebuf	MUMmer/src/kurtz/libbasedir/types.h	/^  char *filenamebuf;    \/\/ pointer to a copy of a filename$/;"	m	struct:__anon17
filter	MUMmer/docs/web/manual/index.html	/^<h4><a name="filter" id="filter"><\/a>5.4.1. delta-filter<\/h4>$/;"	a
finalprogress	MUMmer/src/kurtz/streesrc/stree.c	/^\/*@unused@*\/ static void finalprogress(\/*@unused@*\/ void *info)$/;"	f	file:
finalprogress	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^void finalprogress(void *info)$/;"	f
findMAM	sparseSA.cpp	/^void sparseSA::findMAM(string &P, int chunk, int chunks, vector<match_t> &matches, int min_len, long& currentCount, bool print) {$/;"	f	class:sparseSA
findMEM	sparseSA.cpp	/^void sparseSA::findMEM(long k, string &P, vector<match_t> &matches, int min_len, bool print) {$/;"	f	class:sparseSA
find_Lmaximal	sparseSA.cpp	/^void sparseSA::find_Lmaximal(string &P, long prefix, long i, long len, vector<match_t> &matches, int min_len, bool print) {$/;"	f	class:sparseSA
findmaxmatches	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^Sint findmaxmatches(Suffixtree *stree,$/;"	f
findmaxmatchesonbothstrands	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^static Sint findmaxmatchesonbothstrands(void *info,Uint seqnum,$/;"	f	file:
findmumcandidates	MUMmer/src/kurtz/mm3src/findmumcand.c	/^Sint findmumcandidates(Suffixtree *stree,$/;"	f
findprefixpathfromnodestree	MUMmer/src/kurtz/streesrc/scanpref.c	/^\/*@null@*\/SYMBOL *findprefixpathfromnodestree(Suffixtree *stree,$/;"	f
findprefixpathfromnodestree	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^SYMBOL *findprefixpathfromnodestree(Suffixtree *stree,$/;"	f
findprefixpathstree	MUMmer/src/kurtz/streesrc/scanpref.c	/^\/*@null@*\/ SYMBOL *findprefixpathstree(Suffixtree *stree,$/;"	f
firstbranchingnode	MUMmer/src/kurtz/streesrc/iterator.c	/^\/*@null@*\/ Bref firstbranchingnode(Suffixtree *stree)$/;"	f
firstchild	MUMmer/src/kurtz/streesrc/streetyp.h	/^  Reference firstchild,     \/\/ the reference to the first child$/;"	m	struct:__anon8
firstleaf	MUMmer/src/kurtz/streesrc/iterator.c	/^Lref firstleaf(Suffixtree *stree)$/;"	f
firstnode	MUMmer/src/kurtz/streesrc/iterator.c	/^\/*@null@*\/ Reference *firstnode(Suffixtree *stree,Reference *refspace)$/;"	f
firstnodedfs	MUMmer/src/kurtz/streesrc/iterator.c	/^Reference *firstnodedfs(Suffixtree *stree,DFSstate *dfsstate,$/;"	f
firstnotallocated	MUMmer/src/kurtz/streesrc/streetyp.h	/^       *firstnotallocated,    \/\/ refers to the last address, such that at$/;"	m	struct:Suffixtreetype
firstptr	MUMmer/src/kurtz/streesrc/streetyp.h	/^  SYMBOL *firstptr;     \/\/ pointer to first character of edge label$/;"	m	struct:__anon9
firstsucc	MUMmer/src/kurtz/streesrc/iterator.c	/^\/*@null@*\/ Reference *firstsucc(Suffixtree *stree,Bref bptr,$/;"	f
flag1to1	MUMmer/src/tigr/delta.cc	/^void DeltaGraph_t::flag1to1(float epsilon, float maxolap)$/;"	f	class:DeltaGraph_t
flagGLIS	MUMmer/src/tigr/delta.cc	/^void DeltaGraph_t::flagGLIS (float epsilon)$/;"	f	class:DeltaGraph_t
flagGOOD	MUMmer/src/tigr/delta.cc	/^void DeltaGraph_t::flagGOOD()$/;"	f	class:DeltaGraph_t
flagLAS	MUMmer/src/tigr/show-coords.cc	/^void flagLAS$/;"	f
flagMtoM	MUMmer/src/tigr/delta.cc	/^void DeltaGraph_t::flagMtoM(float epsilon, float maxolap)$/;"	f	class:DeltaGraph_t
flagQLIS	MUMmer/src/tigr/delta.cc	/^void DeltaGraph_t::flagQLIS (float epsilon, float maxolap, bool flagbad)$/;"	f	class:DeltaGraph_t
flagRLIS	MUMmer/src/tigr/delta.cc	/^void DeltaGraph_t::flagRLIS (float epsilon, float maxolap, bool flagbad)$/;"	f	class:DeltaGraph_t
flagScore	MUMmer/src/tigr/delta.cc	/^void DeltaGraph_t::flagScore (long minlen, float minidy)$/;"	f	class:DeltaGraph_t
flagUNIQ	MUMmer/src/tigr/delta.cc	/^void DeltaGraph_t::flagUNIQ (float minuniq)$/;"	f	class:DeltaGraph_t
floor	vector/vectorf128.h	/^static inline Vec2d floor(Vec2d const & a) {$/;"	f
floor	vector/vectorf128.h	/^static inline Vec4f floor(Vec4f const & a) {$/;"	f
floor	vector/vectorf256.h	/^static inline Vec4d floor(Vec4d const & a) {$/;"	f
floor	vector/vectorf256.h	/^static inline Vec8f floor(Vec8f const & a) {$/;"	f
floor	vector/vectorf256e.h	/^static inline Vec4d floor(Vec4d const & a) {$/;"	f
floor	vector/vectorf256e.h	/^static inline Vec8f floor(Vec8f const & a) {$/;"	f
flushAlignments	MUMmer/src/tigr/postnuc.cc	/^void flushAlignments$/;"	f
flushAlignments	MUMmer/src/tigr/postpro.cc	/^void flushAlignments$/;"	f
flushSyntenys	MUMmer/src/tigr/postnuc.cc	/^void flushSyntenys$/;"	f
flushSyntenys	MUMmer/src/tigr/postpro.cc	/^void flushSyntenys$/;"	f
format_mgaps	MUMmer/mapview	/^sub format_mgaps{$/;"	s
format_mgaps	MUMmer/scripts/mapview.pl	/^sub format_mgaps{$/;"	s
forward	MUMmer/src/kurtz/mm3src/maxmatdef.h	/^       forward,                 \/\/ compute matches on forward strand$/;"	m	struct:__anon4
forward	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^       forward,                \/\/ compute forward matches$/;"	m	struct:__anon3	file:
forwards	mummer.cpp	/^bool forwards = true;$/;"	v
fourcolumn	MUMmer/src/kurtz/mm3src/maxmatdef.h	/^       fourcolumn,              \/\/ always use 4 column format$/;"	m	struct:__anon4
fourcolumn	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^       fourcolumn,             \/\/ is option \\texttt{-F} on?$/;"	m	struct:__anon3	file:
fraction	vector/vectorf128.h	/^static inline Vec2d fraction(Vec2d const & a) {$/;"	f
fraction	vector/vectorf128.h	/^static inline Vec4f fraction(Vec4f const & a) {$/;"	f
fraction	vector/vectorf256.h	/^static inline Vec4d fraction(Vec4d const & a) {$/;"	f
fraction	vector/vectorf256.h	/^static inline Vec8f fraction(Vec8f const & a) {$/;"	f
fraction	vector/vectorf256e.h	/^static inline Vec4d fraction(Vec4d const & a) {$/;"	f
fraction	vector/vectorf256e.h	/^static inline Vec8f fraction(Vec8f const & a) {$/;"	f
frameA	MUMmer/src/tigr/postpro.cc	/^  int frameA;                \/\/ the reference sequence frame (1-6)$/;"	m	struct:Alignment	file:
frameA	MUMmer/src/tigr/postpro.cc	/^  int frameA;                \/\/ the reference sequence frame (1-6)$/;"	m	struct:Cluster	file:
frameB	MUMmer/src/tigr/postpro.cc	/^  int frameB;                \/\/ the query sequence frame$/;"	m	struct:Alignment	file:
frameB	MUMmer/src/tigr/postpro.cc	/^  int frameB;                \/\/ the query sequence frame$/;"	m	struct:Cluster	file:
freemultiseq	MUMmer/src/kurtz/libbasedir/multiseq.c	/^void freemultiseq(Multiseq *multiseq)$/;"	f
freespaceviaptr	MUMmer/src/kurtz/libbasedir/space.c	/^void freespaceviaptr(char *file,Uint line,void *ptr)$/;"	f
freestree	MUMmer/src/kurtz/streesrc/construct.c	/^void freestree(Suffixtree *stree)$/;"	f
freestree	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^void freestree(Suffixtree *stree)$/;"	f
frmQ	MUMmer/src/tigr/delta.hh	/^  int frmQ, frmR;             \/\/!< reading frame$/;"	m	struct:DeltaEdgelet_t
frmR	MUMmer/src/tigr/delta.hh	/^  int frmQ, frmR;             \/\/!< reading frame$/;"	m	struct:DeltaEdgelet_t
from	MUMmer/src/tigr/delta.cc	/^  long from;$/;"	m	struct:LIS_t	file:
from	MUMmer/src/tigr/show-coords.cc	/^  long int from, wfrom;$/;"	m	struct:LASstats	file:
from_set	sparseSA.hpp	/^  void from_set(long hit, long &seq, long &seqpos) {$/;"	f	struct:sparseSA
gaps	MUMmer/docs/web/manual/index.html	/^<h4><a name="gaps"><\/a>5.2.1. gaps<\/h4>$/;"	a
gapsoutput	MUMmer/docs/web/manual/index.html	/^<h5><a name="gapsoutput"><\/a>Output format<\/h5>$/;"	a
generalcounter	MUMmer/src/kurtz/streesrc/streetyp.h	/^  void *generalcounter;$/;"	m	struct:Suffixtreetype
generateDelta	MUMmer/src/tigr/sw_align.cc	/^static void generateDelta$/;"	f	file:
generateWarnings	MUMmer/src/tigr/show-coords.cc	/^void generateWarnings$/;"	f
getAlignmentQryCoverage	MUMmer/src/tigr/show-tiling.cc	/^float getAlignmentQryCoverage$/;"	f
getBanding	MUMmer/src/tigr/sw_align.hh	/^inline int getBanding()$/;"	f
getBreakLen	MUMmer/src/tigr/sw_align.hh	/^inline int getBreakLen$/;"	f
getDataType	MUMmer/src/tigr/delta.hh	/^  const std::string & getDataType ( ) const$/;"	f	class:DeltaReader_t
getDebugLevel	MUMmer/scripts/Foundation.pm	/^   sub getDebugLevel() {$/;"	s
getDeltaPath	MUMmer/src/tigr/delta.hh	/^  const std::string & getDeltaPath ( ) const$/;"	f	class:DeltaReader_t
getEdgeCount	MUMmer/src/tigr/delta.cc	/^long DeltaGraph_t::getEdgeCount()$/;"	f	class:DeltaGraph_t
getEdgeletCount	MUMmer/src/tigr/delta.cc	/^long DeltaGraph_t::getEdgeletCount()$/;"	f	class:DeltaGraph_t
getErrorFile	MUMmer/scripts/Foundation.pm	/^   sub getErrorFile() {$/;"	s
getFilelabelDate	MUMmer/scripts/Foundation.pm	/^   sub getFilelabelDate(;@) {$/;"	s
getForwardTargetCluster	MUMmer/src/tigr/postnuc.cc	/^vector<Cluster>::iterator getForwardTargetCluster$/;"	f
getForwardTargetCluster	MUMmer/src/tigr/postpro.cc	/^vector<Cluster>::iterator getForwardTargetCluster$/;"	f
getISODate	MUMmer/scripts/Foundation.pm	/^   sub getISODate(;@) {$/;"	s
getLogFile	MUMmer/scripts/Foundation.pm	/^   sub getLogFile() {$/;"	s
getLogfileDate	MUMmer/scripts/Foundation.pm	/^   sub getLogfileDate(;@) {$/;"	s
getMatrixType	MUMmer/src/tigr/sw_align.hh	/^inline int getMatrixType$/;"	f
getMySQLDate	MUMmer/scripts/Foundation.pm	/^   sub getMySQLDate(;@) {$/;"	s
getNodeCount	MUMmer/src/tigr/delta.cc	/^long DeltaGraph_t::getNodeCount()$/;"	f	class:DeltaGraph_t
getProgramInfo	MUMmer/scripts/Foundation.pm	/^   sub getProgramInfo($) {$/;"	s
getQueryPath	MUMmer/src/tigr/delta.hh	/^  const std::string & getQueryPath ( ) const$/;"	f	class:DeltaReader_t
getRecord	MUMmer/src/tigr/delta.hh	/^  const DeltaRecord_t & getRecord ( ) const$/;"	f	class:DeltaReader_t
getReferencePath	MUMmer/src/tigr/delta.hh	/^  const std::string & getReferencePath ( ) const$/;"	f	class:DeltaReader_t
getReverseTargetAlignment	MUMmer/src/tigr/postnuc.cc	/^vector<Alignment>::iterator getReverseTargetAlignment$/;"	f
getReverseTargetAlignment	MUMmer/src/tigr/postpro.cc	/^vector<Alignment>::iterator getReverseTargetAlignment$/;"	f
getSubsetIdentity	MUMmer/src/tigr/show-tiling.cc	/^float getSubsetIdentity$/;"	f
getSubsetQryCoverage	MUMmer/src/tigr/show-tiling.cc	/^float getSubsetQryCoverage$/;"	f
getSubsetQrySyntenyCoverage	MUMmer/src/tigr/show-tiling.cc	/^float getSubsetQrySyntenyCoverage$/;"	f
getSybaseDate	MUMmer/scripts/Foundation.pm	/^   sub getSybaseDate(;@) {$/;"	s
getVersionInfo	MUMmer/scripts/Foundation.pm	/^   sub getVersionInfo() {$/;"	s
get_bit	vector/vectori128.h	/^    int get_bit(uint32_t index) const {$/;"	f	class:Vec128b
get_bit	vector/vectori256.h	/^    int get_bit(uint32_t index) const {$/;"	f	class:Vec256b
get_bit	vector/vectori256e.h	/^    int get_bit(uint32_t index) const {$/;"	f	class:Vec256b
get_cds_ends	MUMmer/mapview	/^sub get_cds_ends{$/;"	s
get_cds_ends	MUMmer/scripts/mapview.pl	/^sub get_cds_ends{$/;"	s
get_control_word	vector/vectorf128.h	/^static inline uint32_t get_control_word() {$/;"	f
get_high	vector/special/complexvec.h	/^    Complex2d get_high() const {$/;"	f	class:Complex4d
get_high	vector/special/complexvec.h	/^    Complex2f get_high() const {$/;"	f	class:Complex4f
get_high	vector/special/complexvec.h	/^    Complex4f get_high() const {$/;"	f	class:Complex8f
get_high	vector/special/quaternion.h	/^    Complex2d get_high() const {$/;"	f	class:Quaternion4d
get_high	vector/special/quaternion.h	/^    Complex2f get_high() const {$/;"	f	class:Quaternion4f
get_high	vector/vectorf256.h	/^    Vec2d get_high() const {$/;"	f	class:Vec4d
get_high	vector/vectorf256.h	/^    Vec2db get_high() const {$/;"	f	class:Vec4db
get_high	vector/vectorf256.h	/^    Vec4f get_high() const {$/;"	f	class:Vec8f
get_high	vector/vectorf256.h	/^    Vec4fb get_high() const {$/;"	f	class:Vec8fb
get_high	vector/vectorf256e.h	/^    Vec2d get_high() const {$/;"	f	class:Vec4d
get_high	vector/vectorf256e.h	/^    Vec2db get_high() const {$/;"	f	class:Vec4db
get_high	vector/vectorf256e.h	/^    Vec4f get_high() const {$/;"	f	class:Vec8f
get_high	vector/vectorf256e.h	/^    Vec4fb get_high() const {$/;"	f	class:Vec8fb
get_high	vector/vectorf256e.h	/^    __m128 get_high() const {          \/\/ get high half$/;"	f	class:Vec256fe
get_high	vector/vectorf256e.h	/^    __m128d get_high() const {         \/\/ get high half$/;"	f	class:Vec256de
get_high	vector/vectori256.h	/^    Vec128b get_high() const {$/;"	f	class:Vec256b
get_high	vector/vectori256.h	/^    Vec16c get_high() const {$/;"	f	class:Vec32c
get_high	vector/vectori256.h	/^    Vec16uc get_high() const {$/;"	f	class:Vec32uc
get_high	vector/vectori256.h	/^    Vec2q get_high() const {$/;"	f	class:Vec4q
get_high	vector/vectori256.h	/^    Vec2uq get_high() const {$/;"	f	class:Vec4uq
get_high	vector/vectori256.h	/^    Vec4i get_high() const {$/;"	f	class:Vec8i
get_high	vector/vectori256.h	/^    Vec4ui get_high() const {$/;"	f	class:Vec8ui
get_high	vector/vectori256.h	/^    Vec8s get_high() const {$/;"	f	class:Vec16s
get_high	vector/vectori256.h	/^    Vec8us get_high() const {$/;"	f	class:Vec16us
get_high	vector/vectori256e.h	/^    Vec128b get_high() const {$/;"	f	class:Vec256b
get_high	vector/vectori256e.h	/^    Vec16c get_high() const {$/;"	f	class:Vec32c
get_high	vector/vectori256e.h	/^    Vec16uc get_high() const {$/;"	f	class:Vec32uc
get_high	vector/vectori256e.h	/^    Vec2q get_high() const {$/;"	f	class:Vec4q
get_high	vector/vectori256e.h	/^    Vec2uq get_high() const {$/;"	f	class:Vec4uq
get_high	vector/vectori256e.h	/^    Vec4i get_high() const {$/;"	f	class:Vec8i
get_high	vector/vectori256e.h	/^    Vec4ui get_high() const {$/;"	f	class:Vec8ui
get_high	vector/vectori256e.h	/^    Vec8s get_high() const {$/;"	f	class:Vec16s
get_high	vector/vectori256e.h	/^    Vec8us get_high() const {$/;"	f	class:Vec16us
get_high	vector/vectori256e.h	/^    __m128i get_high() const {          \/\/ get high half$/;"	f	class:Vec256ie
get_low	vector/special/complexvec.h	/^    Complex2d get_low() const {$/;"	f	class:Complex4d
get_low	vector/special/complexvec.h	/^    Complex2f get_low() const {$/;"	f	class:Complex4f
get_low	vector/special/complexvec.h	/^    Complex4f get_low() const {$/;"	f	class:Complex8f
get_low	vector/special/quaternion.h	/^    Complex2d get_low() const {$/;"	f	class:Quaternion4d
get_low	vector/special/quaternion.h	/^    Complex2f get_low() const {$/;"	f	class:Quaternion4f
get_low	vector/vectorf256.h	/^    Vec2d get_low() const {$/;"	f	class:Vec4d
get_low	vector/vectorf256.h	/^    Vec2db get_low() const {$/;"	f	class:Vec4db
get_low	vector/vectorf256.h	/^    Vec4f get_low() const {$/;"	f	class:Vec8f
get_low	vector/vectorf256.h	/^    Vec4fb get_low() const {$/;"	f	class:Vec8fb
get_low	vector/vectorf256e.h	/^    Vec2d get_low() const {$/;"	f	class:Vec4d
get_low	vector/vectorf256e.h	/^    Vec2db get_low() const {$/;"	f	class:Vec4db
get_low	vector/vectorf256e.h	/^    Vec4f get_low() const {$/;"	f	class:Vec8f
get_low	vector/vectorf256e.h	/^    Vec4fb get_low() const {$/;"	f	class:Vec8fb
get_low	vector/vectorf256e.h	/^    __m128 get_low() const {           \/\/ get low half$/;"	f	class:Vec256fe
get_low	vector/vectorf256e.h	/^    __m128d get_low() const {          \/\/ get low half$/;"	f	class:Vec256de
get_low	vector/vectori256.h	/^    Vec128b get_low() const {$/;"	f	class:Vec256b
get_low	vector/vectori256.h	/^    Vec16c get_low() const {$/;"	f	class:Vec32c
get_low	vector/vectori256.h	/^    Vec16uc get_low() const {$/;"	f	class:Vec32uc
get_low	vector/vectori256.h	/^    Vec2q get_low() const {$/;"	f	class:Vec4q
get_low	vector/vectori256.h	/^    Vec2uq get_low() const {$/;"	f	class:Vec4uq
get_low	vector/vectori256.h	/^    Vec4i get_low() const {$/;"	f	class:Vec8i
get_low	vector/vectori256.h	/^    Vec4ui get_low() const {$/;"	f	class:Vec8ui
get_low	vector/vectori256.h	/^    Vec8s get_low() const {$/;"	f	class:Vec16s
get_low	vector/vectori256.h	/^    Vec8us get_low() const {$/;"	f	class:Vec16us
get_low	vector/vectori256e.h	/^    Vec128b get_low() const {$/;"	f	class:Vec256b
get_low	vector/vectori256e.h	/^    Vec16c get_low() const {$/;"	f	class:Vec32c
get_low	vector/vectori256e.h	/^    Vec16uc get_low() const {$/;"	f	class:Vec32uc
get_low	vector/vectori256e.h	/^    Vec2q get_low() const {$/;"	f	class:Vec4q
get_low	vector/vectori256e.h	/^    Vec2uq get_low() const {$/;"	f	class:Vec4uq
get_low	vector/vectori256e.h	/^    Vec4i get_low() const {$/;"	f	class:Vec8i
get_low	vector/vectori256e.h	/^    Vec4ui get_low() const {$/;"	f	class:Vec8ui
get_low	vector/vectori256e.h	/^    Vec8s get_low() const {$/;"	f	class:Vec16s
get_low	vector/vectori256e.h	/^    Vec8us get_low() const {$/;"	f	class:Vec16us
get_low	vector/vectori256e.h	/^    __m128i get_low() const {           \/\/ get low half$/;"	f	class:Vec256ie
get_ref_len	MUMmer/mapview	/^sub get_ref_len{ $/;"	s
get_ref_len	MUMmer/scripts/mapview.pl	/^sub get_ref_len{ $/;"	s
get_utrcds_ends	MUMmer/mapview	/^sub get_utrcds_ends{$/;"	s
get_utrcds_ends	MUMmer/scripts/mapview.pl	/^sub get_utrcds_ends{$/;"	s
get_utrcds_info	MUMmer/mapview	/^sub get_utrcds_info{$/;"	s
get_utrcds_info	MUMmer/scripts/mapview.pl	/^sub get_utrcds_info{$/;"	s
get_x	vector/special/vector3d.h	/^    double get_x() const {$/;"	f	class:Vec3d
get_x	vector/special/vector3d.h	/^    float get_x() const {$/;"	f	class:Vec3f
get_y	vector/special/vector3d.h	/^    double get_y() const {$/;"	f	class:Vec3d
get_y	vector/special/vector3d.h	/^    float get_y() const {$/;"	f	class:Vec3f
get_z	vector/special/vector3d.h	/^    double get_z() const {$/;"	f	class:Vec3d
get_z	vector/special/vector3d.h	/^    float get_z() const {$/;"	f	class:Vec3f
getbranchinfostree	MUMmer/src/kurtz/streesrc/access.c	/^void getbranchinfostree(Suffixtree *stree,Uint whichinfo,$/;"	f
getbranchinfostree	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^void getbranchinfostree(Suffixtree *stree,Uint whichinfo,$/;"	f
getclockticks	MUMmer/src/kurtz/libbasedir/clock.c	/^Uint getclockticks(void)$/;"	f
getdbgfp	MUMmer/src/kurtz/libbasedir/debug.c	/^FILE *getdbgfp(void)$/;"	f
getdebuglevel	MUMmer/src/kurtz/libbasedir/debug.c	/^Sint getdebuglevel(void)$/;"	f
getdebugwhere	MUMmer/src/kurtz/libbasedir/debug.c	/^BOOL getdebugwhere(void)$/;"	f
getdepth	MUMmer/src/kurtz/streesrc/streelarge.h	/^static Uint getdepth(Uint *btptr)$/;"	f
getdepth	MUMmer/src/kurtz/streesrc/streesmall.h	/^static Uint getdepth(Uint *btptr)$/;"	f
geterror	MUMmer/src/kurtz/libbasedir/seterror.c	/^Sint geterror(void)$/;"	f
getheadstringstree	MUMmer/src/kurtz/streesrc/access.c	/^void getheadstringstree(Suffixtree *stree,Stringtype *str)$/;"	f
getheadstringstree	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^void getheadstringstree(Suffixtree *stree,Stringtype *str)$/;"	f
getlargelinkconstruction	MUMmer/src/kurtz/streesrc/construct.c	/^static Uint getlargelinkconstruction(Suffixtree *stree)$/;"	f	file:
getlargelinkstree	MUMmer/src/kurtz/streesrc/access.c	/^Uint getlargelinkstree(Suffixtree *stree,Bref btptr,Uint depth)$/;"	f
getlargelinkstree	MUMmer/src/kurtz/streesrc/access.c	/^Uint getlargelinkstree(\/*@unused@*\/ Suffixtree *stree,Bref btptr,Uint depth)$/;"	f
getleafcountstree	MUMmer/src/kurtz/streesrc/addleafcount.c	/^Uint getleafcountstree(Suffixtree *stree,Bref nodeptr)$/;"	f
getleafcountstree	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^Uint getleafcountstree(Suffixtree *stree,Bref nodeptr)$/;"	f
getleafinfostree	MUMmer/src/kurtz/streesrc/access.c	/^void getleafinfostree(Suffixtree *stree,Leafinfo *leafinfo,Lref lptr)$/;"	f
getleafinfostree	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^void getleafinfostree(Suffixtree *stree,Leafinfo *leafinfo,$/;"	f
getm	vector/vectori128.h	/^    __m128i getm() const {                                 \/\/ get multiplier$/;"	f	class:Divisor_i
getm	vector/vectori128.h	/^    __m128i getm() const {                                 \/\/ get multiplier$/;"	f	class:Divisor_s
getm	vector/vectori128.h	/^    __m128i getm() const {                                 \/\/ get multiplier$/;"	f	class:Divisor_ui
getm	vector/vectori128.h	/^    __m128i getm() const {                                 \/\/ get multiplier$/;"	f	class:Divisor_us
getmaxdesclen	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^static Sint getmaxdesclen(Multiseq *multiseq)$/;"	f	file:
getmaxmatinput	MUMmer/src/kurtz/mm3src/maxmatinp.c	/^Sint getmaxmatinput (Multiseq *subjectmultiseq,$/;"	f
getmaxtextlenstree	MUMmer/src/kurtz/streesrc/access.c	/^Uint getmaxtextlenstree(void)$/;"	f
getmaxtextlenstree	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^Uint getmaxtextlenstree(void)$/;"	f
getoptindent	MUMmer/src/kurtz/libbasedir/procopt.c	/^static Uint getoptindent(Sint *excludetab,OptionDescription *opt,Uint numofopt)$/;"	f	file:
getrecordnum	MUMmer/src/kurtz/libbasedir/multiseq.c	/^Sint getrecordnum(Uint *recordseps,Uint numofrecords,Uint totalwidth,$/;"	f
getruntime	MUMmer/src/kurtz/libbasedir/clock.c	/^double getruntime(void)$/;"	f
gets1	vector/vectori128.h	/^    __m128i gets1() const {                                \/\/ get shift count 1$/;"	f	class:Divisor_ui
gets1	vector/vectori128.h	/^    __m128i gets1() const {                                \/\/ get shift count 1$/;"	f	class:Divisor_us
gets1	vector/vectori128.h	/^    __m128i gets1() const {                                \/\/ get shift count$/;"	f	class:Divisor_i
gets1	vector/vectori128.h	/^    __m128i gets1() const {                                \/\/ get shift count$/;"	f	class:Divisor_s
gets2	vector/vectori128.h	/^    __m128i gets2() const {                                \/\/ get shift count 2$/;"	f	class:Divisor_ui
gets2	vector/vectori128.h	/^    __m128i gets2() const {                                \/\/ get shift count 2$/;"	f	class:Divisor_us
getseqnum	MUMmer/src/kurtz/libbasedir/multiseq.c	/^Sint getseqnum(Multiseq *multiseq,Uint position)$/;"	f
getsign	vector/vectori128.h	/^    __m128i getsign() const {                              \/\/ get sign of divisor$/;"	f	class:Divisor_i
getsign	vector/vectori128.h	/^    __m128i getsign() const {                              \/\/ get sign of divisor$/;"	f	class:Divisor_s
getspacepeak	MUMmer/src/kurtz/libbasedir/space.c	/^Uint getspacepeak(void)$/;"	f
h	qsufsort.c	/^   h;                           \/* length of already-sorted prefixes.*\/$/;"	v	file:
hasChild	sparseSA.hpp	/^  bool hasChild;$/;"	m	struct:sparseSA
hasFMA3	vector/instrset_detect.cpp	/^bool hasFMA3(void) {$/;"	f
hasFMA4	vector/instrset_detect.cpp	/^bool hasFMA4(void) {$/;"	f
hasSufLink	sparseSA.hpp	/^  bool hasSufLink;$/;"	m	struct:sparseSA
hasXOP	vector/instrset_detect.cpp	/^bool hasXOP(void) {$/;"	f
headend	MUMmer/src/kurtz/streesrc/streetyp.h	/^         *headend,            \/\/ of the head location \\((\\overline{u},v)\\). $/;"	m	struct:Suffixtreetype
headnode	MUMmer/src/kurtz/streesrc/streetyp.h	/^       *headnode,             \/\/ left component of head location$/;"	m	struct:Suffixtreetype
headnodedepth	MUMmer/src/kurtz/streesrc/streetyp.h	/^       headnodedepth,         \/\/ the depth of the headnode$/;"	m	struct:Suffixtreetype
headposition	MUMmer/src/kurtz/streesrc/streetyp.h	/^  Uint depth, headposition;$/;"	m	struct:__anon11
headposition	MUMmer/src/kurtz/streesrc/streetyp.h	/^  Uint headposition,        \/\/ the head position of the branching node$/;"	m	struct:__anon8
headstart	MUMmer/src/kurtz/streesrc/streetyp.h	/^  SYMBOL *headstart,          \/\/ these references represent the right component$/;"	m	struct:Suffixtreetype
hi	MUMmer/src/tigr/combineMUMs.cc	/^   long int  lo, hi;$/;"	m	struct:s_Cover_t	file:
hiQ	MUMmer/src/tigr/delta.hh	/^  long loQ, hiQ, loR, hiR;    \/\/!< alignment bounds$/;"	m	struct:DeltaEdgelet_t
hiQ2R	MUMmer/src/tigr/delta.hh	/^  long hiQ2R() const$/;"	f	struct:DeltaEdgelet_t
hiR	MUMmer/src/tigr/delta.hh	/^  long loQ, hiQ, loR, hiR;    \/\/!< alignment bounds$/;"	m	struct:DeltaEdgelet_t
hiR2Q	MUMmer/src/tigr/delta.hh	/^  long hiR2Q() const$/;"	f	struct:DeltaEdgelet_t
horizontal_add	vector/vectorf128.h	/^static inline double horizontal_add (Vec2d const & a) {$/;"	f
horizontal_add	vector/vectorf128.h	/^static inline float horizontal_add (Vec4f const & a) {$/;"	f
horizontal_add	vector/vectorf256.h	/^static inline double horizontal_add (Vec4d const & a) {$/;"	f
horizontal_add	vector/vectorf256.h	/^static inline float horizontal_add (Vec8f const & a) {$/;"	f
horizontal_add	vector/vectorf256e.h	/^static inline double horizontal_add (Vec4d const & a) {$/;"	f
horizontal_add	vector/vectorf256e.h	/^static inline float horizontal_add (Vec8f const & a) {$/;"	f
horizontal_add	vector/vectori128.h	/^static inline int32_t horizontal_add (Vec16c const & a) {$/;"	f
horizontal_add	vector/vectori128.h	/^static inline int32_t horizontal_add (Vec4i const & a) {$/;"	f
horizontal_add	vector/vectori128.h	/^static inline int32_t horizontal_add (Vec8s const & a) {$/;"	f
horizontal_add	vector/vectori128.h	/^static inline int64_t horizontal_add (Vec2q const & a) {$/;"	f
horizontal_add	vector/vectori128.h	/^static inline uint32_t horizontal_add (Vec16uc const & a) {$/;"	f
horizontal_add	vector/vectori128.h	/^static inline uint32_t horizontal_add (Vec4ui const & a) {$/;"	f
horizontal_add	vector/vectori128.h	/^static inline uint32_t horizontal_add (Vec8us const & a) {$/;"	f
horizontal_add	vector/vectori128.h	/^static inline uint64_t horizontal_add (Vec2uq const & a) {$/;"	f
horizontal_add	vector/vectori256.h	/^static inline int32_t horizontal_add (Vec16s const & a) {$/;"	f
horizontal_add	vector/vectori256.h	/^static inline int32_t horizontal_add (Vec8i const & a) {$/;"	f
horizontal_add	vector/vectori256.h	/^static inline int64_t horizontal_add (Vec4q const & a) {$/;"	f
horizontal_add	vector/vectori256.h	/^static inline uint32_t horizontal_add (Vec16us const & a) {$/;"	f
horizontal_add	vector/vectori256.h	/^static inline uint32_t horizontal_add (Vec32c const & a) {$/;"	f
horizontal_add	vector/vectori256.h	/^static inline uint32_t horizontal_add (Vec32uc const & a) {$/;"	f
horizontal_add	vector/vectori256.h	/^static inline uint32_t horizontal_add (Vec8ui const & a) {$/;"	f
horizontal_add	vector/vectori256.h	/^static inline uint64_t horizontal_add (Vec4uq const & a) {$/;"	f
horizontal_add	vector/vectori256e.h	/^static inline int32_t horizontal_add (Vec16s const & a) {$/;"	f
horizontal_add	vector/vectori256e.h	/^static inline int32_t horizontal_add (Vec8i const & a) {$/;"	f
horizontal_add	vector/vectori256e.h	/^static inline int64_t horizontal_add (Vec4q const & a) {$/;"	f
horizontal_add	vector/vectori256e.h	/^static inline uint32_t horizontal_add (Vec16us const & a) {$/;"	f
horizontal_add	vector/vectori256e.h	/^static inline uint32_t horizontal_add (Vec32c const & a) {$/;"	f
horizontal_add	vector/vectori256e.h	/^static inline uint32_t horizontal_add (Vec32uc const & a) {$/;"	f
horizontal_add	vector/vectori256e.h	/^static inline uint32_t horizontal_add (Vec8ui const & a) {$/;"	f
horizontal_add	vector/vectori256e.h	/^static inline uint64_t horizontal_add (Vec4uq const & a) {$/;"	f
horizontal_add_x	vector/vectori128.h	/^static inline int32_t horizontal_add_x (Vec16c const & a) {$/;"	f
horizontal_add_x	vector/vectori128.h	/^static inline int32_t horizontal_add_x (Vec8s const & a) {$/;"	f
horizontal_add_x	vector/vectori128.h	/^static inline int64_t horizontal_add_x (Vec4i const & a) {$/;"	f
horizontal_add_x	vector/vectori128.h	/^static inline uint32_t horizontal_add_x (Vec16uc const & a) {$/;"	f
horizontal_add_x	vector/vectori128.h	/^static inline uint32_t horizontal_add_x (Vec8us const & a) {$/;"	f
horizontal_add_x	vector/vectori128.h	/^static inline uint64_t horizontal_add_x (Vec4ui const & a) {$/;"	f
horizontal_add_x	vector/vectori256.h	/^static inline int32_t horizontal_add_x (Vec16s const & a) {$/;"	f
horizontal_add_x	vector/vectori256.h	/^static inline int32_t horizontal_add_x (Vec32c const & a) {$/;"	f
horizontal_add_x	vector/vectori256.h	/^static inline int64_t horizontal_add_x (Vec8i const & a) {$/;"	f
horizontal_add_x	vector/vectori256.h	/^static inline uint32_t horizontal_add_x (Vec16us const & a) {$/;"	f
horizontal_add_x	vector/vectori256.h	/^static inline uint32_t horizontal_add_x (Vec32uc const & a) {$/;"	f
horizontal_add_x	vector/vectori256.h	/^static inline uint64_t horizontal_add_x (Vec8ui const & a) {$/;"	f
horizontal_add_x	vector/vectori256e.h	/^static inline int32_t horizontal_add_x (Vec16s const & a) {$/;"	f
horizontal_add_x	vector/vectori256e.h	/^static inline int32_t horizontal_add_x (Vec32c const & a) {$/;"	f
horizontal_add_x	vector/vectori256e.h	/^static inline int64_t horizontal_add_x (Vec8i const & a) {$/;"	f
horizontal_add_x	vector/vectori256e.h	/^static inline uint32_t horizontal_add_x (Vec16us const & a) {$/;"	f
horizontal_add_x	vector/vectori256e.h	/^static inline uint32_t horizontal_add_x (Vec32uc const & a) {$/;"	f
horizontal_add_x	vector/vectori256e.h	/^static inline uint64_t horizontal_add_x (Vec8ui const & a) {$/;"	f
horizontal_and	vector/vectorf128.h	/^static inline bool horizontal_and (Vec2db const & a) {$/;"	f
horizontal_and	vector/vectorf128.h	/^static inline bool horizontal_and (Vec4fb const & a) {$/;"	f
horizontal_and	vector/vectorf256.h	/^static inline bool horizontal_and (Vec4db const & a) {$/;"	f
horizontal_and	vector/vectorf256.h	/^static inline bool horizontal_and (Vec8fb const & a) {$/;"	f
horizontal_and	vector/vectorf256e.h	/^static inline bool horizontal_and (Vec4db const & a) {$/;"	f
horizontal_and	vector/vectorf256e.h	/^static inline bool horizontal_and (Vec8fb const & a) {$/;"	f
horizontal_and	vector/vectori128.h	/^static inline bool horizontal_and (Vec128b const & a) {$/;"	f
horizontal_and	vector/vectori256.h	/^static inline bool horizontal_and (Vec256b const & a) {$/;"	f
horizontal_and	vector/vectori256e.h	/^static inline bool horizontal_and (Vec256b const & a) {$/;"	f
horizontal_or	vector/vectorf128.h	/^static inline bool horizontal_or (Vec2db const & a) {$/;"	f
horizontal_or	vector/vectorf128.h	/^static inline bool horizontal_or (Vec4fb const & a) {$/;"	f
horizontal_or	vector/vectorf256.h	/^static inline bool horizontal_or (Vec4db const & a) {$/;"	f
horizontal_or	vector/vectorf256.h	/^static inline bool horizontal_or (Vec8fb const & a) {$/;"	f
horizontal_or	vector/vectorf256e.h	/^static inline bool horizontal_or (Vec4db const & a) {$/;"	f
horizontal_or	vector/vectorf256e.h	/^static inline bool horizontal_or (Vec8fb const & a) {$/;"	f
horizontal_or	vector/vectori128.h	/^static inline bool horizontal_or (Vec128b const & a) {$/;"	f
horizontal_or	vector/vectori256.h	/^static inline bool horizontal_or (Vec256b const & a) {$/;"	f
horizontal_or	vector/vectori256e.h	/^static inline bool horizontal_or (Vec256b const & a) {$/;"	f
id	MUMmer/src/tigr/delta.hh	/^  const std::string * id;             \/\/!< the id of the sequence$/;"	m	struct:DeltaNode_t
idQ	MUMmer/src/tigr/delta.hh	/^  std::string idQ;         \/\/!< query contig ID$/;"	m	struct:DeltaRecord_t
idR	MUMmer/src/tigr/delta.hh	/^  std::string idR;         \/\/!< reference contig ID$/;"	m	struct:DeltaRecord_t
identifyingrepeats	MUMmer/docs/web/manual/index.html	/^<h3><a name="identifyingrepeats" id="identifyingrepeats"><\/a>4.5. Identifying $/;"	a
idx	sparseSA.hpp	/^    size_t idx; int val;$/;"	m	struct:vec_uchar::item_t
idy	MUMmer/src/tigr/delta.hh	/^  float idy, sim, stp;        \/\/!< percent identity [0 - 1]$/;"	m	struct:DeltaEdgelet_t
idy	MUMmer/src/tigr/delta.hh	/^  float idy;               \/\/!< percent identity [0 - 100]$/;"	m	struct:DeltaAlignment_t
idyCutoff	MUMmer/src/tigr/show-coords.cc	/^float idyCutoff = 0;                    \/\/ -I option$/;"	v
idyc	MUMmer/src/tigr/delta.hh	/^  long idyc, simc, stpc;      \/\/!< idy, sim, stp counts$/;"	m	struct:DeltaEdgelet_t
idyc	MUMmer/src/tigr/delta.hh	/^  long idyc;  \/\/!< number of mismatches in the alignment$/;"	m	struct:DeltaAlignment_t
imag	vector/special/complexvec.h	/^    double imag() const {$/;"	f	class:Complex2d
imag	vector/special/complexvec.h	/^    float imag() const {$/;"	f	class:Complex2f
imag	vector/special/quaternion.h	/^    Quaternion4d imag() const {$/;"	f	class:Quaternion4d
imag	vector/special/quaternion.h	/^    Quaternion4f imag() const {$/;"	f	class:Quaternion4f
infinite2d	vector/vectorf128.h	/^static inline Vec2d infinite2d() {$/;"	f
infinite4d	vector/vectorf256.h	/^static inline Vec4d infinite4d() {$/;"	f
infinite4d	vector/vectorf256e.h	/^static inline Vec4d infinite4d() {$/;"	f
infinite4f	vector/vectorf128.h	/^static inline Vec4f infinite4f() {$/;"	f
infinite8f	vector/vectorf256.h	/^static inline Vec8f infinite8f() {$/;"	f
infinite8f	vector/vectorf256e.h	/^static inline Vec8f infinite8f() {$/;"	f
inheritfrompath	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^static void inheritfrompath(ArrayPathinfo *matchpath,Location *maxloc,$/;"	f	file:
init	sparseSA.hpp	/^  void init() {$/;"	f	struct:vec_uchar
initSuffixtree	MUMmer/src/kurtz/streesrc/construct.c	/^static void initSuffixtree(Suffixtree *stree,SYMBOL *text,Uint textlen)$/;"	f	file:
initclock	MUMmer/src/kurtz/libbasedir/clock.c	/^void initclock(void)$/;"	f
initmultiseq	MUMmer/src/kurtz/libbasedir/multiseq.c	/^void initmultiseq(Multiseq *multiseq)$/;"	f
initoptions	MUMmer/src/kurtz/libbasedir/procopt.c	/^void initoptions(OptionDescription *options,Uint numofoptions)$/;"	f
insert	vector/vectorf128.h	/^    Vec2d const & insert(uint32_t index, double value) {$/;"	f	class:Vec2d
insert	vector/vectorf128.h	/^    Vec2db const & insert(uint32_t index, bool value) {$/;"	f	class:Vec2db
insert	vector/vectorf128.h	/^    Vec4f const & insert(uint32_t index, float value) {$/;"	f	class:Vec4f
insert	vector/vectorf128.h	/^    Vec4fb const & insert(uint32_t index, bool value) {$/;"	f	class:Vec4fb
insert	vector/vectorf256.h	/^    Vec4d const & insert(uint32_t index, double value) {$/;"	f	class:Vec4d
insert	vector/vectorf256.h	/^    Vec4db const & insert(uint32_t index, bool value) {$/;"	f	class:Vec4db
insert	vector/vectorf256.h	/^    Vec8f const & insert(uint32_t index, float value) {$/;"	f	class:Vec8f
insert	vector/vectorf256.h	/^    Vec8fb const & insert(uint32_t index, bool value) {$/;"	f	class:Vec8fb
insert	vector/vectorf256e.h	/^    Vec4d const & insert(uint32_t index, double value) {$/;"	f	class:Vec4d
insert	vector/vectorf256e.h	/^    Vec4db const & insert(uint32_t index, bool value) {$/;"	f	class:Vec4db
insert	vector/vectorf256e.h	/^    Vec8f const & insert(uint32_t index, float value) {$/;"	f	class:Vec8f
insert	vector/vectorf256e.h	/^    Vec8fb const & insert(uint32_t index, bool value) {$/;"	f	class:Vec8fb
insert	vector/vectori128.h	/^    Vec16c const & insert(uint32_t index, int8_t value) {$/;"	f	class:Vec16c
insert	vector/vectori128.h	/^    Vec16uc const & insert(uint32_t index, uint8_t value) {$/;"	f	class:Vec16uc
insert	vector/vectori128.h	/^    Vec2q const & insert(uint32_t index, int64_t value) {$/;"	f	class:Vec2q
insert	vector/vectori128.h	/^    Vec2uq const & insert(uint32_t index, uint64_t value) {$/;"	f	class:Vec2uq
insert	vector/vectori128.h	/^    Vec4i const & insert(uint32_t index, int32_t value) {$/;"	f	class:Vec4i
insert	vector/vectori128.h	/^    Vec4ui const & insert(uint32_t index, uint32_t value) {$/;"	f	class:Vec4ui
insert	vector/vectori128.h	/^    Vec8s const & insert(uint32_t index, int16_t value) {$/;"	f	class:Vec8s
insert	vector/vectori128.h	/^    Vec8us const & insert(uint32_t index, uint16_t value) {$/;"	f	class:Vec8us
insert	vector/vectori256.h	/^    Vec16s const & insert(uint32_t index, int16_t value) {$/;"	f	class:Vec16s
insert	vector/vectori256.h	/^    Vec16us const & insert(uint32_t index, uint16_t value) {$/;"	f	class:Vec16us
insert	vector/vectori256.h	/^    Vec32c const & insert(uint32_t index, int8_t value) {$/;"	f	class:Vec32c
insert	vector/vectori256.h	/^    Vec32uc const & insert(uint32_t index, uint8_t value) {$/;"	f	class:Vec32uc
insert	vector/vectori256.h	/^    Vec4q const & insert(uint32_t index, int64_t value) {$/;"	f	class:Vec4q
insert	vector/vectori256.h	/^    Vec4uq const & insert(uint32_t index, uint64_t value) {$/;"	f	class:Vec4uq
insert	vector/vectori256.h	/^    Vec8i const & insert(uint32_t index, int32_t value) {$/;"	f	class:Vec8i
insert	vector/vectori256.h	/^    Vec8ui const & insert(uint32_t index, uint32_t value) {$/;"	f	class:Vec8ui
insert	vector/vectori256e.h	/^    Vec16s const & insert(uint32_t index, int16_t value) {$/;"	f	class:Vec16s
insert	vector/vectori256e.h	/^    Vec16us const & insert(uint32_t index, uint16_t value) {$/;"	f	class:Vec16us
insert	vector/vectori256e.h	/^    Vec32c const & insert(uint32_t index, int8_t value) {$/;"	f	class:Vec32c
insert	vector/vectori256e.h	/^    Vec32uc const & insert(uint32_t index, uint8_t value) {$/;"	f	class:Vec32uc
insert	vector/vectori256e.h	/^    Vec4q const & insert(uint32_t index, int64_t value) {$/;"	f	class:Vec4q
insert	vector/vectori256e.h	/^    Vec4uq const & insert(uint32_t index, uint64_t value) {$/;"	f	class:Vec4uq
insert	vector/vectori256e.h	/^    Vec8i const & insert(uint32_t index, int32_t value) {$/;"	f	class:Vec8i
insert	vector/vectori256e.h	/^    Vec8ui const & insert(uint32_t index, uint32_t value) {$/;"	f	class:Vec8ui
insertbranchnode	MUMmer/src/kurtz/streesrc/construct.c	/^static void insertbranchnode(Suffixtree *stree)$/;"	f	file:
insertinleaflist	MUMmer/src/kurtz/streesrc/dfs.c	/^static Sint insertinleaflist(Uint leafindex,\/*@unused@*\/ Bref lcpnode,$/;"	f	file:
insertleaf	MUMmer/src/kurtz/streesrc/construct.c	/^static void insertleaf(Suffixtree *stree)$/;"	f	file:
insertleafcalls	MUMmer/src/kurtz/streesrc/streetyp.h	/^       insertleafcalls,$/;"	m	struct:Suffixtreetype
insertnode	MUMmer/src/kurtz/streesrc/streetyp.h	/^       insertnode,            \/\/ the node the split edge leads to $/;"	m	struct:Suffixtreetype
insertprev	MUMmer/src/kurtz/streesrc/streetyp.h	/^       insertprev,            \/\/ the edge preceeding the split edge$/;"	m	struct:Suffixtreetype
installation	MUMmer/docs/web/manual/index.html	/^<h2><a name="installation"><\/a>2. Installation<\/h2>$/;"	a
instrset_detect	vector/instrset_detect.cpp	/^int instrset_detect(void) {$/;"	f
int16_t	vector/instrset.h	/^  typedef signed   __int16  int16_t;$/;"	t
int16_t	vector/instrset.h	/^  typedef signed   short int  int16_t;$/;"	t
int2ref	MUMmer/src/kurtz/streesrc/access.c	/^static void int2ref(Suffixtree *stree,Reference *ref,Uint i)$/;"	f	file:
int2ref	MUMmer/src/kurtz/streesrc/iterator.c	/^static void int2ref(Suffixtree *stree,Reference *ref,Uint i)$/;"	f	file:
int32_t	vector/instrset.h	/^  typedef signed   __int32  int32_t;$/;"	t
int32_t	vector/instrset.h	/^  typedef signed   int        int32_t;$/;"	t
int64_t	vector/instrset.h	/^  typedef long long           int64_t;$/;"	t
int64_t	vector/instrset.h	/^  typedef signed   __int64  int64_t;$/;"	t
int8_t	vector/instrset.h	/^  typedef signed   __int8   int8_t;$/;"	t
int8_t	vector/instrset.h	/^  typedef signed   char       int8_t;$/;"	t
interval_t	sparseSA.hpp	/^  interval_t() { start = 1; end = 0; depth = -1; }$/;"	f	struct:interval_t
interval_t	sparseSA.hpp	/^  interval_t(long s, long e, long d) { start = s; end = e; depth = d; }$/;"	f	struct:interval_t
interval_t	sparseSA.hpp	/^struct interval_t {$/;"	s
intptr_t	vector/instrset.h	/^      typedef int32_t intptr_t;$/;"	t
intptr_t	vector/instrset.h	/^      typedef int64_t intptr_t;$/;"	t
intptr_t	vector/instrset.h	/^    typedef int32_t intptr_t;$/;"	t
intptr_t	vector/instrset.h	/^    typedef int64_t intptr_t;$/;"	t
introduction	MUMmer/docs/web/examples/index.html	/^<h2><a name="introduction"><\/a>1. Introduction<\/h2>$/;"	a
introduction	MUMmer/docs/web/manual/index.html	/^<h2><a name="introduction"><\/a>1. Introduction<\/h2>$/;"	a
invalidateLogFILES	MUMmer/scripts/Foundation.pm	/^   sub invalidateLogFILES() {$/;"	s
isAnnotateOverlaps	MUMmer/src/tigr/show-coords.cc	/^bool isAnnotateOverlaps = false;        \/\/ -o option$/;"	v
isAnnotation	MUMmer/src/tigr/show-coords.cc	/^bool isAnnotation = false;              \/\/ true if either -w or -o$/;"	v
isBrief	MUMmer/src/tigr/show-coords.cc	/^bool isBrief = false;                   \/\/ -b option$/;"	v
isBtab	MUMmer/src/tigr/show-coords.cc	/^bool isBtab = false;                    \/\/ -B option$/;"	v
isCircularReference	MUMmer/src/tigr/show-tiling.cc	/^bool isCircularReference = false;        \/\/ set by -c option$/;"	v
isCreatableDir	MUMmer/scripts/Foundation.pm	/^   sub isCreatableDir($) {$/;"	s
isCreatableFile	MUMmer/scripts/Foundation.pm	/^   sub isCreatableFile($) {$/;"	s
isCreatablePath	MUMmer/scripts/Foundation.pm	/^   sub isCreatablePath($) {$/;"	s
isExecutableFile	MUMmer/scripts/Foundation.pm	/^   sub isExecutableFile($) {$/;"	s
isGLIS	MUMmer/src/tigr/delta.hh	/^  unsigned char isGLIS : 1;   \/\/!< is part of the reference\/query LIS$/;"	m	struct:DeltaEdgelet_t
isGOOD	MUMmer/src/tigr/delta.hh	/^  unsigned char isGOOD : 1;   \/\/!< meets the requirements$/;"	m	struct:DeltaEdgelet_t
isKnockout	MUMmer/src/tigr/show-coords.cc	/^bool isKnockout = false;                \/\/ -k option$/;"	v
isLAS	MUMmer/src/tigr/show-coords.cc	/^  bool isLAS;               \/\/ involved in a longest ascending subset$/;"	m	struct:AlignStats	file:
isLAS	MUMmer/src/tigr/show-coords.cc	/^bool isLAS = false;                     \/\/ -g option$/;"	v
isLinkHead	MUMmer/src/tigr/show-tiling.cc	/^  bool isLinkHead;                         \/\/ is the head of the linked list?$/;"	m	struct:QueryContig	file:
isNegative	MUMmer/src/tigr/delta.hh	/^  bool isNegative() const$/;"	f	struct:DeltaEdgelet_t
isOutputContigs	MUMmer/src/tigr/show-tiling.cc	/^bool isOutputContigs = false;            \/\/ set by -t option$/;"	v
isOutputPseudoMolecule	MUMmer/src/tigr/show-tiling.cc	/^bool isOutputPseudoMolecule = false;     \/\/ set by -p option$/;"	v
isOutputUnusable	MUMmer/src/tigr/show-tiling.cc	/^bool isOutputUnusable = false;           \/\/ set by -u option$/;"	v
isPositive	MUMmer/src/tigr/delta.hh	/^  bool isPositive() const$/;"	f	struct:DeltaEdgelet_t
isPrintAlignments	MUMmer/src/tigr/show-tiling.cc	/^bool isPrintAlignments = false;          \/\/ set by -a option$/;"	v
isPrintHeader	MUMmer/src/tigr/show-coords.cc	/^bool isPrintHeader = true;              \/\/ -H option$/;"	v
isPrintTabular	MUMmer/src/tigr/show-coords.cc	/^bool isPrintTabular = false;            \/\/ -T option$/;"	v
isPrintXML	MUMmer/src/tigr/show-tiling.cc	/^bool isPrintXML = false;                 \/\/ set by -x option$/;"	v
isQLIS	MUMmer/src/tigr/delta.hh	/^  unsigned char isQLIS : 1;   \/\/!< is part of the query's LIS$/;"	m	struct:DeltaEdgelet_t
isRLIS	MUMmer/src/tigr/delta.hh	/^  unsigned char isRLIS : 1;   \/\/!< is part of the reference's LIS$/;"	m	struct:DeltaEdgelet_t
isRandomRepeats	MUMmer/src/tigr/show-tiling.cc	/^bool isRandomRepeats = false;            \/\/ set by -R option$/;"	v
isReadableDir	MUMmer/scripts/Foundation.pm	/^   sub isReadableDir($) {$/;"	s
isReadableFile	MUMmer/scripts/Foundation.pm	/^   sub isReadableFile($) {$/;"	s
isShadowedCluster	MUMmer/src/tigr/postnuc.cc	/^bool isShadowedCluster$/;"	f
isShadowedCluster	MUMmer/src/tigr/postpro.cc	/^bool isShadowedCluster$/;"	f
isShowCoverage	MUMmer/src/tigr/show-coords.cc	/^bool isShowCoverage = false;            \/\/ -c option$/;"	v
isShowDir	MUMmer/src/tigr/show-coords.cc	/^bool isShowDir = false;                 \/\/ -d option$/;"	v
isShowSeqLens	MUMmer/src/tigr/show-coords.cc	/^bool isShowSeqLens = false;             \/\/ -l option$/;"	v
isShowWarnings	MUMmer/src/tigr/show-coords.cc	/^bool isShowWarnings = false;            \/\/ -w option$/;"	v
isSortByQuery	MUMmer/src/tigr/show-aligns.cc	/^bool isSortByQuery = false;              \/\/ -q option$/;"	v
isSortByQuery	MUMmer/src/tigr/show-coords.cc	/^bool isSortByQuery = false;             \/\/ -q option$/;"	v
isSortByReference	MUMmer/src/tigr/show-aligns.cc	/^bool isSortByReference = false;          \/\/ -r option$/;"	v
isSortByReference	MUMmer/src/tigr/show-coords.cc	/^bool isSortByReference = false;         \/\/ -r option$/;"	v
isTiled	MUMmer/src/tigr/show-tiling.cc	/^  bool isTiled;                          \/\/ is the alignment be tiled?$/;"	m	struct:AlignStats	file:
isWLAS	MUMmer/src/tigr/show-coords.cc	/^bool isWLAS = false;                    \/\/ -G option$/;"	v
isWritableDir	MUMmer/scripts/Foundation.pm	/^   sub isWritableDir($) {$/;"	s
isWritableFile	MUMmer/scripts/Foundation.pm	/^   sub isWritableFile($) {$/;"	s
is_denormal	vector/vectorf128.h	/^static inline Vec2db is_denormal(Vec2d const & a) {$/;"	f
is_denormal	vector/vectorf128.h	/^static inline Vec4fb is_denormal(Vec4f const & a) {$/;"	f
is_denormal	vector/vectorf256.h	/^static inline Vec4db is_denormal(Vec4d const & a) {$/;"	f
is_denormal	vector/vectorf256.h	/^static inline Vec8fb is_denormal(Vec8f const & a) {$/;"	f
is_denormal	vector/vectorf256e.h	/^static inline Vec4db is_denormal(Vec4d const & a) {$/;"	f
is_denormal	vector/vectorf256e.h	/^static inline Vec8fb is_denormal(Vec8f const & a) {$/;"	f
is_finite	vector/vectorf128.h	/^static inline Vec2db is_finite(Vec2d const & a) {$/;"	f
is_finite	vector/vectorf128.h	/^static inline Vec4fb is_finite(Vec4f const & a) {$/;"	f
is_finite	vector/vectorf256.h	/^static inline Vec4db is_finite(Vec4d const & a) {$/;"	f
is_finite	vector/vectorf256.h	/^static inline Vec8fb is_finite(Vec8f const & a) {$/;"	f
is_finite	vector/vectorf256e.h	/^static inline Vec4db is_finite(Vec4d const & a) {$/;"	f
is_finite	vector/vectorf256e.h	/^static inline Vec8fb is_finite(Vec8f const & a) {$/;"	f
is_inf	vector/vectorf128.h	/^static inline Vec2db is_inf(Vec2d const & a) {$/;"	f
is_inf	vector/vectorf128.h	/^static inline Vec4fb is_inf(Vec4f const & a) {$/;"	f
is_inf	vector/vectorf256.h	/^static inline Vec4db is_inf(Vec4d const & a) {$/;"	f
is_inf	vector/vectorf256.h	/^static inline Vec8fb is_inf(Vec8f const & a) {$/;"	f
is_inf	vector/vectorf256e.h	/^static inline Vec4db is_inf(Vec4d const & a) {$/;"	f
is_inf	vector/vectorf256e.h	/^static inline Vec8fb is_inf(Vec8f const & a) {$/;"	f
is_leftmaximal	sparseSA.cpp	/^bool sparseSA::is_leftmaximal(string &P, long p1, long p2) {$/;"	f	class:sparseSA
is_nan	vector/vectorf128.h	/^static inline Vec2db is_nan(Vec2d const & a) {$/;"	f
is_nan	vector/vectorf128.h	/^static inline Vec4fb is_nan(Vec4f const & a) {$/;"	f
is_nan	vector/vectorf256.h	/^static inline Vec4db is_nan(Vec4d const & a) {$/;"	f
is_nan	vector/vectorf256.h	/^static inline Vec8fb is_nan(Vec8f const & a) {$/;"	f
is_nan	vector/vectorf256e.h	/^static inline Vec4db is_nan(Vec4d const & a) {$/;"	f
is_nan	vector/vectorf256e.h	/^static inline Vec8fb is_nan(Vec8f const & a) {$/;"	f
is_open_m	MUMmer/src/tigr/delta.hh	/^  bool is_open_m;                \/\/!< delta stream is open$/;"	m	class:DeltaReader_t
is_record_m	MUMmer/src/tigr/delta.hh	/^  bool is_record_m;              \/\/!< there is a valid record in record_m$/;"	m	class:DeltaReader_t
isalreadyset	MUMmer/src/kurtz/libbasedir/optdesc.h	/^  BOOL isalreadyset,         \/\/ has the option already been set?$/;"	m	struct:__anon18
isdef_MAX_GAP_SIZE	MUMmer/src/tigr/show-tiling.cc	/^bool isdef_MAX_GAP_SIZE       = false;$/;"	v
isdef_MIN_COVERAGE	MUMmer/src/tigr/show-tiling.cc	/^bool isdef_MIN_COVERAGE       = false;$/;"	v
isdef_MIN_COVERAGE_DIFF	MUMmer/src/tigr/show-tiling.cc	/^bool isdef_MIN_COVERAGE_DIFF  = false;$/;"	v
isdef_MIN_PIDY	MUMmer/src/tigr/show-tiling.cc	/^bool isdef_MIN_PIDY           = false;$/;"	v
item_t	sparseSA.hpp	/^    item_t(size_t i, int v) { idx = i; val = v; }$/;"	f	struct:vec_uchar::item_t
item_t	sparseSA.hpp	/^  struct item_t{$/;"	s	struct:vec_uchar
largelinklinkwork	MUMmer/src/kurtz/streesrc/streetyp.h	/^       largelinklinkwork,$/;"	m	struct:Suffixtreetype
largelinks	MUMmer/src/kurtz/streesrc/streetyp.h	/^       largelinks,$/;"	m	struct:Suffixtreetype
largelinkwork	MUMmer/src/kurtz/streesrc/streetyp.h	/^       largelinkwork,$/;"	m	struct:Suffixtreetype
largenode	MUMmer/src/kurtz/streesrc/streetyp.h	/^       largenode,             \/\/ number of large nodes$/;"	m	struct:Suffixtreetype
lastcharindex	MUMmer/src/kurtz/streesrc/streetyp.h	/^  Sint lastcharindex;$/;"	m	struct:Suffixtreetype
lbound	MUMmer/src/tigr/sw_align.hh	/^  long int lbound, rbound;   \/\/ left(lower) and right(upper) bounds$/;"	m	struct:Diagonal
lcp	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^static Uint lcp(Uchar *start1,Uchar *end1,Uchar *start2,Uchar *end2)$/;"	f	file:
lcp	MUMmer/src/kurtz/streesrc/scanpref.c	/^static Uint lcp(SYMBOL *start1,SYMBOL *end1,SYMBOL *start2,SYMBOL *end2)$/;"	f	file:
lcp	toci.cpp	/^static long lcp(sauchar_t *start1,sauchar_t *start2,sauchar_t *end)$/;"	f	file:
leaf	MUMmer/src/tigr/repeat-match.cc	/^typedef  struct leaf$/;"	s	file:
leafcounts	MUMmer/src/kurtz/streesrc/streetyp.h	/^       *leafcounts;           \/\/ holds counts of the number of leafs in subtree$/;"	m	struct:Suffixtreetype
leaftab	MUMmer/src/kurtz/streesrc/streetyp.h	/^       *leaftab,              \/\/ stores the brother-references of the leafs$/;"	m	struct:Suffixtreetype
len	MUMmer/src/tigr/delta.hh	/^  long len;              \/\/!< the length of the sequence$/;"	m	struct:DeltaNode_t
len	MUMmer/src/tigr/postnuc.cc	/^  long int len;              \/\/ the length of the sequence$/;"	m	struct:FastaRecord	file:
len	MUMmer/src/tigr/postnuc.cc	/^  long int sA, sB, len;      \/\/ start coordinate in A, in B and the length$/;"	m	struct:Match	file:
len	MUMmer/src/tigr/postpro.cc	/^  long int len;              \/\/ the length of the sequence$/;"	m	struct:FastaRecord	file:
len	MUMmer/src/tigr/postpro.cc	/^  long int sA, sB, len;      \/\/ start coordinate in A, in B and the length$/;"	m	struct:Match	file:
len	sparseSA.hpp	/^  long len; \/\/ length of match$/;"	m	struct:match_t
lenCutoff	MUMmer/src/tigr/show-coords.cc	/^long int lenCutoff = 0;                 \/\/ -L option$/;"	v
lenQ	MUMmer/src/tigr/delta.hh	/^  long lenQ;  \/\/!< length of the query contig$/;"	m	struct:DeltaRecord_t
lenR	MUMmer/src/tigr/delta.hh	/^  long lenR;  \/\/!< length of the reference contig$/;"	m	struct:DeltaRecord_t
length	MUMmer/src/kurtz/libbasedir/types.h	/^  Uint start, length;$/;"	m	struct:__anon16
length	genDNA.py	/^length = sys.argv[1] * 1000000$/;"	v
lineallocated	MUMmer/src/kurtz/libbasedir/space.c	/^  Uint lineallocated;  \/\/ the linenumber where the$/;"	m	struct:__anon24	file:
linemapped	MUMmer/src/kurtz/libbasedir/mapfile.c	/^static Uint linemapped[MAXMAPPEDFILES] = {0};       $/;"	v	file:
linkContigs	MUMmer/src/tigr/show-tiling.cc	/^void linkContigs$/;"	f
linklocstree	MUMmer/src/kurtz/streesrc/linkloc.c	/^void linklocstree(Suffixtree *stree,Location *outloc,Location *inloc)$/;"	f
linklocstree	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^void linklocstree(Suffixtree *stree,Location *outloc,$/;"	f
linkrootchildren	MUMmer/src/kurtz/streesrc/construct.c	/^static void linkrootchildren(Suffixtree *stree)$/;"	f	file:
linksTo	MUMmer/src/tigr/show-tiling.cc	/^  vector<QueryContig>::iterator linksTo;   \/\/ who does this contig link to?$/;"	m	struct:QueryContig	file:
lo	MUMmer/src/tigr/combineMUMs.cc	/^   long int  lo, hi;$/;"	m	struct:s_Cover_t	file:
loQ	MUMmer/src/tigr/delta.hh	/^  long loQ, hiQ, loR, hiR;    \/\/!< alignment bounds$/;"	m	struct:DeltaEdgelet_t
loQ2R	MUMmer/src/tigr/delta.hh	/^  long loQ2R() const$/;"	f	struct:DeltaEdgelet_t
loR	MUMmer/src/tigr/delta.hh	/^  long loQ, hiQ, loR, hiR;    \/\/!< alignment bounds$/;"	m	struct:DeltaEdgelet_t
loR2Q	MUMmer/src/tigr/delta.hh	/^  long loR2Q() const$/;"	f	struct:DeltaEdgelet_t
load	vector/special/complexvec.h	/^    Complex2d & load(double const * p) {$/;"	f	class:Complex2d
load	vector/special/complexvec.h	/^    Complex2f & load(float const * p) {$/;"	f	class:Complex2f
load	vector/special/complexvec.h	/^    Complex4d & load(double const * p) {$/;"	f	class:Complex4d
load	vector/special/complexvec.h	/^    Complex4f & load(float const * p) {$/;"	f	class:Complex4f
load	vector/special/complexvec.h	/^    Complex8f & load(float const * p) {$/;"	f	class:Complex8f
load	vector/special/quaternion.h	/^    Quaternion4d & load(double const * p) {$/;"	f	class:Quaternion4d
load	vector/special/quaternion.h	/^    Quaternion4f & load(float const * p) {$/;"	f	class:Quaternion4f
load	vector/special/vector3d.h	/^    Vec3d & load(double const * p) {$/;"	f	class:Vec3d
load	vector/special/vector3d.h	/^    Vec3f & load(float const * p) {$/;"	f	class:Vec3f
load	vector/vectorf128.h	/^    Vec2d & load(double const * p) {$/;"	f	class:Vec2d
load	vector/vectorf128.h	/^    Vec4f & load(float const * p) {$/;"	f	class:Vec4f
load	vector/vectorf256.h	/^    Vec4d & load(double const * p) {$/;"	f	class:Vec4d
load	vector/vectorf256.h	/^    Vec8f & load(float const * p) {$/;"	f	class:Vec8f
load	vector/vectorf256e.h	/^    Vec4d & load(double const * p) {$/;"	f	class:Vec4d
load	vector/vectorf256e.h	/^    Vec8f & load(float const * p) {$/;"	f	class:Vec8f
load	vector/vectori128.h	/^    Vec128b & load(void const * p) {$/;"	f	class:Vec128b
load	vector/vectori128.h	/^    Vec16c & load(void const * p) {$/;"	f	class:Vec16c
load	vector/vectori128.h	/^    Vec16uc & load(void const * p) {$/;"	f	class:Vec16uc
load	vector/vectori128.h	/^    Vec2q & load(void const * p) {$/;"	f	class:Vec2q
load	vector/vectori128.h	/^    Vec2uq & load(void const * p) {$/;"	f	class:Vec2uq
load	vector/vectori128.h	/^    Vec4i & load(void const * p) {$/;"	f	class:Vec4i
load	vector/vectori128.h	/^    Vec4ui & load(void const * p) {$/;"	f	class:Vec4ui
load	vector/vectori128.h	/^    Vec8s & load(void const * p) {$/;"	f	class:Vec8s
load	vector/vectori128.h	/^    Vec8us & load(void const * p) {$/;"	f	class:Vec8us
load	vector/vectori256.h	/^    Vec16s & load(void const * p) {$/;"	f	class:Vec16s
load	vector/vectori256.h	/^    Vec16us & load(void const * p) {$/;"	f	class:Vec16us
load	vector/vectori256.h	/^    Vec256b & load(void const * p) {$/;"	f	class:Vec256b
load	vector/vectori256.h	/^    Vec32c & load(void const * p) {$/;"	f	class:Vec32c
load	vector/vectori256.h	/^    Vec32uc & load(void const * p) {$/;"	f	class:Vec32uc
load	vector/vectori256.h	/^    Vec4q & load(void const * p) {$/;"	f	class:Vec4q
load	vector/vectori256.h	/^    Vec4uq & load(void const * p) {$/;"	f	class:Vec4uq
load	vector/vectori256.h	/^    Vec8i & load(void const * p) {$/;"	f	class:Vec8i
load	vector/vectori256.h	/^    Vec8ui & load(void const * p) {$/;"	f	class:Vec8ui
load	vector/vectori256e.h	/^    Vec16s & load(void const * p) {$/;"	f	class:Vec16s
load	vector/vectori256e.h	/^    Vec16us & load(void const * p) {$/;"	f	class:Vec16us
load	vector/vectori256e.h	/^    Vec256b & load(void const * p) {$/;"	f	class:Vec256b
load	vector/vectori256e.h	/^    Vec32c & load(void const * p) {$/;"	f	class:Vec32c
load	vector/vectori256e.h	/^    Vec32uc & load(void const * p) {$/;"	f	class:Vec32uc
load	vector/vectori256e.h	/^    Vec4q & load(void const * p) {$/;"	f	class:Vec4q
load	vector/vectori256e.h	/^    Vec4uq & load(void const * p) {$/;"	f	class:Vec4uq
load	vector/vectori256e.h	/^    Vec8i & load(void const * p) {$/;"	f	class:Vec8i
load	vector/vectori256e.h	/^    Vec8ui & load(void const * p) {$/;"	f	class:Vec8ui
loadSequences	MUMmer/src/tigr/delta.cc	/^void DeltaGraph_t::loadSequences ()$/;"	f	class:DeltaGraph_t
load_a	vector/special/complexvec.h	/^    Complex2d const & load_a(double const * p) {$/;"	f	class:Complex2d
load_a	vector/special/complexvec.h	/^    Complex2f const & load_a(float const * p) {$/;"	f	class:Complex2f
load_a	vector/special/complexvec.h	/^    Complex4d const & load_a(double const * p) {$/;"	f	class:Complex4d
load_a	vector/special/complexvec.h	/^    Complex4f const & load_a(float const * p) {$/;"	f	class:Complex4f
load_a	vector/special/complexvec.h	/^    Complex8f const & load_a(float const * p) {$/;"	f	class:Complex8f
load_a	vector/special/quaternion.h	/^    Quaternion4d const & load_a(double const * p) {$/;"	f	class:Quaternion4d
load_a	vector/special/quaternion.h	/^    Quaternion4f const & load_a(float const * p) {$/;"	f	class:Quaternion4f
load_a	vector/special/vector3d.h	/^    Vec3d const & load_a(double const * p) {$/;"	f	class:Vec3d
load_a	vector/special/vector3d.h	/^    Vec3f const & load_a(float const * p) {$/;"	f	class:Vec3f
load_a	vector/vectorf128.h	/^    Vec2d const & load_a(double const * p) {$/;"	f	class:Vec2d
load_a	vector/vectorf128.h	/^    Vec4f & load_a(float const * p) {$/;"	f	class:Vec4f
load_a	vector/vectorf256.h	/^    Vec4d & load_a(double const * p) {$/;"	f	class:Vec4d
load_a	vector/vectorf256.h	/^    Vec8f & load_a(float const * p) {$/;"	f	class:Vec8f
load_a	vector/vectorf256e.h	/^    Vec4d & load_a(double const * p) {$/;"	f	class:Vec4d
load_a	vector/vectorf256e.h	/^    Vec8f & load_a(float const * p) {$/;"	f	class:Vec8f
load_a	vector/vectori128.h	/^    Vec16c & load_a(void const * p) {$/;"	f	class:Vec16c
load_a	vector/vectori128.h	/^    Vec16uc & load_a(void const * p) {$/;"	f	class:Vec16uc
load_a	vector/vectori128.h	/^    Vec2q & load_a(void const * p) {$/;"	f	class:Vec2q
load_a	vector/vectori128.h	/^    Vec2uq & load_a(void const * p) {$/;"	f	class:Vec2uq
load_a	vector/vectori128.h	/^    Vec4i & load_a(void const * p) {$/;"	f	class:Vec4i
load_a	vector/vectori128.h	/^    Vec4ui & load_a(void const * p) {$/;"	f	class:Vec4ui
load_a	vector/vectori128.h	/^    Vec8s & load_a(void const * p) {$/;"	f	class:Vec8s
load_a	vector/vectori128.h	/^    Vec8us & load_a(void const * p) {$/;"	f	class:Vec8us
load_a	vector/vectori128.h	/^    void load_a(void const * p) {$/;"	f	class:Vec128b
load_a	vector/vectori256.h	/^    Vec16s & load_a(void const * p) {$/;"	f	class:Vec16s
load_a	vector/vectori256.h	/^    Vec16us & load_a(void const * p) {$/;"	f	class:Vec16us
load_a	vector/vectori256.h	/^    Vec256b & load_a(void const * p) {$/;"	f	class:Vec256b
load_a	vector/vectori256.h	/^    Vec32c & load_a(void const * p) {$/;"	f	class:Vec32c
load_a	vector/vectori256.h	/^    Vec32uc & load_a(void const * p) {$/;"	f	class:Vec32uc
load_a	vector/vectori256.h	/^    Vec4q & load_a(void const * p) {$/;"	f	class:Vec4q
load_a	vector/vectori256.h	/^    Vec4uq & load_a(void const * p) {$/;"	f	class:Vec4uq
load_a	vector/vectori256.h	/^    Vec8i & load_a(void const * p) {$/;"	f	class:Vec8i
load_a	vector/vectori256.h	/^    Vec8ui & load_a(void const * p) {$/;"	f	class:Vec8ui
load_a	vector/vectori256e.h	/^    Vec16s & load_a(void const * p) {$/;"	f	class:Vec16s
load_a	vector/vectori256e.h	/^    Vec16us & load_a(void const * p) {$/;"	f	class:Vec16us
load_a	vector/vectori256e.h	/^    Vec256b & load_a(void const * p) {$/;"	f	class:Vec256b
load_a	vector/vectori256e.h	/^    Vec32c & load_a(void const * p) {$/;"	f	class:Vec32c
load_a	vector/vectori256e.h	/^    Vec32uc & load_a(void const * p) {$/;"	f	class:Vec32uc
load_a	vector/vectori256e.h	/^    Vec4q & load_a(void const * p) {$/;"	f	class:Vec4q
load_a	vector/vectori256e.h	/^    Vec4uq & load_a(void const * p) {$/;"	f	class:Vec4uq
load_a	vector/vectori256e.h	/^    Vec8i & load_a(void const * p) {$/;"	f	class:Vec8i
load_a	vector/vectori256e.h	/^    Vec8ui & load_a(void const * p) {$/;"	f	class:Vec8ui
load_fasta	fasta.cpp	/^void load_fasta(string filename, string &S, vector<string> &descr, vector<long> &startpos) {$/;"	f
load_partial	vector/vectorf128.h	/^    Vec2d & load_partial(int n, double const * p) {$/;"	f	class:Vec2d
load_partial	vector/vectorf128.h	/^    Vec4f & load_partial(int n, float const * p) {$/;"	f	class:Vec4f
load_partial	vector/vectorf256.h	/^    Vec4d & load_partial(int n, double const * p) {$/;"	f	class:Vec4d
load_partial	vector/vectorf256.h	/^    Vec8f & load_partial(int n, float const * p) {$/;"	f	class:Vec8f
load_partial	vector/vectorf256e.h	/^    Vec4d & load_partial(int n, double const * p) {$/;"	f	class:Vec4d
load_partial	vector/vectorf256e.h	/^    Vec8f & load_partial(int n, float const * p) {$/;"	f	class:Vec8f
load_partial	vector/vectori128.h	/^    Vec16c & load_partial(int n, void const * p) {$/;"	f	class:Vec16c
load_partial	vector/vectori128.h	/^    Vec2q & load_partial(int n, void const * p) {$/;"	f	class:Vec2q
load_partial	vector/vectori128.h	/^    Vec4i & load_partial(int n, void const * p) {$/;"	f	class:Vec4i
load_partial	vector/vectori128.h	/^    Vec8s & load_partial(int n, void const * p) {$/;"	f	class:Vec8s
load_partial	vector/vectori256.h	/^    Vec16s & load_partial(int n, void const * p) {$/;"	f	class:Vec16s
load_partial	vector/vectori256.h	/^    Vec32c & load_partial(int n, void const * p) {$/;"	f	class:Vec32c
load_partial	vector/vectori256.h	/^    Vec4q & load_partial(int n, void const * p) {$/;"	f	class:Vec4q
load_partial	vector/vectori256.h	/^    Vec8i & load_partial(int n, void const * p) {$/;"	f	class:Vec8i
load_partial	vector/vectori256e.h	/^    Vec16s & load_partial(int n, void const * p) {$/;"	f	class:Vec16s
load_partial	vector/vectori256e.h	/^    Vec32c & load_partial(int n, void const * p) {$/;"	f	class:Vec32c
load_partial	vector/vectori256e.h	/^    Vec4q & load_partial(int n, void const * p) {$/;"	f	class:Vec4q
load_partial	vector/vectori256e.h	/^    Vec8i & load_partial(int n, void const * p) {$/;"	f	class:Vec8i
loc2stringstree	MUMmer/src/kurtz/streesrc/streedbg.c	/^static void loc2stringstree(Suffixtree *stree,Stringtype *s,Location *loc)$/;"	f	file:
locstring	MUMmer/src/kurtz/streesrc/streetyp.h	/^  Stringtype locstring; \/\/ string represented by location$/;"	m	struct:__anon9
log	vector/special/vectormath.h	/^static inline Vec2d log (Vec2d const & x) {   \/\/ natural logarithm$/;"	f
log	vector/special/vectormath.h	/^static inline Vec2d log (Vec2d const & x) {$/;"	f
log	vector/special/vectormath.h	/^static inline Vec4d log (Vec4d const & x) {   \/\/ natural logarithm$/;"	f
log	vector/special/vectormath.h	/^static inline Vec4f log (Vec4f const & x) {   \/\/ natural logarithm$/;"	f
log	vector/special/vectormath.h	/^static inline Vec4f log (Vec4f const & x) {$/;"	f
log	vector/special/vectormath.h	/^static inline Vec8f log (Vec8f const & x) {   \/\/ natural logarithm$/;"	f
log10	vector/special/vectormath.h	/^static inline Vec2d log10 (Vec2d const & x) {   \/\/ logarithm base 10$/;"	f
log10	vector/special/vectormath.h	/^static inline Vec2d log10 (Vec2d const & x) {  \/\/ logarithm base 10$/;"	f
log10	vector/special/vectormath.h	/^static inline Vec4d log10 (Vec4d const & x) {   \/\/ logarithm base 10$/;"	f
log10	vector/special/vectormath.h	/^static inline Vec4f log10 (Vec4f const & x) {   \/\/ logarithm base 10$/;"	f
log10	vector/special/vectormath.h	/^static inline Vec4f log10 (Vec4f const & x) {  \/\/ logarithm base 10$/;"	f
log10	vector/special/vectormath.h	/^static inline Vec8f log10 (Vec8f const & x) {   \/\/ logarithm base 10$/;"	f
log1p	vector/special/vectormath.h	/^static inline Vec2d log1p (Vec2d const & x) {   \/\/ log(1+x). Avoids loss of precision if 1+x is close to 1$/;"	f
log1p	vector/special/vectormath.h	/^static inline Vec2d log1p (Vec2d const & x) {$/;"	f
log1p	vector/special/vectormath.h	/^static inline Vec4d log1p (Vec4d const & x) {   \/\/ log(1+x). Avoids loss of precision if 1+x is close to 1$/;"	f
log1p	vector/special/vectormath.h	/^static inline Vec4f log1p (Vec4f const & x) {   \/\/ log(1+x). Avoids loss of precision if 1+x is close to 1$/;"	f
log1p	vector/special/vectormath.h	/^static inline Vec4f log1p (Vec4f const & x) {$/;"	f
log1p	vector/special/vectormath.h	/^static inline Vec8f log1p (Vec8f const & x) {   \/\/ log(1+x). Avoids loss of precision if 1+x is close to 1$/;"	f
log2	vector/special/vectormath.h	/^static inline Vec2d log2 (Vec2d const & x) {   \/\/ logarithm base 2$/;"	f
log2	vector/special/vectormath.h	/^static inline Vec4d log2 (Vec4d const & x) {   \/\/ logarithm base 2$/;"	f
log2	vector/special/vectormath.h	/^static inline Vec4f log2 (Vec4f const & x) {   \/\/ logarithm base 2$/;"	f
log2	vector/special/vectormath.h	/^static inline Vec8f log2 (Vec8f const & x) {   \/\/ logarithm base 2$/;"	f
logAppend	MUMmer/scripts/Foundation.pm	/^   sub logAppend($;$) {$/;"	s
logError	MUMmer/scripts/Foundation.pm	/^   sub logError($;$) {$/;"	s
logLocal	MUMmer/scripts/Foundation.pm	/^   sub logLocal($$) {$/;"	s
logN	sparseSA.hpp	/^  long logN; \/\/ ceil(log(N)) $/;"	m	struct:sparseSA
longestConsistentSubset	MUMmer/src/tigr/show-tiling.cc	/^long int longestConsistentSubset$/;"	f
lookup	vector/vectorf128.h	/^static inline Vec2d lookup(Vec2q const & index, double const * table) {$/;"	f
lookup	vector/vectorf128.h	/^static inline Vec4f lookup(Vec4i const & index, float const * table) {$/;"	f
lookup	vector/vectorf256.h	/^static inline Vec4d lookup(Vec4q const & index, double const * table) {$/;"	f
lookup	vector/vectorf256.h	/^static inline Vec8f lookup(Vec8i const & index, float const * table) {$/;"	f
lookup	vector/vectorf256e.h	/^static inline Vec4d lookup(Vec4q const & index, double const * table) {$/;"	f
lookup	vector/vectorf256e.h	/^static inline Vec8f lookup(Vec8i const & index, float const * table) {$/;"	f
lookup	vector/vectori128.h	/^static inline Vec16c lookup(Vec16c const & index, void const * table) {$/;"	f
lookup	vector/vectori128.h	/^static inline Vec2q lookup(Vec2q const & index, void const * table) {$/;"	f
lookup	vector/vectori128.h	/^static inline Vec4i lookup(Vec4i const & index, void const * table) {$/;"	f
lookup	vector/vectori128.h	/^static inline Vec8s lookup(Vec8s const & index, void const * table) {$/;"	f
lookup	vector/vectori256.h	/^static inline Vec16s lookup(Vec16s const & index, void const * table) {$/;"	f
lookup	vector/vectori256.h	/^static inline Vec32c lookup(Vec32c const & index, void const * table) {$/;"	f
lookup	vector/vectori256.h	/^static inline Vec32c lookup(Vec32uc const & index, void const * table) {$/;"	f
lookup	vector/vectori256.h	/^static inline Vec4q lookup(Vec4q const & index, void const * table) {$/;"	f
lookup	vector/vectori256.h	/^static inline Vec8i lookup(Vec8i const & index, void const * table) {$/;"	f
lookup	vector/vectori256e.h	/^static inline Vec16s lookup(Vec16s const & index, void const * table) {$/;"	f
lookup	vector/vectori256e.h	/^static inline Vec32c lookup(Vec32c const & index, void const * table) {$/;"	f
lookup	vector/vectori256e.h	/^static inline Vec32c lookup(Vec32uc const & index, void const * table) {$/;"	f
lookup	vector/vectori256e.h	/^static inline Vec4q lookup(Vec4q const & index, void const * table) {$/;"	f
lookup	vector/vectori256e.h	/^static inline Vec8i lookup(Vec8i const & index, void const * table) {$/;"	f
lookup16	vector/vectori128.h	/^static inline Vec16c lookup16(Vec16c const & index, Vec16c const & table) {$/;"	f
lookup16	vector/vectori128.h	/^static inline Vec4i lookup16(Vec4i const & index, Vec4i const & table0, Vec4i const & table1, Vec4i const & table2, Vec4i const & table3) {$/;"	f
lookup16	vector/vectori128.h	/^static inline Vec8s lookup16(Vec8s const & index, Vec8s const & table0, Vec8s const & table1) {$/;"	f
lookup16	vector/vectori256.h	/^static inline Vec16s lookup16(Vec16s const & index, Vec16s const & table) {$/;"	f
lookup16	vector/vectori256e.h	/^static inline Vec16s lookup16(Vec16s const & index, Vec16s const & table) {$/;"	f
lookup2	vector/vectorf128.h	/^static inline Vec2d lookup2(Vec2q const & index, Vec2d const & table) {$/;"	f
lookup2	vector/vectori128.h	/^static inline Vec2q lookup2(Vec2q const & index, Vec2q const & table) {$/;"	f
lookup32	vector/vectori128.h	/^static inline Vec16c lookup32(Vec16c const & index, Vec16c const & table0, Vec16c const & table1) {$/;"	f
lookup32	vector/vectori256.h	/^static inline Vec32c lookup32(Vec32c const & index, Vec32c const & table) {$/;"	f
lookup32	vector/vectori256e.h	/^static inline Vec32c lookup32(Vec32c const & index, Vec32c const & table) {$/;"	f
lookup4	vector/vectorf128.h	/^static inline Vec2d lookup4(Vec2q const & index, Vec2d const & table0, Vec2d const & table1) {$/;"	f
lookup4	vector/vectorf128.h	/^static inline Vec4f lookup4(Vec4i const & index, Vec4f const & table) {$/;"	f
lookup4	vector/vectorf256.h	/^static inline Vec4d lookup4(Vec4q const & index, Vec4d const & table) {$/;"	f
lookup4	vector/vectorf256e.h	/^static inline Vec4d lookup4(Vec4q const & index, Vec4d const & table) {$/;"	f
lookup4	vector/vectori128.h	/^static inline Vec4i lookup4(Vec4i const & index, Vec4i const & table) {$/;"	f
lookup4	vector/vectori256.h	/^static inline Vec4q lookup4(Vec4q const & index, Vec4q const & table) {$/;"	f
lookup4	vector/vectori256e.h	/^static inline Vec4q lookup4(Vec4q const & index, Vec4q const & table) {$/;"	f
lookup8	vector/vectorf128.h	/^static inline Vec4f lookup8(Vec4i const & index, Vec4f const & table0, Vec4f const & table1) {$/;"	f
lookup8	vector/vectorf256.h	/^static inline Vec8f lookup8(Vec8i const & index, Vec8f const & table) {$/;"	f
lookup8	vector/vectorf256e.h	/^static inline Vec8f lookup8(Vec8i const & index, Vec8f const & table) {$/;"	f
lookup8	vector/vectori128.h	/^static inline Vec4i lookup8(Vec4i const & index, Vec4i const & table0, Vec4i const & table1) {$/;"	f
lookup8	vector/vectori128.h	/^static inline Vec8s lookup8(Vec8s const & index, Vec8s const & table) {$/;"	f
lookup8	vector/vectori256.h	/^static inline Vec8i lookup8(Vec8i const & index, Vec8i const & table) {$/;"	f
lookup8	vector/vectori256e.h	/^static inline Vec8i lookup8(Vec8i const & index, Vec8i const & table) {$/;"	f
lp	MUMmer/src/tigr/delta.hh	/^  DeltaEdgelet_t * lp;$/;"	m	struct:SNP_t
main	MUMmer/dnadiff	/^ main:$/;"	l
main	MUMmer/nucmer	/^sub main ( )$/;"	s
main	MUMmer/promer	/^sub main ( )$/;"	s
main	MUMmer/scripts/dnadiff.pl	/^ main:$/;"	l
main	MUMmer/scripts/nucmer.pl	/^sub main ( )$/;"	s
main	MUMmer/scripts/promer.pl	/^sub main ( )$/;"	s
main	MUMmer/src/tigr/annotate.cc	/^int main  (int argc, char * argv [])$/;"	f
main	MUMmer/src/tigr/combineMUMs.cc	/^int  main$/;"	f
main	MUMmer/src/tigr/delta-filter.cc	/^int main(int argc, char ** argv)$/;"	f
main	MUMmer/src/tigr/gaps.cc	/^int main  (int argc, char * argv [])$/;"	f
main	MUMmer/src/tigr/mgaps.cc	/^int  main$/;"	f
main	MUMmer/src/tigr/postnuc.cc	/^int main$/;"	f
main	MUMmer/src/tigr/postpro.cc	/^int main$/;"	f
main	MUMmer/src/tigr/prenuc.cc	/^int main$/;"	f
main	MUMmer/src/tigr/prepro.cc	/^int main$/;"	f
main	MUMmer/src/tigr/repeat-match.cc	/^int main  (int argc, char * argv [])$/;"	f
main	MUMmer/src/tigr/show-aligns.cc	/^int main$/;"	f
main	MUMmer/src/tigr/show-coords.cc	/^int main$/;"	f
main	MUMmer/src/tigr/show-diff.cc	/^int main(int argc, char **argv)$/;"	f
main	MUMmer/src/tigr/show-snps.cc	/^int main (int argc, char ** argv)$/;"	f
main	MUMmer/src/tigr/show-tiling.cc	/^int main$/;"	f
main	mummer.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	toci.cpp	/^int main(int argc, char *argv[])$/;"	f
main	vector/dispatch_example.cpp	/^int main(int argc, char* argv[]) $/;"	f
makedepthtabstree	MUMmer/src/kurtz/streesrc/depthtab.c	/^void makedepthtabstree(ArrayUint *depthtab,Suffixtree *stree)$/;"	f
makedepthtabstree	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^void makedepthtabstree(ArrayUint *depthtab,Suffixtree *stree)$/;"	f
makeleaflist	MUMmer/src/kurtz/streesrc/dfs.c	/^Sint makeleaflist(Suffixtree *stree,ArrayUint *leaflist,Reference *start)$/;"	f
makeleastlengthtext	MUMmer/src/kurtz/mm3src/maxmatopt.c	/^static void makeleastlengthtext(char *spacefortext)$/;"	f	file:
mappedbytes	MUMmer/src/kurtz/libbasedir/mapfile.c	/^            mappedbytes[MAXMAPPEDFILES] = {0};  \/\/ size of the memory map$/;"	v	file:
mappingdraft	MUMmer/docs/web/manual/index.html	/^<h3><a name="mappingdraft"><\/a>4.3. Mapping a draft sequence to a finished sequence<\/h3>$/;"	a
mapview	MUMmer/docs/web/examples/index.html	/^<h3><a name="mapview"><\/a>2.1. mapview<\/h3>$/;"	a
mapview	MUMmer/docs/web/manual/index.html	/^<h4><a name="mapview" id="mapview"><\/a>5.4.2. mapview<\/h4>$/;"	a
mapviewmapview	MUMmer/docs/web/examples/index.html	/^<h4><a name="mapviewmapview" id="mapviewmapview"><\/a>2.1.2. Running mapview<\/h4>$/;"	a
markpos	MUMmer/src/kurtz/libbasedir/multidef.h	/^  ArrayPosition markpos;$/;"	m	struct:__anon21
mask	MUMmer/src/tigr/prepro.cc	/^inline void mask$/;"	f
match_t	sparseSA.hpp	/^  match_t() { ref = 0; query = 0, len = 0; }$/;"	f	struct:match_t
match_t	sparseSA.hpp	/^  match_t(long r, long q, long l) { ref = r; query = q; len = l; }$/;"	f	struct:match_t
match_t	sparseSA.hpp	/^struct match_t {$/;"	s
matches	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^Uint matches = 0;$/;"	v
matches	MUMmer/src/tigr/postnuc.cc	/^  vector<Match> matches;     \/\/ the ordered set of matches in the cluster$/;"	m	struct:Cluster	file:
matches	MUMmer/src/tigr/postpro.cc	/^  vector<Match> matches;     \/\/ the ordered set of matches in the cluster$/;"	m	struct:Cluster	file:
matchnucleotidesonly	MUMmer/src/kurtz/mm3src/maxmatdef.h	/^       matchnucleotidesonly,    \/\/ match ONLY acgt's$/;"	m	struct:__anon4
matchpath	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^  ArrayPathinfo matchpath;        \/\/ path of br. nodes from ploc to maxloc$/;"	m	struct:__anon2	file:
max	MUMmer/src/tigr/sw_align.hh	/^  Score * max;$/;"	m	struct:Node
max	vector/vectorf128.h	/^static inline Vec2d max(Vec2d const & a, Vec2d const & b) {$/;"	f
max	vector/vectorf128.h	/^static inline Vec4f max(Vec4f const & a, Vec4f const & b) {$/;"	f
max	vector/vectorf256.h	/^static inline Vec4d max(Vec4d const & a, Vec4d const & b) {$/;"	f
max	vector/vectorf256.h	/^static inline Vec8f max(Vec8f const & a, Vec8f const & b) {$/;"	f
max	vector/vectorf256e.h	/^static inline Vec4d max(Vec4d const & a, Vec4d const & b) {$/;"	f
max	vector/vectorf256e.h	/^static inline Vec8f max(Vec8f const & a, Vec8f const & b) {$/;"	f
max	vector/vectori128.h	/^static inline Vec16c max(Vec16c const & a, Vec16c const & b) {$/;"	f
max	vector/vectori128.h	/^static inline Vec16uc max(Vec16uc const & a, Vec16uc const & b) {$/;"	f
max	vector/vectori128.h	/^static inline Vec2q max(Vec2q const & a, Vec2q const & b) {$/;"	f
max	vector/vectori128.h	/^static inline Vec2uq max(Vec2uq const & a, Vec2uq const & b) {$/;"	f
max	vector/vectori128.h	/^static inline Vec4i max(Vec4i const & a, Vec4i const & b) {$/;"	f
max	vector/vectori128.h	/^static inline Vec4ui max(Vec4ui const & a, Vec4ui const & b) {$/;"	f
max	vector/vectori128.h	/^static inline Vec8s max(Vec8s const & a, Vec8s const & b) {$/;"	f
max	vector/vectori128.h	/^static inline Vec8us max(Vec8us const & a, Vec8us const & b) {$/;"	f
max	vector/vectori256.h	/^static inline Vec16s max(Vec16s const & a, Vec16s const & b) {$/;"	f
max	vector/vectori256.h	/^static inline Vec16us max(Vec16us const & a, Vec16us const & b) {$/;"	f
max	vector/vectori256.h	/^static inline Vec32c max(Vec32c const & a, Vec32c const & b) {$/;"	f
max	vector/vectori256.h	/^static inline Vec32uc max(Vec32uc const & a, Vec32uc const & b) {$/;"	f
max	vector/vectori256.h	/^static inline Vec4q max(Vec4q const & a, Vec4q const & b) {$/;"	f
max	vector/vectori256.h	/^static inline Vec4uq max(Vec4uq const & a, Vec4uq const & b) {$/;"	f
max	vector/vectori256.h	/^static inline Vec8i max(Vec8i const & a, Vec8i const & b) {$/;"	f
max	vector/vectori256.h	/^static inline Vec8ui max(Vec8ui const & a, Vec8ui const & b) {$/;"	f
max	vector/vectori256e.h	/^static inline Vec16s max(Vec16s const & a, Vec16s const & b) {$/;"	f
max	vector/vectori256e.h	/^static inline Vec16us max(Vec16us const & a, Vec16us const & b) {$/;"	f
max	vector/vectori256e.h	/^static inline Vec32c max(Vec32c const & a, Vec32c const & b) {$/;"	f
max	vector/vectori256e.h	/^static inline Vec32uc max(Vec32uc const & a, Vec32uc const & b) {$/;"	f
max	vector/vectori256e.h	/^static inline Vec4q max(Vec4q const & a, Vec4q const & b) {$/;"	f
max	vector/vectori256e.h	/^static inline Vec4uq max(Vec4uq const & a, Vec4uq const & b) {$/;"	f
max	vector/vectori256e.h	/^static inline Vec8i max(Vec8i const & a, Vec8i const & b) {$/;"	f
max	vector/vectori256e.h	/^static inline Vec8ui max(Vec8ui const & a, Vec8ui const & b) {$/;"	f
maxScore	MUMmer/src/tigr/sw_align.cc	/^static inline Score * maxScore$/;"	f	file:
maxbranchdepth	MUMmer/src/kurtz/streesrc/streetyp.h	/^       maxbranchdepth,        \/\/ maximal depth of branching node$/;"	m	struct:Suffixtreetype
maxdesclength	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^       maxdesclength,          \/\/ maximum length of a description$/;"	m	struct:__anon3	file:
maxdescrlen	sparseSA.hpp	/^  long maxdescrlen; \/\/ Maximum length of the sequence description, used for formatting.$/;"	m	struct:sparseSA
maxerrormsg	MUMmer/src/kurtz/libbasedir/seterror.c	/^Sint maxerrormsg(void)$/;"	f
maximal	MUMmer/docs/web/manual/index.html	/^<h3><a name="maximal"><\/a>5.1. Maximal exact matching<\/h3>$/;"	a
maxlength	MUMmer/src/kurtz/libbasedir/multidef.h	/^       maxlength;        \/\/ maximal number of chars of description to be shown$/;"	m	struct:__anon22
maxloc	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^  Location maxloc;                \/\/ location of \\texttt{pmax}$/;"	m	struct:__anon2	file:
maxset	MUMmer/src/kurtz/streesrc/streetyp.h	/^       *maxset;$/;"	m	struct:Suffixtreetype
memCount	sparseSA.cpp	/^long memCount = 0;$/;"	v
memoryptr	MUMmer/src/kurtz/libbasedir/mapfile.c	/^static void *memoryptr[MAXMAPPEDFILES] = {NULL};$/;"	v	file:
messagespace	MUMmer/src/kurtz/libbasedir/seterror.c	/^char *messagespace(void)$/;"	f
mgaps	MUMmer/docs/web/manual/index.html	/^<h4><a name="mgaps"><\/a>5.2.2. mgaps<\/h4>$/;"	a
mgapsoutput	MUMmer/docs/web/manual/index.html	/^<h5><a name="mgapsoutput"><\/a>Output format<\/h5>$/;"	a
min	vector/vectorf128.h	/^static inline Vec2d min(Vec2d const & a, Vec2d const & b) {$/;"	f
min	vector/vectorf128.h	/^static inline Vec4f min(Vec4f const & a, Vec4f const & b) {$/;"	f
min	vector/vectorf256.h	/^static inline Vec4d min(Vec4d const & a, Vec4d const & b) {$/;"	f
min	vector/vectorf256.h	/^static inline Vec8f min(Vec8f const & a, Vec8f const & b) {$/;"	f
min	vector/vectorf256e.h	/^static inline Vec4d min(Vec4d const & a, Vec4d const & b) {$/;"	f
min	vector/vectorf256e.h	/^static inline Vec8f min(Vec8f const & a, Vec8f const & b) {$/;"	f
min	vector/vectori128.h	/^static inline Vec16c min(Vec16c const & a, Vec16c const & b) {$/;"	f
min	vector/vectori128.h	/^static inline Vec16uc min(Vec16uc const & a, Vec16uc const & b) {$/;"	f
min	vector/vectori128.h	/^static inline Vec2q min(Vec2q const & a, Vec2q const & b) {$/;"	f
min	vector/vectori128.h	/^static inline Vec2uq min(Vec2uq const & a, Vec2uq const & b) {$/;"	f
min	vector/vectori128.h	/^static inline Vec4i min(Vec4i const & a, Vec4i const & b) {$/;"	f
min	vector/vectori128.h	/^static inline Vec4ui min(Vec4ui const & a, Vec4ui const & b) {$/;"	f
min	vector/vectori128.h	/^static inline Vec8s min(Vec8s const & a, Vec8s const & b) {$/;"	f
min	vector/vectori128.h	/^static inline Vec8us min(Vec8us const & a, Vec8us const & b) {$/;"	f
min	vector/vectori256.h	/^static inline Vec16s min(Vec16s const & a, Vec16s const & b) {$/;"	f
min	vector/vectori256.h	/^static inline Vec16us min(Vec16us const & a, Vec16us const & b) {$/;"	f
min	vector/vectori256.h	/^static inline Vec32c min(Vec32c const & a, Vec32c const & b) {$/;"	f
min	vector/vectori256.h	/^static inline Vec32uc min(Vec32uc const & a, Vec32uc const & b) {$/;"	f
min	vector/vectori256.h	/^static inline Vec4q min(Vec4q const & a, Vec4q const & b) {$/;"	f
min	vector/vectori256.h	/^static inline Vec4uq min(Vec4uq const & a, Vec4uq const & b) {$/;"	f
min	vector/vectori256.h	/^static inline Vec8i min(Vec8i const & a, Vec8i const & b) {$/;"	f
min	vector/vectori256.h	/^static inline Vec8ui min(Vec8ui const & a, Vec8ui const & b) {$/;"	f
min	vector/vectori256e.h	/^static inline Vec16s min(Vec16s const & a, Vec16s const & b) {$/;"	f
min	vector/vectori256e.h	/^static inline Vec16us min(Vec16us const & a, Vec16us const & b) {$/;"	f
min	vector/vectori256e.h	/^static inline Vec32c min(Vec32c const & a, Vec32c const & b) {$/;"	f
min	vector/vectori256e.h	/^static inline Vec32uc min(Vec32uc const & a, Vec32uc const & b) {$/;"	f
min	vector/vectori256e.h	/^static inline Vec4q min(Vec4q const & a, Vec4q const & b) {$/;"	f
min	vector/vectori256e.h	/^static inline Vec4uq min(Vec4uq const & a, Vec4uq const & b) {$/;"	f
min	vector/vectori256e.h	/^static inline Vec8i min(Vec8i const & a, Vec8i const & b) {$/;"	f
min	vector/vectori256e.h	/^static inline Vec8ui min(Vec8ui const & a, Vec8ui const & b) {$/;"	f
min_len	mummer.cpp	/^int min_len = 20;$/;"	v
min_len	sparseSA.cpp	/^  int min_len; \/\/ Minimum length of match.$/;"	m	struct:thread_data	file:
minmatchlength	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^       minmatchlength,            \/\/ min length of a match to be reported$/;"	m	struct:__anon2	file:
minmatchlength	MUMmer/src/kurtz/mm3src/maxmatdef.h	/^  Uint minmatchlength,          \/\/ minimal length of a match to be reported$/;"	m	struct:__anon4
minmatchlength	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^  Uint minmatchlength,         \/\/ minimum length of a match$/;"	m	struct:__anon3	file:
mmaddspace	MUMmer/src/kurtz/libbasedir/mapfile.c	/^static void mmaddspace(Uint space)$/;"	f	file:
mmcheckspaceleak	MUMmer/src/kurtz/libbasedir/mapfile.c	/^void mmcheckspaceleak(void)$/;"	f
mmgetspacepeak	MUMmer/src/kurtz/libbasedir/mapfile.c	/^Uint mmgetspacepeak(void)$/;"	f
mmshowspace	MUMmer/src/kurtz/libbasedir/mapfile.c	/^void mmshowspace(void)$/;"	f
mmsubtractspace	MUMmer/src/kurtz/libbasedir/mapfile.c	/^static void mmsubtractspace(Uint space)$/;"	f	file:
mmwrapspace	MUMmer/src/kurtz/libbasedir/mapfile.c	/^Sint mmwrapspace(void)$/;"	f
multiplications	MUMmer/src/kurtz/streesrc/streetyp.h	/^       multiplications,$/;"	m	struct:Suffixtreetype
multiplier	vector/vectori128.h	/^    __m128i multiplier;                                    \/\/ multiplier used in fast division$/;"	m	class:Divisor_i
multiplier	vector/vectori128.h	/^    __m128i multiplier;                                    \/\/ multiplier used in fast division$/;"	m	class:Divisor_s
multiplier	vector/vectori128.h	/^    __m128i multiplier;                                    \/\/ multiplier used in fast division$/;"	m	class:Divisor_ui
multiplier	vector/vectori128.h	/^    __m128i multiplier;                                    \/\/ multiplier used in fast division$/;"	m	class:Divisor_us
mum_t	mummer.cpp	/^enum mum_t { MUM, MAM, MEM };$/;"	g	file:
mumcandtab	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^  ArrayMUMcandidate mumcandtab;\/\/ a table containing MUM-candidates$/;"	m	struct:__anon3	file:
mumlength	MUMmer/src/kurtz/libbasedir/mumcand.h	/^  Uint mumlength,    \/\/ length of the mum$/;"	m	struct:__anon19
mummer	MUMmer/docs/web/examples/index.html	/^<h3><a name="mummer"><\/a>2.2. mummer<\/h3>$/;"	a
mummer	MUMmer/docs/web/manual/index.html	/^<h4><a name="mummer"><\/a>5.1.1. mummer<\/h4>$/;"	a
mummer1	MUMmer/docs/web/examples/index.html	/^<h3><a name="mummer1"><\/a>2.5. run-mummer1<\/h3>$/;"	a
mummer1	MUMmer/docs/web/manual/index.html	/^<h4><a name="mummer1"><\/a>5.3.3. run-mummer1<\/h4>$/;"	a
mummer3	MUMmer/docs/web/examples/index.html	/^<h3><a name="mummer3"><\/a>2.6. run-mummer3<\/h3>$/;"	a
mummer3	MUMmer/docs/web/manual/index.html	/^<h4><a name="mummer3"><\/a>5.3.4. run-mummer3<\/h4>$/;"	a
mummermummer	MUMmer/docs/web/examples/index.html	/^<h4><a name="mummermummer" id="mummermummer"><\/a>2.2.1. Running mummer<\/h4>$/;"	a
mummeroutput	MUMmer/docs/web/manual/index.html	/^<h5><a name="mummeroutput"><\/a>Output format<\/h5>$/;"	a
mummerplot	MUMmer/docs/web/manual/index.html	/^<h4><a name="mummerplot"><\/a>5.4.3. mummerplot<\/h4>$/;"	a
mummerplotmummer	MUMmer/docs/web/examples/index.html	/^<h4><a name="mummerplotmummer" id="mummerplotmummer"><\/a>2.2.2. Running mummerplot<\/h4>$/;"	a
mumuniqueinquery	MUMmer/src/kurtz/libbasedir/cleanMUMcand.c	/^Sint mumuniqueinquery(void *processinfo,$/;"	f
myfunc	vector/dispatch_example.cpp	/^MyFuncType  myfunc, myfunc_SSE2, myfunc_SSE41, myfunc_AVX, myfunc_dispatch; $/;"	v
myfunc	vector/dispatch_example.cpp	/^inline float myfunc(float * f) {$/;"	f
myfunc_AVX	vector/dispatch_example.cpp	/^MyFuncType  myfunc, myfunc_SSE2, myfunc_SSE41, myfunc_AVX, myfunc_dispatch; $/;"	v
myfunc_SSE2	vector/dispatch_example.cpp	/^MyFuncType  myfunc, myfunc_SSE2, myfunc_SSE41, myfunc_AVX, myfunc_dispatch; $/;"	v
myfunc_SSE41	vector/dispatch_example.cpp	/^MyFuncType  myfunc, myfunc_SSE2, myfunc_SSE41, myfunc_AVX, myfunc_dispatch; $/;"	v
myfunc_dispatch	vector/dispatch_example.cpp	/^MyFuncType  myfunc, myfunc_SSE2, myfunc_SSE41, myfunc_AVX, myfunc_dispatch; $/;"	v
myfunc_dispatch	vector/dispatch_example.cpp	/^float myfunc_dispatch(float * f) {$/;"	f
myfunc_pointer	vector/dispatch_example.cpp	/^MyFuncType * myfunc_pointer = &myfunc_dispatch;            \/\/ function pointer$/;"	v
nCols_m	MUMmer/src/tigr/annotate.cc	/^  long nRows_m, nCols_m;$/;"	m	class:Matrix_t	file:
nRows_m	MUMmer/src/tigr/annotate.cc	/^  long nRows_m, nCols_m;$/;"	m	class:Matrix_t	file:
nan2d	vector/vectorf128.h	/^static inline Vec2d nan2d() {$/;"	f
nan4d	vector/vectorf256.h	/^static inline Vec4d nan4d() {$/;"	f
nan4d	vector/vectorf256e.h	/^static inline Vec4d nan4d() {$/;"	f
nan4f	vector/vectorf128.h	/^static inline Vec4f nan4f() {$/;"	f
nan8f	vector/vectorf256.h	/^static inline Vec8f nan8f() {$/;"	f
nan8f	vector/vectorf256e.h	/^static inline Vec8f nan8f() {$/;"	f
new	MUMmer/scripts/Foundation.pm	/^   sub new() {$/;"	s
next	MUMmer/src/tigr/combineMUMs.cc	/^   struct s_Cover_t  * next;$/;"	m	struct:s_Cover_t	typeref:struct:s_Cover_t::s_Cover_t	file:
nextbranchingnode	MUMmer/src/kurtz/streesrc/iterator.c	/^\/*@null@*\/ Bref nextbranchingnode(Suffixtree *stree,Bref bptr)$/;"	f
nextfreeStrings	MUMmer/src/kurtz/libbasedir/arraydef.h	/^  Uint stringbufferlength, nextfreeStrings, allocatedStrings;$/;"	m	struct:__anon20
nextfreeblock	MUMmer/src/kurtz/libbasedir/space.c	/^            nextfreeblock = 0,  \/\/ index of next free block$/;"	v	file:
nextfreebranch	MUMmer/src/kurtz/streesrc/streetyp.h	/^       *nextfreebranch,       \/\/ reference to next free base addr. in branchtab$/;"	m	struct:Suffixtreetype
nextfreebranchnum	MUMmer/src/kurtz/streesrc/streetyp.h	/^       nextfreebranchnum,     \/\/ the number of the next free branch node$/;"	m	struct:Suffixtreetype
nextfreeleafnum	MUMmer/src/kurtz/streesrc/streetyp.h	/^  Uint nextfreeleafnum,       \/\/ the number of the next leaf$/;"	m	struct:Suffixtreetype
nextfreeleafptr	MUMmer/src/kurtz/streesrc/streetyp.h	/^       *nextfreeleafptr,      \/\/ points to next free entry in leaftab$/;"	m	struct:Suffixtreetype
nextleaf	MUMmer/src/kurtz/streesrc/iterator.c	/^\/*@null@*\/ Lref nextleaf(Suffixtree *stree,Lref lptr)$/;"	f
nextnode	MUMmer/src/kurtz/streesrc/iterator.c	/^\/*@null@*\/ Reference *nextnode(Suffixtree *stree,Reference *nref,$/;"	f
nextnode	MUMmer/src/kurtz/streesrc/streetyp.h	/^  Reference nextnode;   \/\/ reference to node the edge points to$/;"	m	struct:__anon9
nextnode	MUMmer/src/kurtz/streesrc/streetyp.h	/^  Reference nextnode;$/;"	m	struct:__anon10
nextnodedfs	MUMmer/src/kurtz/streesrc/iterator.c	/^\/*@null@*\/ Reference *nextnodedfs(Suffixtree *stree,Reference *current,$/;"	f
no_denormals	vector/vectorf128.h	/^static inline void no_denormals() {$/;"	f
node	MUMmer/src/tigr/repeat-match.cc	/^typedef  struct node$/;"	s	file:
nodecount	MUMmer/src/kurtz/streesrc/streetyp.h	/^       nodecount,$/;"	m	struct:Suffixtreetype
nonmaximal	MUMmer/src/kurtz/streesrc/streetyp.h	/^       *nonmaximal,           \/\/ bit table: if node with headposition \\(i\\) is $/;"	m	struct:Suffixtreetype
normalize_vector	vector/special/vector3d.h	/^static inline Vec3d normalize_vector (Vec3d const & a) {$/;"	f
normalize_vector	vector/special/vector3d.h	/^static inline Vec3f normalize_vector (Vec3f const & a) {$/;"	f
nucleotides_only	mummer.cpp	/^bool rev_comp = false, _4column = false, nucleotides_only = false;$/;"	v
nucmer	MUMmer/docs/web/examples/index.html	/^<h3><a name="nucmer"><\/a>2.3. nucmer<\/h3>$/;"	a
nucmer	MUMmer/docs/web/manual/index.html	/^<h4><a name="nucmer"><\/a>5.3.1. NUCmer<\/h4>$/;"	a
nucmernucmer	MUMmer/docs/web/examples/index.html	/^<h4><a name="nucmernucmer"><\/a>2.3.1. Running nucmer<\/h4>$/;"	a
nucmeroptions	MUMmer/docs/web/manual/index.html	/^<h5><a name="nucmeroptions"><\/a>Program options<\/h5>$/;"	a
nucmeroutput	MUMmer/docs/web/manual/index.html	/^<h5><a name="nucmeroutput" id="nucmeroutput"><\/a>Output format<\/h5>$/;"	a
num_threads	mummer.cpp	/^int K = 1, num_threads = 1, query_threads = 1;$/;"	v
numberofblocks	MUMmer/src/kurtz/libbasedir/space.c	/^static Uint numberofblocks = 0, \/\/ numberofblocks$/;"	v	file:
numberofcells	MUMmer/src/kurtz/libbasedir/space.c	/^       numberofcells;  \/\/ number of cells in the block$/;"	m	struct:__anon24	file:
numofqueryfiles	MUMmer/src/kurtz/mm3src/maxmatdef.h	/^       numofqueryfiles;         \/\/ number of query files$/;"	m	struct:__anon4
numofsequences	MUMmer/src/kurtz/libbasedir/multidef.h	/^       numofsequences,                 \/\/ the number of sequences$/;"	m	struct:__anon21
obtaining	MUMmer/docs/web/manual/index.html	/^<h3><a name="obtaining"><\/a>2.2. Obtaining MUMmer<\/h3>$/;"	a
occursinlist	MUMmer/src/kurtz/libbasedir/procopt.c	/^static BOOL occursinlist(Uint i,Sint *list)$/;"	f	file:
onmaxpath	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^  BOOL onmaxpath;$/;"	m	struct:__anon1	file:
onsuccpath	MUMmer/src/kurtz/streesrc/streetyp.h	/^       onsuccpath,            \/\/ refers to node on success path of headnode$/;"	m	struct:Suffixtreetype
open	MUMmer/src/tigr/delta.cc	/^void DeltaReader_t::open$/;"	f	class:DeltaReader_t
openLogERROR	MUMmer/scripts/Foundation.pm	/^   sub openLogERROR() {$/;"	s
openLogMSG	MUMmer/scripts/Foundation.pm	/^   sub openLogMSG() {$/;"	s
operator	MUMmer/src/tigr/show-aligns.cc	/^  bool operator( ) (const AlignStats & pA, const AlignStats & pB)$/;"	f	struct:sQ_Sort
operator	MUMmer/src/tigr/show-aligns.cc	/^  bool operator( ) (const AlignStats & pA, const AlignStats & pB)$/;"	f	struct:sR_Sort
operator	MUMmer/src/tigr/show-tiling.cc	/^  bool operator( ) (const AlignStats & pA, const AlignStats & pB)$/;"	f	struct:IdR_sQ_Sort
operator	MUMmer/src/tigr/show-tiling.cc	/^  bool operator( ) (const QueryContig & pA, const QueryContig & pB)$/;"	f	struct:IdQ_Sort
operator	MUMmer/src/tigr/show-tiling.cc	/^  bool operator( ) (const QueryContig & pA, const QueryContig & pB)$/;"	f	struct:IdR_StartRTrimmed_Sort
operator	MUMmer/src/tigr/show-tiling.cc	/^  bool operator( ) (const QueryContig & pA, const QueryContig & pB)$/;"	f	struct:IdR_StartR_Sort
operator !	vector/vectorf128.h	/^static inline Vec2db operator ! (Vec2d const & a) {$/;"	f
operator !	vector/vectorf128.h	/^static inline Vec2db operator ! (Vec2db const & a) {$/;"	f
operator !	vector/vectorf128.h	/^static inline Vec4fb operator ! (Vec4f const & a) {$/;"	f
operator !	vector/vectorf128.h	/^static inline Vec4fb operator ! (Vec4fb const & a) {$/;"	f
operator !	vector/vectorf256.h	/^static inline Vec4db operator ! (Vec4d const & a) {$/;"	f
operator !	vector/vectorf256.h	/^static inline Vec4db operator ! (Vec4db const & a) {$/;"	f
operator !	vector/vectorf256.h	/^static inline Vec8fb operator ! (Vec8f const & a) {$/;"	f
operator !	vector/vectorf256.h	/^static inline Vec8fb operator ! (Vec8fb const & a) {$/;"	f
operator !	vector/vectorf256e.h	/^static inline Vec4db operator ! (Vec4d const & a) {$/;"	f
operator !	vector/vectorf256e.h	/^static inline Vec4db operator ! (Vec4db const & a) {$/;"	f
operator !	vector/vectorf256e.h	/^static inline Vec8fb operator ! (Vec8f const & a) {$/;"	f
operator !	vector/vectorf256e.h	/^static inline Vec8fb operator ! (Vec8fb const & a) {$/;"	f
operator !	vector/vectori128.h	/^static inline Vec16c operator ! (Vec16c const & a) {$/;"	f
operator !	vector/vectori128.h	/^static inline Vec2q operator ! (Vec2q const & a) {$/;"	f
operator !	vector/vectori128.h	/^static inline Vec4i operator ! (Vec4i const & a) {$/;"	f
operator !	vector/vectori128.h	/^static inline Vec8s operator ! (Vec8s const & a) {$/;"	f
operator !	vector/vectori256.h	/^static inline Vec16s operator ! (Vec16s const & a) {$/;"	f
operator !	vector/vectori256.h	/^static inline Vec32c operator ! (Vec32c const & a) {$/;"	f
operator !	vector/vectori256.h	/^static inline Vec4q operator ! (Vec4q const & a) {$/;"	f
operator !	vector/vectori256.h	/^static inline Vec8i operator ! (Vec8i const & a) {$/;"	f
operator !	vector/vectori256e.h	/^static inline Vec16s operator ! (Vec16s const & a) {$/;"	f
operator !	vector/vectori256e.h	/^static inline Vec32c operator ! (Vec32c const & a) {$/;"	f
operator !	vector/vectori256e.h	/^static inline Vec4q operator ! (Vec4q const & a) {$/;"	f
operator !	vector/vectori256e.h	/^static inline Vec8i operator ! (Vec8i const & a) {$/;"	f
operator !=	vector/special/complexvec.h	/^static inline Vec2db operator != (Complex4f const & a, Complex4f const & b) {$/;"	f
operator !=	vector/special/complexvec.h	/^static inline Vec4db operator != (Complex4d const & a, Complex4d const & b) {$/;"	f
operator !=	vector/special/complexvec.h	/^static inline Vec4db operator != (Complex8f const & a, Complex8f const & b) {$/;"	f
operator !=	vector/special/complexvec.h	/^static inline bool operator != (Complex2d const & a, Complex2d const & b) {$/;"	f
operator !=	vector/special/complexvec.h	/^static inline bool operator != (Complex2f const & a, Complex2f const & b) {$/;"	f
operator !=	vector/special/quaternion.h	/^static inline bool operator != (Quaternion4d const & a, Quaternion4d const & b) {$/;"	f
operator !=	vector/special/quaternion.h	/^static inline bool operator != (Quaternion4f const & a, Quaternion4f const & b) {$/;"	f
operator !=	vector/special/vector3d.h	/^static inline bool operator != (Vec3d const & a, Vec3d const & b) {$/;"	f
operator !=	vector/special/vector3d.h	/^static inline bool operator != (Vec3f const & a, Vec3f const & b) {$/;"	f
operator !=	vector/vectorf128.h	/^static inline Vec2db operator != (Vec2d const & a, Vec2d const & b) {$/;"	f
operator !=	vector/vectorf128.h	/^static inline Vec4fb operator != (Vec4f const & a, Vec4f const & b) {$/;"	f
operator !=	vector/vectorf256.h	/^static inline Vec4db operator != (Vec4d const & a, Vec4d const & b) {$/;"	f
operator !=	vector/vectorf256.h	/^static inline Vec8fb operator != (Vec8f const & a, Vec8f const & b) {$/;"	f
operator !=	vector/vectorf256e.h	/^static inline Vec4db operator != (Vec4d const & a, Vec4d const & b) {$/;"	f
operator !=	vector/vectorf256e.h	/^static inline Vec8fb operator != (Vec8f const & a, Vec8f const & b) {$/;"	f
operator !=	vector/vectori128.h	/^static inline Vec16c operator != (Vec16c const & a, Vec16c const & b) {$/;"	f
operator !=	vector/vectori128.h	/^static inline Vec2q operator != (Vec2q const & a, Vec2q const & b) {$/;"	f
operator !=	vector/vectori128.h	/^static inline Vec4i operator != (Vec4i const & a, Vec4i const & b) {$/;"	f
operator !=	vector/vectori128.h	/^static inline Vec8s operator != (Vec8s const & a, Vec8s const & b) {$/;"	f
operator !=	vector/vectori256.h	/^static inline Vec16s operator != (Vec16s const & a, Vec16s const & b) {$/;"	f
operator !=	vector/vectori256.h	/^static inline Vec32c operator != (Vec32c const & a, Vec32c const & b) {$/;"	f
operator !=	vector/vectori256.h	/^static inline Vec4q operator != (Vec4q const & a, Vec4q const & b) {$/;"	f
operator !=	vector/vectori256.h	/^static inline Vec8i operator != (Vec8i const & a, Vec8i const & b) {$/;"	f
operator !=	vector/vectori256e.h	/^static inline Vec16s operator != (Vec16s const & a, Vec16s const & b) {$/;"	f
operator !=	vector/vectori256e.h	/^static inline Vec32c operator != (Vec32c const & a, Vec32c const & b) {$/;"	f
operator !=	vector/vectori256e.h	/^static inline Vec4q operator != (Vec4q const & a, Vec4q const & b) {$/;"	f
operator !=	vector/vectori256e.h	/^static inline Vec8i operator != (Vec8i const & a, Vec8i const & b) {$/;"	f
operator &	vector/vectorf128.h	/^static inline Vec2d operator & (Vec2d const & a, Vec2d const & b) {$/;"	f
operator &	vector/vectorf128.h	/^static inline Vec2db operator & (Vec2db const & a, Vec2db const & b) {$/;"	f
operator &	vector/vectorf128.h	/^static inline Vec4f operator & (Vec4f const & a, Vec4f const & b) {$/;"	f
operator &	vector/vectorf128.h	/^static inline Vec4fb operator & (Vec4fb const & a, Vec4fb const & b) {$/;"	f
operator &	vector/vectorf256.h	/^static inline Vec4d operator & (Vec4d const & a, Vec4d const & b) {$/;"	f
operator &	vector/vectorf256.h	/^static inline Vec4db operator & (Vec4db const & a, Vec4db const & b) {$/;"	f
operator &	vector/vectorf256.h	/^static inline Vec8f operator & (Vec8f const & a, Vec8f const & b) {$/;"	f
operator &	vector/vectorf256.h	/^static inline Vec8fb operator & (Vec8fb const & a, Vec8fb const & b) {$/;"	f
operator &	vector/vectorf256e.h	/^static inline Vec4d operator & (Vec4d const & a, Vec4d const & b) {$/;"	f
operator &	vector/vectorf256e.h	/^static inline Vec4db operator & (Vec4db const & a, Vec4db const & b) {$/;"	f
operator &	vector/vectorf256e.h	/^static inline Vec8f operator & (Vec8f const & a, Vec8f const & b) {$/;"	f
operator &	vector/vectorf256e.h	/^static inline Vec8fb operator & (Vec8fb const & a, Vec8fb const & b) {$/;"	f
operator &	vector/vectori128.h	/^static inline Vec128b operator & (Vec128b const & a, Vec128b const & b) {$/;"	f
operator &	vector/vectori128.h	/^static inline Vec16c operator & (Vec16c const & a, Vec16c const & b) {$/;"	f
operator &	vector/vectori128.h	/^static inline Vec16uc operator & (Vec16uc const & a, Vec16uc const & b) {$/;"	f
operator &	vector/vectori128.h	/^static inline Vec2q operator & (Vec2q const & a, Vec2q const & b) {$/;"	f
operator &	vector/vectori128.h	/^static inline Vec2uq operator & (Vec2uq const & a, Vec2uq const & b) {$/;"	f
operator &	vector/vectori128.h	/^static inline Vec4i operator & (Vec4i const & a, Vec4i const & b) {$/;"	f
operator &	vector/vectori128.h	/^static inline Vec4ui operator & (Vec4ui const & a, Vec4ui const & b) {$/;"	f
operator &	vector/vectori128.h	/^static inline Vec8s operator & (Vec8s const & a, Vec8s const & b) {$/;"	f
operator &	vector/vectori128.h	/^static inline Vec8us operator & (Vec8us const & a, Vec8us const & b) {$/;"	f
operator &	vector/vectori256.h	/^static inline Vec16s operator & (Vec16s const & a, Vec16s const & b) {$/;"	f
operator &	vector/vectori256.h	/^static inline Vec16us operator & (Vec16us const & a, Vec16us const & b) {$/;"	f
operator &	vector/vectori256.h	/^static inline Vec256b operator & (Vec256b const & a, Vec256b const & b) {$/;"	f
operator &	vector/vectori256.h	/^static inline Vec32c operator & (Vec32c const & a, Vec32c const & b) {$/;"	f
operator &	vector/vectori256.h	/^static inline Vec32uc operator & (Vec32uc const & a, Vec32uc const & b) {$/;"	f
operator &	vector/vectori256.h	/^static inline Vec4q operator & (Vec4q const & a, Vec4q const & b) {$/;"	f
operator &	vector/vectori256.h	/^static inline Vec4uq operator & (Vec4uq const & a, Vec4uq const & b) {$/;"	f
operator &	vector/vectori256.h	/^static inline Vec8i operator & (Vec8i const & a, Vec8i const & b) {$/;"	f
operator &	vector/vectori256.h	/^static inline Vec8ui operator & (Vec8ui const & a, Vec8ui const & b) {$/;"	f
operator &	vector/vectori256e.h	/^static inline Vec16s operator & (Vec16s const & a, Vec16s const & b) {$/;"	f
operator &	vector/vectori256e.h	/^static inline Vec16us operator & (Vec16us const & a, Vec16us const & b) {$/;"	f
operator &	vector/vectori256e.h	/^static inline Vec256b operator & (Vec256b const & a, Vec256b const & b) {$/;"	f
operator &	vector/vectori256e.h	/^static inline Vec32c operator & (Vec32c const & a, Vec32c const & b) {$/;"	f
operator &	vector/vectori256e.h	/^static inline Vec32uc operator & (Vec32uc const & a, Vec32uc const & b) {$/;"	f
operator &	vector/vectori256e.h	/^static inline Vec4q operator & (Vec4q const & a, Vec4q const & b) {$/;"	f
operator &	vector/vectori256e.h	/^static inline Vec4uq operator & (Vec4uq const & a, Vec4uq const & b) {$/;"	f
operator &	vector/vectori256e.h	/^static inline Vec8i operator & (Vec8i const & a, Vec8i const & b) {$/;"	f
operator &	vector/vectori256e.h	/^static inline Vec8ui operator & (Vec8ui const & a, Vec8ui const & b) {$/;"	f
operator &&	vector/vectorf128.h	/^static inline Vec2db operator && (Vec2db const & a, Vec2db const & b) {$/;"	f
operator &&	vector/vectorf128.h	/^static inline Vec4fb operator && (Vec4fb const & a, Vec4fb const & b) {$/;"	f
operator &&	vector/vectorf256.h	/^static inline Vec4db operator && (Vec4db const & a, Vec4db const & b) {$/;"	f
operator &&	vector/vectorf256.h	/^static inline Vec8fb operator && (Vec8fb const & a, Vec8fb const & b) {$/;"	f
operator &&	vector/vectorf256e.h	/^static inline Vec4db operator && (Vec4db const & a, Vec4db const & b) {$/;"	f
operator &&	vector/vectorf256e.h	/^static inline Vec8fb operator && (Vec8fb const & a, Vec8fb const & b) {$/;"	f
operator &&	vector/vectori128.h	/^static inline Vec128b operator && (Vec128b const & a, Vec128b const & b) {$/;"	f
operator &&	vector/vectori128.h	/^static inline Vec16c operator && (Vec16c const & a, Vec16c const & b) {$/;"	f
operator &&	vector/vectori128.h	/^static inline Vec16uc operator && (Vec16uc const & a, Vec16uc const & b) {$/;"	f
operator &&	vector/vectori128.h	/^static inline Vec2q operator && (Vec2q const & a, Vec2q const & b) {$/;"	f
operator &&	vector/vectori128.h	/^static inline Vec2uq operator && (Vec2uq const & a, Vec2uq const & b) {$/;"	f
operator &&	vector/vectori128.h	/^static inline Vec4i operator && (Vec4i const & a, Vec4i const & b) {$/;"	f
operator &&	vector/vectori128.h	/^static inline Vec4ui operator && (Vec4ui const & a, Vec4ui const & b) {$/;"	f
operator &&	vector/vectori128.h	/^static inline Vec8s operator && (Vec8s const & a, Vec8s const & b) {$/;"	f
operator &&	vector/vectori128.h	/^static inline Vec8us operator && (Vec8us const & a, Vec8us const & b) {$/;"	f
operator &&	vector/vectori256.h	/^static inline Vec16s operator && (Vec16s const & a, Vec16s const & b) {$/;"	f
operator &&	vector/vectori256.h	/^static inline Vec16us operator && (Vec16us const & a, Vec16us const & b) {$/;"	f
operator &&	vector/vectori256.h	/^static inline Vec256b operator && (Vec256b const & a, Vec256b const & b) {$/;"	f
operator &&	vector/vectori256.h	/^static inline Vec32c operator && (Vec32c const & a, Vec32c const & b) {$/;"	f
operator &&	vector/vectori256.h	/^static inline Vec32uc operator && (Vec32uc const & a, Vec32uc const & b) {$/;"	f
operator &&	vector/vectori256.h	/^static inline Vec4q operator && (Vec4q const & a, Vec4q const & b) {$/;"	f
operator &&	vector/vectori256.h	/^static inline Vec4uq operator && (Vec4uq const & a, Vec4uq const & b) {$/;"	f
operator &&	vector/vectori256.h	/^static inline Vec8i operator && (Vec8i const & a, Vec8i const & b) {$/;"	f
operator &&	vector/vectori256.h	/^static inline Vec8ui operator && (Vec8ui const & a, Vec8ui const & b) {$/;"	f
operator &&	vector/vectori256e.h	/^static inline Vec16s operator && (Vec16s const & a, Vec16s const & b) {$/;"	f
operator &&	vector/vectori256e.h	/^static inline Vec16us operator && (Vec16us const & a, Vec16us const & b) {$/;"	f
operator &&	vector/vectori256e.h	/^static inline Vec256b operator && (Vec256b const & a, Vec256b const & b) {$/;"	f
operator &&	vector/vectori256e.h	/^static inline Vec32c operator && (Vec32c const & a, Vec32c const & b) {$/;"	f
operator &&	vector/vectori256e.h	/^static inline Vec32uc operator && (Vec32uc const & a, Vec32uc const & b) {$/;"	f
operator &&	vector/vectori256e.h	/^static inline Vec4q operator && (Vec4q const & a, Vec4q const & b) {$/;"	f
operator &&	vector/vectori256e.h	/^static inline Vec4uq operator && (Vec4uq const & a, Vec4uq const & b) {$/;"	f
operator &&	vector/vectori256e.h	/^static inline Vec8i operator && (Vec8i const & a, Vec8i const & b) {$/;"	f
operator &&	vector/vectori256e.h	/^static inline Vec8ui operator && (Vec8ui const & a, Vec8ui const & b) {$/;"	f
operator &=	vector/vectorf128.h	/^static inline Vec2d & operator &= (Vec2d & a, Vec2d const & b) {$/;"	f
operator &=	vector/vectorf128.h	/^static inline Vec2db & operator &= (Vec2db & a, Vec2db const & b) {$/;"	f
operator &=	vector/vectorf128.h	/^static inline Vec4f & operator &= (Vec4f & a, Vec4f const & b) {$/;"	f
operator &=	vector/vectorf128.h	/^static inline Vec4fb & operator &= (Vec4fb & a, Vec4fb const & b) {$/;"	f
operator &=	vector/vectorf256.h	/^static inline Vec4d & operator &= (Vec4d & a, Vec4d const & b) {$/;"	f
operator &=	vector/vectorf256.h	/^static inline Vec4db & operator &= (Vec4db & a, Vec4db const & b) {$/;"	f
operator &=	vector/vectorf256.h	/^static inline Vec8f & operator &= (Vec8f & a, Vec8f const & b) {$/;"	f
operator &=	vector/vectorf256.h	/^static inline Vec8fb & operator &= (Vec8fb & a, Vec8fb const & b) {$/;"	f
operator &=	vector/vectorf256e.h	/^static inline Vec4d & operator &= (Vec4d & a, Vec4d const & b) {$/;"	f
operator &=	vector/vectorf256e.h	/^static inline Vec4db & operator &= (Vec4db & a, Vec4db const & b) {$/;"	f
operator &=	vector/vectorf256e.h	/^static inline Vec8f & operator &= (Vec8f & a, Vec8f const & b) {$/;"	f
operator &=	vector/vectorf256e.h	/^static inline Vec8fb & operator &= (Vec8fb & a, Vec8fb const & b) {$/;"	f
operator &=	vector/vectori128.h	/^static inline Vec128b & operator &= (Vec128b & a, Vec128b const & b) {$/;"	f
operator &=	vector/vectori256.h	/^static inline Vec256b & operator &= (Vec256b & a, Vec256b const & b) {$/;"	f
operator &=	vector/vectori256e.h	/^static inline Vec256b & operator &= (Vec256b & a, Vec256b const & b) {$/;"	f
operator ()	MUMmer/src/tigr/annotate.cc	/^  inline T & operator()(long row, long col)$/;"	f	class:Matrix_t
operator ()	MUMmer/src/tigr/delta.cc	/^  bool operator() (const DeltaEdgelet_t * i, const DeltaEdgelet_t * j) const$/;"	f	struct:EdgeletQCmp_t
operator ()	MUMmer/src/tigr/delta.cc	/^  bool operator() (const DeltaEdgelet_t * i, const DeltaEdgelet_t * j) const$/;"	f	struct:EdgeletRCmp_t
operator ()	MUMmer/src/tigr/delta.cc	/^  bool operator() (const void * i) const$/;"	f	struct:NULLPred_t
operator ()	MUMmer/src/tigr/postnuc.cc	/^  bool operator() (const Cluster & pA, const Cluster & pB)$/;"	f	struct:AscendingClusterSort
operator ()	MUMmer/src/tigr/postpro.cc	/^  bool operator() (const Cluster & pA, const Cluster & pB)$/;"	f	struct:AscendingClusterSort
operator ()	MUMmer/src/tigr/show-coords.cc	/^  bool operator() (const AlignStats & pA, const AlignStats & pB)$/;"	f	struct:IdA_sA_IdB_sB_Sort
operator ()	MUMmer/src/tigr/show-coords.cc	/^  bool operator() (const AlignStats & pA, const AlignStats & pB)$/;"	f	struct:IdB_sB_IdA_sA_Sort
operator ()	MUMmer/src/tigr/show-coords.cc	/^  bool operator() (const AlignStats & pA, const AlignStats & pB)$/;"	f	struct:sA_Sort
operator ()	MUMmer/src/tigr/show-coords.cc	/^  bool operator() (const LASstats & pA, const LASstats & pB)$/;"	f	struct:LAS_Sort
operator ()	MUMmer/src/tigr/show-diff.cc	/^  bool operator()(const DeltaEdgelet_t * i, const DeltaEdgelet_t * j) const$/;"	f	struct:EdgeletIdQLoQCmp_t
operator ()	MUMmer/src/tigr/show-diff.cc	/^  bool operator()(const DeltaEdgelet_t * i, const DeltaEdgelet_t * j) const$/;"	f	struct:EdgeletIdRLoRCmp_t
operator ()	MUMmer/src/tigr/show-diff.cc	/^  bool operator()(const DeltaEdgelet_t * i, const DeltaEdgelet_t * j) const$/;"	f	struct:EdgeletLoQCmp_t
operator ()	MUMmer/src/tigr/show-diff.cc	/^  bool operator()(const DeltaEdgelet_t * i, const DeltaEdgelet_t * j) const$/;"	f	struct:EdgeletLoRCmp_t
operator ()	MUMmer/src/tigr/show-snps.cc	/^  bool operator() (const SNP_t * a, const SNP_t * b)$/;"	f	struct:SNP_Q_Sort
operator ()	MUMmer/src/tigr/show-snps.cc	/^  bool operator() (const SNP_t * a, const SNP_t * b)$/;"	f	struct:SNP_R_Sort
operator ()	sparseSA.cpp	/^struct by_ref { bool operator() (const match_t &a, const match_t &b) const { if(a.ref == b.ref) return a.len > b.len; else return a.ref < b.ref; }  };$/;"	f	struct:by_ref
operator *	vector/special/complexvec.h	/^static inline Complex2d operator * (Complex2d const & a, Complex2d const & b) {$/;"	f
operator *	vector/special/complexvec.h	/^static inline Complex2d operator * (Complex2d const & a, double b) {$/;"	f
operator *	vector/special/complexvec.h	/^static inline Complex2d operator * (double a, Complex2d const & b) {$/;"	f
operator *	vector/special/complexvec.h	/^static inline Complex2f operator * (Complex2f const & a, Complex2f const & b) {$/;"	f
operator *	vector/special/complexvec.h	/^static inline Complex2f operator * (Complex2f const & a, float b) {$/;"	f
operator *	vector/special/complexvec.h	/^static inline Complex2f operator * (float a, Complex2f const & b) {$/;"	f
operator *	vector/special/complexvec.h	/^static inline Complex4d operator * (Complex4d const & a, Complex4d const & b) {$/;"	f
operator *	vector/special/complexvec.h	/^static inline Complex4d operator * (Complex4d const & a, double b) {$/;"	f
operator *	vector/special/complexvec.h	/^static inline Complex4d operator * (double a, Complex4d const & b) {$/;"	f
operator *	vector/special/complexvec.h	/^static inline Complex4f operator * (Complex4f const & a, Complex4f const & b) {$/;"	f
operator *	vector/special/complexvec.h	/^static inline Complex4f operator * (Complex4f const & a, float b) {$/;"	f
operator *	vector/special/complexvec.h	/^static inline Complex4f operator * (float a, Complex4f const & b) {$/;"	f
operator *	vector/special/complexvec.h	/^static inline Complex8f operator * (Complex8f const & a, Complex8f const & b) {$/;"	f
operator *	vector/special/complexvec.h	/^static inline Complex8f operator * (Complex8f const & a, float b) {$/;"	f
operator *	vector/special/complexvec.h	/^static inline Complex8f operator * (float a, Complex8f const & b) {$/;"	f
operator *	vector/special/quaternion.h	/^static inline Quaternion4d operator * (Quaternion4d const & a, Quaternion4d const & b) {$/;"	f
operator *	vector/special/quaternion.h	/^static inline Quaternion4d operator * (Quaternion4d const & a, double b) {$/;"	f
operator *	vector/special/quaternion.h	/^static inline Quaternion4d operator * (double a, Quaternion4d const & b) {$/;"	f
operator *	vector/special/quaternion.h	/^static inline Quaternion4f operator * (Quaternion4f const & a, Quaternion4f const & b) {$/;"	f
operator *	vector/special/quaternion.h	/^static inline Quaternion4f operator * (Quaternion4f const & a, float b) {$/;"	f
operator *	vector/special/quaternion.h	/^static inline Quaternion4f operator * (float a, Quaternion4f const & b) {$/;"	f
operator *	vector/special/vector3d.h	/^static inline Vec3d operator * (Vec3d const & a, Vec3d const & b) {$/;"	f
operator *	vector/special/vector3d.h	/^static inline Vec3d operator * (Vec3d const & a, double b) {$/;"	f
operator *	vector/special/vector3d.h	/^static inline Vec3d operator * (double a, Vec3d const & b) {$/;"	f
operator *	vector/special/vector3d.h	/^static inline Vec3f operator * (Vec3f const & a, Vec3f const & b) {$/;"	f
operator *	vector/special/vector3d.h	/^static inline Vec3f operator * (Vec3f const & a, float b) {$/;"	f
operator *	vector/special/vector3d.h	/^static inline Vec3f operator * (float a, Vec3f const & b) {$/;"	f
operator *	vector/vectorf128.h	/^static inline Vec2d operator * (Vec2d const & a, Vec2d const & b) {$/;"	f
operator *	vector/vectorf128.h	/^static inline Vec2d operator * (Vec2d const & a, double b) {$/;"	f
operator *	vector/vectorf128.h	/^static inline Vec2d operator * (double a, Vec2d const & b) {$/;"	f
operator *	vector/vectorf128.h	/^static inline Vec4f operator * (Vec4f const & a, Vec4f const & b) {$/;"	f
operator *	vector/vectorf128.h	/^static inline Vec4f operator * (Vec4f const & a, float b) {$/;"	f
operator *	vector/vectorf128.h	/^static inline Vec4f operator * (float a, Vec4f const & b) {$/;"	f
operator *	vector/vectorf256.h	/^static inline Vec4d operator * (Vec4d const & a, Vec4d const & b) {$/;"	f
operator *	vector/vectorf256.h	/^static inline Vec4d operator * (Vec4d const & a, double b) {$/;"	f
operator *	vector/vectorf256.h	/^static inline Vec4d operator * (double a, Vec4d const & b) {$/;"	f
operator *	vector/vectorf256.h	/^static inline Vec8f operator * (Vec8f const & a, Vec8f const & b) {$/;"	f
operator *	vector/vectorf256.h	/^static inline Vec8f operator * (Vec8f const & a, float b) {$/;"	f
operator *	vector/vectorf256.h	/^static inline Vec8f operator * (float a, Vec8f const & b) {$/;"	f
operator *	vector/vectorf256e.h	/^static inline Vec4d operator * (Vec4d const & a, Vec4d const & b) {$/;"	f
operator *	vector/vectorf256e.h	/^static inline Vec4d operator * (Vec4d const & a, double b) {$/;"	f
operator *	vector/vectorf256e.h	/^static inline Vec4d operator * (double a, Vec4d const & b) {$/;"	f
operator *	vector/vectorf256e.h	/^static inline Vec8f operator * (Vec8f const & a, Vec8f const & b) {$/;"	f
operator *	vector/vectorf256e.h	/^static inline Vec8f operator * (Vec8f const & a, float b) {$/;"	f
operator *	vector/vectorf256e.h	/^static inline Vec8f operator * (float a, Vec8f const & b) {$/;"	f
operator *	vector/vectori128.h	/^static inline Vec16c operator * (Vec16c const & a, Vec16c const & b) {$/;"	f
operator *	vector/vectori128.h	/^static inline Vec16uc operator * (Vec16uc const & a, Vec16uc const & b) {$/;"	f
operator *	vector/vectori128.h	/^static inline Vec2q operator * (Vec2q const & a, Vec2q const & b) {$/;"	f
operator *	vector/vectori128.h	/^static inline Vec2uq operator * (Vec2uq const & a, Vec2uq const & b) {$/;"	f
operator *	vector/vectori128.h	/^static inline Vec4i operator * (Vec4i const & a, Vec4i const & b) {$/;"	f
operator *	vector/vectori128.h	/^static inline Vec4ui operator * (Vec4ui const & a, Vec4ui const & b) {$/;"	f
operator *	vector/vectori128.h	/^static inline Vec8s operator * (Vec8s const & a, Vec8s const & b) {$/;"	f
operator *	vector/vectori128.h	/^static inline Vec8us operator * (Vec8us const & a, Vec8us const & b) {$/;"	f
operator *	vector/vectori256.h	/^static inline Vec16s operator * (Vec16s const & a, Vec16s const & b) {$/;"	f
operator *	vector/vectori256.h	/^static inline Vec16us operator * (Vec16us const & a, Vec16us const & b) {$/;"	f
operator *	vector/vectori256.h	/^static inline Vec32c operator * (Vec32c const & a, Vec32c const & b) {$/;"	f
operator *	vector/vectori256.h	/^static inline Vec32uc operator * (Vec32uc const & a, Vec32uc const & b) {$/;"	f
operator *	vector/vectori256.h	/^static inline Vec4q operator * (Vec4q const & a, Vec4q const & b) {$/;"	f
operator *	vector/vectori256.h	/^static inline Vec4uq operator * (Vec4uq const & a, Vec4uq const & b) {$/;"	f
operator *	vector/vectori256.h	/^static inline Vec8i operator * (Vec8i const & a, Vec8i const & b) {$/;"	f
operator *	vector/vectori256.h	/^static inline Vec8ui operator * (Vec8ui const & a, Vec8ui const & b) {$/;"	f
operator *	vector/vectori256e.h	/^static inline Vec16s operator * (Vec16s const & a, Vec16s const & b) {$/;"	f
operator *	vector/vectori256e.h	/^static inline Vec16us operator * (Vec16us const & a, Vec16us const & b) {$/;"	f
operator *	vector/vectori256e.h	/^static inline Vec32c operator * (Vec32c const & a, Vec32c const & b) {$/;"	f
operator *	vector/vectori256e.h	/^static inline Vec32uc operator * (Vec32uc const & a, Vec32uc const & b) {$/;"	f
operator *	vector/vectori256e.h	/^static inline Vec4q operator * (Vec4q const & a, Vec4q const & b) {$/;"	f
operator *	vector/vectori256e.h	/^static inline Vec4uq operator * (Vec4uq const & a, Vec4uq const & b) {$/;"	f
operator *	vector/vectori256e.h	/^static inline Vec8i operator * (Vec8i const & a, Vec8i const & b) {$/;"	f
operator *	vector/vectori256e.h	/^static inline Vec8ui operator * (Vec8ui const & a, Vec8ui const & b) {$/;"	f
operator *=	vector/special/complexvec.h	/^static inline Complex2d & operator *= (Complex2d & a, Complex2d const & b) {$/;"	f
operator *=	vector/special/complexvec.h	/^static inline Complex2d & operator *= (Complex2d & a, double & b) {$/;"	f
operator *=	vector/special/complexvec.h	/^static inline Complex2f & operator *= (Complex2f & a, Complex2f const & b) {$/;"	f
operator *=	vector/special/complexvec.h	/^static inline Complex2f & operator *= (Complex2f & a, float & b) {$/;"	f
operator *=	vector/special/complexvec.h	/^static inline Complex4d & operator *= (Complex4d & a, Complex4d const & b) {$/;"	f
operator *=	vector/special/complexvec.h	/^static inline Complex4d & operator *= (Complex4d & a, double & b) {$/;"	f
operator *=	vector/special/complexvec.h	/^static inline Complex4f & operator *= (Complex4f & a, Complex4f const & b) {$/;"	f
operator *=	vector/special/complexvec.h	/^static inline Complex4f & operator *= (Complex4f & a, float & b) {$/;"	f
operator *=	vector/special/complexvec.h	/^static inline Complex8f & operator *= (Complex8f & a, Complex8f const & b) {$/;"	f
operator *=	vector/special/complexvec.h	/^static inline Complex8f & operator *= (Complex8f & a, float & b) {$/;"	f
operator *=	vector/special/quaternion.h	/^static inline Quaternion4d & operator *= (Quaternion4d & a, Quaternion4d const & b) {$/;"	f
operator *=	vector/special/quaternion.h	/^static inline Quaternion4d & operator *= (Quaternion4d & a, double & b) {$/;"	f
operator *=	vector/special/quaternion.h	/^static inline Quaternion4f & operator *= (Quaternion4f & a, Quaternion4f const & b) {$/;"	f
operator *=	vector/special/quaternion.h	/^static inline Quaternion4f & operator *= (Quaternion4f & a, float & b) {$/;"	f
operator *=	vector/special/vector3d.h	/^static inline Vec3d & operator *= (Vec3d & a, Vec3d const & b) {$/;"	f
operator *=	vector/special/vector3d.h	/^static inline Vec3d & operator *= (Vec3d & a, double & b) {$/;"	f
operator *=	vector/special/vector3d.h	/^static inline Vec3f & operator *= (Vec3f & a, Vec3f const & b) {$/;"	f
operator *=	vector/special/vector3d.h	/^static inline Vec3f & operator *= (Vec3f & a, float & b) {$/;"	f
operator *=	vector/vectorf128.h	/^static inline Vec2d & operator *= (Vec2d & a, Vec2d const & b) {$/;"	f
operator *=	vector/vectorf128.h	/^static inline Vec4f & operator *= (Vec4f & a, Vec4f const & b) {$/;"	f
operator *=	vector/vectorf256.h	/^static inline Vec4d & operator *= (Vec4d & a, Vec4d const & b) {$/;"	f
operator *=	vector/vectorf256.h	/^static inline Vec8f & operator *= (Vec8f & a, Vec8f const & b) {$/;"	f
operator *=	vector/vectorf256e.h	/^static inline Vec4d & operator *= (Vec4d & a, Vec4d const & b) {$/;"	f
operator *=	vector/vectorf256e.h	/^static inline Vec8f & operator *= (Vec8f & a, Vec8f const & b) {$/;"	f
operator *=	vector/vectori128.h	/^static inline Vec16c & operator *= (Vec16c & a, Vec16c const & b) {$/;"	f
operator *=	vector/vectori128.h	/^static inline Vec2q & operator *= (Vec2q & a, Vec2q const & b) {$/;"	f
operator *=	vector/vectori128.h	/^static inline Vec4i & operator *= (Vec4i & a, Vec4i const & b) {$/;"	f
operator *=	vector/vectori128.h	/^static inline Vec8s & operator *= (Vec8s & a, Vec8s const & b) {$/;"	f
operator *=	vector/vectori256.h	/^static inline Vec16s & operator *= (Vec16s & a, Vec16s const & b) {$/;"	f
operator *=	vector/vectori256.h	/^static inline Vec32c & operator *= (Vec32c & a, Vec32c const & b) {$/;"	f
operator *=	vector/vectori256.h	/^static inline Vec4q & operator *= (Vec4q & a, Vec4q const & b) {$/;"	f
operator *=	vector/vectori256.h	/^static inline Vec8i & operator *= (Vec8i & a, Vec8i const & b) {$/;"	f
operator *=	vector/vectori256e.h	/^static inline Vec16s & operator *= (Vec16s & a, Vec16s const & b) {$/;"	f
operator *=	vector/vectori256e.h	/^static inline Vec32c & operator *= (Vec32c & a, Vec32c const & b) {$/;"	f
operator *=	vector/vectori256e.h	/^static inline Vec4q & operator *= (Vec4q & a, Vec4q const & b) {$/;"	f
operator *=	vector/vectori256e.h	/^static inline Vec8i & operator *= (Vec8i & a, Vec8i const & b) {$/;"	f
operator +	vector/special/complexvec.h	/^static inline Complex2d operator + (Complex2d const & a, Complex2d const & b) {$/;"	f
operator +	vector/special/complexvec.h	/^static inline Complex2d operator + (Complex2d const & a, double b) {$/;"	f
operator +	vector/special/complexvec.h	/^static inline Complex2d operator + (double a, Complex2d const & b) {$/;"	f
operator +	vector/special/complexvec.h	/^static inline Complex2f operator + (Complex2f const & a, Complex2f const & b) {$/;"	f
operator +	vector/special/complexvec.h	/^static inline Complex2f operator + (Complex2f const & a, float b) {$/;"	f
operator +	vector/special/complexvec.h	/^static inline Complex2f operator + (float a, Complex2f const & b) {$/;"	f
operator +	vector/special/complexvec.h	/^static inline Complex4d operator + (Complex4d const & a, Complex4d const & b) {$/;"	f
operator +	vector/special/complexvec.h	/^static inline Complex4d operator + (Complex4d const & a, double b) {$/;"	f
operator +	vector/special/complexvec.h	/^static inline Complex4d operator + (double a, Complex4d const & b) {$/;"	f
operator +	vector/special/complexvec.h	/^static inline Complex4f operator + (Complex4f const & a, Complex4f const & b) {$/;"	f
operator +	vector/special/complexvec.h	/^static inline Complex4f operator + (Complex4f const & a, float b) {$/;"	f
operator +	vector/special/complexvec.h	/^static inline Complex4f operator + (float a, Complex4f const & b) {$/;"	f
operator +	vector/special/complexvec.h	/^static inline Complex8f operator + (Complex8f const & a, Complex8f const & b) {$/;"	f
operator +	vector/special/complexvec.h	/^static inline Complex8f operator + (Complex8f const & a, float b) {$/;"	f
operator +	vector/special/complexvec.h	/^static inline Complex8f operator + (float a, Complex8f const & b) {$/;"	f
operator +	vector/special/quaternion.h	/^static inline Quaternion4d operator + (Quaternion4d const & a, Quaternion4d const & b) {$/;"	f
operator +	vector/special/quaternion.h	/^static inline Quaternion4d operator + (Quaternion4d const & a, double b) {$/;"	f
operator +	vector/special/quaternion.h	/^static inline Quaternion4d operator + (double a, Quaternion4d const & b) {$/;"	f
operator +	vector/special/quaternion.h	/^static inline Quaternion4f operator + (Quaternion4f const & a, Quaternion4f const & b) {$/;"	f
operator +	vector/special/quaternion.h	/^static inline Quaternion4f operator + (Quaternion4f const & a, float b) {$/;"	f
operator +	vector/special/quaternion.h	/^static inline Quaternion4f operator + (float a, Quaternion4f const & b) {$/;"	f
operator +	vector/special/vector3d.h	/^static inline Vec3d operator + (Vec3d const & a, Vec3d const & b) {$/;"	f
operator +	vector/special/vector3d.h	/^static inline Vec3f operator + (Vec3f const & a, Vec3f const & b) {$/;"	f
operator +	vector/vectorf128.h	/^static inline Vec2d operator + (Vec2d const & a, Vec2d const & b) {$/;"	f
operator +	vector/vectorf128.h	/^static inline Vec2d operator + (Vec2d const & a, double b) {$/;"	f
operator +	vector/vectorf128.h	/^static inline Vec2d operator + (double a, Vec2d const & b) {$/;"	f
operator +	vector/vectorf128.h	/^static inline Vec4f operator + (Vec4f const & a, Vec4f const & b) {$/;"	f
operator +	vector/vectorf128.h	/^static inline Vec4f operator + (Vec4f const & a, float b) {$/;"	f
operator +	vector/vectorf128.h	/^static inline Vec4f operator + (float a, Vec4f const & b) {$/;"	f
operator +	vector/vectorf256.h	/^static inline Vec4d operator + (Vec4d const & a, Vec4d const & b) {$/;"	f
operator +	vector/vectorf256.h	/^static inline Vec4d operator + (Vec4d const & a, double b) {$/;"	f
operator +	vector/vectorf256.h	/^static inline Vec4d operator + (double a, Vec4d const & b) {$/;"	f
operator +	vector/vectorf256.h	/^static inline Vec8f operator + (Vec8f const & a, Vec8f const & b) {$/;"	f
operator +	vector/vectorf256.h	/^static inline Vec8f operator + (Vec8f const & a, float b) {$/;"	f
operator +	vector/vectorf256.h	/^static inline Vec8f operator + (float a, Vec8f const & b) {$/;"	f
operator +	vector/vectorf256e.h	/^static inline Vec4d operator + (Vec4d const & a, Vec4d const & b) {$/;"	f
operator +	vector/vectorf256e.h	/^static inline Vec4d operator + (Vec4d const & a, double b) {$/;"	f
operator +	vector/vectorf256e.h	/^static inline Vec4d operator + (double a, Vec4d const & b) {$/;"	f
operator +	vector/vectorf256e.h	/^static inline Vec8f operator + (Vec8f const & a, Vec8f const & b) {$/;"	f
operator +	vector/vectorf256e.h	/^static inline Vec8f operator + (Vec8f const & a, float b) {$/;"	f
operator +	vector/vectorf256e.h	/^static inline Vec8f operator + (float a, Vec8f const & b) {$/;"	f
operator +	vector/vectori128.h	/^static inline Vec16c operator + (Vec16c const & a, Vec16c const & b) {$/;"	f
operator +	vector/vectori128.h	/^static inline Vec16uc operator + (Vec16uc const & a, Vec16uc const & b) {$/;"	f
operator +	vector/vectori128.h	/^static inline Vec2q operator + (Vec2q const & a, Vec2q const & b) {$/;"	f
operator +	vector/vectori128.h	/^static inline Vec2uq operator + (Vec2uq const & a, Vec2uq const & b) {$/;"	f
operator +	vector/vectori128.h	/^static inline Vec4i operator + (Vec4i const & a, Vec4i const & b) {$/;"	f
operator +	vector/vectori128.h	/^static inline Vec4ui operator + (Vec4ui const & a, Vec4ui const & b) {$/;"	f
operator +	vector/vectori128.h	/^static inline Vec8s operator + (Vec8s const & a, Vec8s const & b) {$/;"	f
operator +	vector/vectori128.h	/^static inline Vec8us operator + (Vec8us const & a, Vec8us const & b) {$/;"	f
operator +	vector/vectori256.h	/^static inline Vec16s operator + (Vec16s const & a, Vec16s const & b) {$/;"	f
operator +	vector/vectori256.h	/^static inline Vec16us operator + (Vec16us const & a, Vec16us const & b) {$/;"	f
operator +	vector/vectori256.h	/^static inline Vec32c operator + (Vec32c const & a, Vec32c const & b) {$/;"	f
operator +	vector/vectori256.h	/^static inline Vec32uc operator + (Vec32uc const & a, Vec32uc const & b) {$/;"	f
operator +	vector/vectori256.h	/^static inline Vec4q operator + (Vec4q const & a, Vec4q const & b) {$/;"	f
operator +	vector/vectori256.h	/^static inline Vec4uq operator + (Vec4uq const & a, Vec4uq const & b) {$/;"	f
operator +	vector/vectori256.h	/^static inline Vec8i operator + (Vec8i const & a, Vec8i const & b) {$/;"	f
operator +	vector/vectori256.h	/^static inline Vec8ui operator + (Vec8ui const & a, Vec8ui const & b) {$/;"	f
operator +	vector/vectori256e.h	/^static inline Vec16s operator + (Vec16s const & a, Vec16s const & b) {$/;"	f
operator +	vector/vectori256e.h	/^static inline Vec16us operator + (Vec16us const & a, Vec16us const & b) {$/;"	f
operator +	vector/vectori256e.h	/^static inline Vec32c operator + (Vec32c const & a, Vec32c const & b) {$/;"	f
operator +	vector/vectori256e.h	/^static inline Vec32uc operator + (Vec32uc const & a, Vec32uc const & b) {$/;"	f
operator +	vector/vectori256e.h	/^static inline Vec4q operator + (Vec4q const & a, Vec4q const & b) {$/;"	f
operator +	vector/vectori256e.h	/^static inline Vec4uq operator + (Vec4uq const & a, Vec4uq const & b) {$/;"	f
operator +	vector/vectori256e.h	/^static inline Vec8i operator + (Vec8i const & a, Vec8i const & b) {$/;"	f
operator +	vector/vectori256e.h	/^static inline Vec8ui operator + (Vec8ui const & a, Vec8ui const & b) {$/;"	f
operator ++	vector/vectorf128.h	/^static inline Vec2d & operator ++ (Vec2d & a) {$/;"	f
operator ++	vector/vectorf128.h	/^static inline Vec2d operator ++ (Vec2d & a, int) {$/;"	f
operator ++	vector/vectorf128.h	/^static inline Vec4f & operator ++ (Vec4f & a) {$/;"	f
operator ++	vector/vectorf128.h	/^static inline Vec4f operator ++ (Vec4f & a, int) {$/;"	f
operator ++	vector/vectorf256.h	/^static inline Vec4d & operator ++ (Vec4d & a) {$/;"	f
operator ++	vector/vectorf256.h	/^static inline Vec4d operator ++ (Vec4d & a, int) {$/;"	f
operator ++	vector/vectorf256.h	/^static inline Vec8f & operator ++ (Vec8f & a) {$/;"	f
operator ++	vector/vectorf256.h	/^static inline Vec8f operator ++ (Vec8f & a, int) {$/;"	f
operator ++	vector/vectorf256e.h	/^static inline Vec4d & operator ++ (Vec4d & a) {$/;"	f
operator ++	vector/vectorf256e.h	/^static inline Vec4d operator ++ (Vec4d & a, int) {$/;"	f
operator ++	vector/vectorf256e.h	/^static inline Vec8f & operator ++ (Vec8f & a) {$/;"	f
operator ++	vector/vectorf256e.h	/^static inline Vec8f operator ++ (Vec8f & a, int) {$/;"	f
operator ++	vector/vectori128.h	/^static inline Vec16c & operator ++ (Vec16c & a) {$/;"	f
operator ++	vector/vectori128.h	/^static inline Vec16c operator ++ (Vec16c & a, int) {$/;"	f
operator ++	vector/vectori128.h	/^static inline Vec2q & operator ++ (Vec2q & a) {$/;"	f
operator ++	vector/vectori128.h	/^static inline Vec2q operator ++ (Vec2q & a, int) {$/;"	f
operator ++	vector/vectori128.h	/^static inline Vec4i & operator ++ (Vec4i & a) {$/;"	f
operator ++	vector/vectori128.h	/^static inline Vec4i operator ++ (Vec4i & a, int) {$/;"	f
operator ++	vector/vectori128.h	/^static inline Vec8s & operator ++ (Vec8s & a) {$/;"	f
operator ++	vector/vectori128.h	/^static inline Vec8s operator ++ (Vec8s & a, int) {$/;"	f
operator ++	vector/vectori256.h	/^static inline Vec16s & operator ++ (Vec16s & a) {$/;"	f
operator ++	vector/vectori256.h	/^static inline Vec16s operator ++ (Vec16s & a, int) {$/;"	f
operator ++	vector/vectori256.h	/^static inline Vec32c & operator ++ (Vec32c & a) {$/;"	f
operator ++	vector/vectori256.h	/^static inline Vec32c operator ++ (Vec32c & a, int) {$/;"	f
operator ++	vector/vectori256.h	/^static inline Vec4q & operator ++ (Vec4q & a) {$/;"	f
operator ++	vector/vectori256.h	/^static inline Vec4q operator ++ (Vec4q & a, int) {$/;"	f
operator ++	vector/vectori256.h	/^static inline Vec8i & operator ++ (Vec8i & a) {$/;"	f
operator ++	vector/vectori256.h	/^static inline Vec8i operator ++ (Vec8i & a, int) {$/;"	f
operator ++	vector/vectori256e.h	/^static inline Vec16s & operator ++ (Vec16s & a) {$/;"	f
operator ++	vector/vectori256e.h	/^static inline Vec16s operator ++ (Vec16s & a, int) {$/;"	f
operator ++	vector/vectori256e.h	/^static inline Vec32c & operator ++ (Vec32c & a) {$/;"	f
operator ++	vector/vectori256e.h	/^static inline Vec32c operator ++ (Vec32c & a, int) {$/;"	f
operator ++	vector/vectori256e.h	/^static inline Vec4q & operator ++ (Vec4q & a) {$/;"	f
operator ++	vector/vectori256e.h	/^static inline Vec4q operator ++ (Vec4q & a, int) {$/;"	f
operator ++	vector/vectori256e.h	/^static inline Vec8i & operator ++ (Vec8i & a) {$/;"	f
operator ++	vector/vectori256e.h	/^static inline Vec8i operator ++ (Vec8i & a, int) {$/;"	f
operator +=	vector/special/complexvec.h	/^static inline Complex2d & operator += (Complex2d & a, Complex2d const & b) {$/;"	f
operator +=	vector/special/complexvec.h	/^static inline Complex2d & operator += (Complex2d & a, double & b) {$/;"	f
operator +=	vector/special/complexvec.h	/^static inline Complex2f & operator += (Complex2f & a, Complex2f const & b) {$/;"	f
operator +=	vector/special/complexvec.h	/^static inline Complex2f & operator += (Complex2f & a, float & b) {$/;"	f
operator +=	vector/special/complexvec.h	/^static inline Complex4d & operator += (Complex4d & a, Complex4d const & b) {$/;"	f
operator +=	vector/special/complexvec.h	/^static inline Complex4d & operator += (Complex4d & a, double & b) {$/;"	f
operator +=	vector/special/complexvec.h	/^static inline Complex4f & operator += (Complex4f & a, Complex4f const & b) {$/;"	f
operator +=	vector/special/complexvec.h	/^static inline Complex4f & operator += (Complex4f & a, float & b) {$/;"	f
operator +=	vector/special/complexvec.h	/^static inline Complex8f & operator += (Complex8f & a, Complex8f const & b) {$/;"	f
operator +=	vector/special/complexvec.h	/^static inline Complex8f & operator += (Complex8f & a, float & b) {$/;"	f
operator +=	vector/special/quaternion.h	/^static inline Quaternion4d & operator += (Quaternion4d & a, Quaternion4d const & b) {$/;"	f
operator +=	vector/special/quaternion.h	/^static inline Quaternion4d & operator += (Quaternion4d & a, double & b) {$/;"	f
operator +=	vector/special/quaternion.h	/^static inline Quaternion4f & operator += (Quaternion4f & a, Quaternion4f const & b) {$/;"	f
operator +=	vector/special/quaternion.h	/^static inline Quaternion4f & operator += (Quaternion4f & a, float & b) {$/;"	f
operator +=	vector/special/vector3d.h	/^static inline Vec3d & operator += (Vec3d & a, Vec3d const & b) {$/;"	f
operator +=	vector/special/vector3d.h	/^static inline Vec3f & operator += (Vec3f & a, Vec3f const & b) {$/;"	f
operator +=	vector/vectorf128.h	/^static inline Vec2d & operator += (Vec2d & a, Vec2d const & b) {$/;"	f
operator +=	vector/vectorf128.h	/^static inline Vec4f & operator += (Vec4f & a, Vec4f const & b) {$/;"	f
operator +=	vector/vectorf256.h	/^static inline Vec4d & operator += (Vec4d & a, Vec4d const & b) {$/;"	f
operator +=	vector/vectorf256.h	/^static inline Vec8f & operator += (Vec8f & a, Vec8f const & b) {$/;"	f
operator +=	vector/vectorf256e.h	/^static inline Vec4d & operator += (Vec4d & a, Vec4d const & b) {$/;"	f
operator +=	vector/vectorf256e.h	/^static inline Vec8f & operator += (Vec8f & a, Vec8f const & b) {$/;"	f
operator +=	vector/vectori128.h	/^static inline Vec16c & operator += (Vec16c & a, Vec16c const & b) {$/;"	f
operator +=	vector/vectori128.h	/^static inline Vec2q & operator += (Vec2q & a, Vec2q const & b) {$/;"	f
operator +=	vector/vectori128.h	/^static inline Vec4i & operator += (Vec4i & a, Vec4i const & b) {$/;"	f
operator +=	vector/vectori128.h	/^static inline Vec8s & operator += (Vec8s & a, Vec8s const & b) {$/;"	f
operator +=	vector/vectori256.h	/^static inline Vec16s & operator += (Vec16s & a, Vec16s const & b) {$/;"	f
operator +=	vector/vectori256.h	/^static inline Vec32c & operator += (Vec32c & a, Vec32c const & b) {$/;"	f
operator +=	vector/vectori256.h	/^static inline Vec4q & operator += (Vec4q & a, Vec4q const & b) {$/;"	f
operator +=	vector/vectori256.h	/^static inline Vec8i & operator += (Vec8i & a, Vec8i const & b) {$/;"	f
operator +=	vector/vectori256e.h	/^static inline Vec16s & operator += (Vec16s & a, Vec16s const & b) {$/;"	f
operator +=	vector/vectori256e.h	/^static inline Vec32c & operator += (Vec32c & a, Vec32c const & b) {$/;"	f
operator +=	vector/vectori256e.h	/^static inline Vec4q & operator += (Vec4q & a, Vec4q const & b) {$/;"	f
operator +=	vector/vectori256e.h	/^static inline Vec8i & operator += (Vec8i & a, Vec8i const & b) {$/;"	f
operator -	vector/special/complexvec.h	/^static inline Complex2d operator - (Complex2d const & a) {$/;"	f
operator -	vector/special/complexvec.h	/^static inline Complex2d operator - (Complex2d const & a, Complex2d const & b) {$/;"	f
operator -	vector/special/complexvec.h	/^static inline Complex2d operator - (Complex2d const & a, double b) {$/;"	f
operator -	vector/special/complexvec.h	/^static inline Complex2d operator - (double a, Complex2d const & b) {$/;"	f
operator -	vector/special/complexvec.h	/^static inline Complex2f operator - (Complex2f const & a) {$/;"	f
operator -	vector/special/complexvec.h	/^static inline Complex2f operator - (Complex2f const & a, Complex2f const & b) {$/;"	f
operator -	vector/special/complexvec.h	/^static inline Complex2f operator - (Complex2f const & a, float b) {$/;"	f
operator -	vector/special/complexvec.h	/^static inline Complex2f operator - (float a, Complex2f const & b) {$/;"	f
operator -	vector/special/complexvec.h	/^static inline Complex4d operator - (Complex4d const & a) {$/;"	f
operator -	vector/special/complexvec.h	/^static inline Complex4d operator - (Complex4d const & a, Complex4d const & b) {$/;"	f
operator -	vector/special/complexvec.h	/^static inline Complex4d operator - (Complex4d const & a, double b) {$/;"	f
operator -	vector/special/complexvec.h	/^static inline Complex4d operator - (double a, Complex4d const & b) {$/;"	f
operator -	vector/special/complexvec.h	/^static inline Complex4f operator - (Complex4f const & a) {$/;"	f
operator -	vector/special/complexvec.h	/^static inline Complex4f operator - (Complex4f const & a, Complex4f const & b) {$/;"	f
operator -	vector/special/complexvec.h	/^static inline Complex4f operator - (Complex4f const & a, float b) {$/;"	f
operator -	vector/special/complexvec.h	/^static inline Complex4f operator - (float a, Complex4f const & b) {$/;"	f
operator -	vector/special/complexvec.h	/^static inline Complex8f operator - (Complex8f const & a) {$/;"	f
operator -	vector/special/complexvec.h	/^static inline Complex8f operator - (Complex8f const & a, Complex8f const & b) {$/;"	f
operator -	vector/special/complexvec.h	/^static inline Complex8f operator - (Complex8f const & a, float b) {$/;"	f
operator -	vector/special/complexvec.h	/^static inline Complex8f operator - (float a, Complex8f const & b) {$/;"	f
operator -	vector/special/quaternion.h	/^static inline Quaternion4d operator - (Quaternion4d const & a) {$/;"	f
operator -	vector/special/quaternion.h	/^static inline Quaternion4d operator - (Quaternion4d const & a, Quaternion4d const & b) {$/;"	f
operator -	vector/special/quaternion.h	/^static inline Quaternion4d operator - (Quaternion4d const & a, double b) {$/;"	f
operator -	vector/special/quaternion.h	/^static inline Quaternion4d operator - (double a, Quaternion4d const & b) {$/;"	f
operator -	vector/special/quaternion.h	/^static inline Quaternion4f operator - (Quaternion4f const & a) {$/;"	f
operator -	vector/special/quaternion.h	/^static inline Quaternion4f operator - (Quaternion4f const & a, Quaternion4f const & b) {$/;"	f
operator -	vector/special/quaternion.h	/^static inline Quaternion4f operator - (Quaternion4f const & a, float b) {$/;"	f
operator -	vector/special/quaternion.h	/^static inline Quaternion4f operator - (float a, Quaternion4f const & b) {$/;"	f
operator -	vector/special/vector3d.h	/^static inline Vec3d operator - (Vec3d const & a) {$/;"	f
operator -	vector/special/vector3d.h	/^static inline Vec3d operator - (Vec3d const & a, Vec3d const & b) {$/;"	f
operator -	vector/special/vector3d.h	/^static inline Vec3f operator - (Vec3f const & a) {$/;"	f
operator -	vector/special/vector3d.h	/^static inline Vec3f operator - (Vec3f const & a, Vec3f const & b) {$/;"	f
operator -	vector/vectorf128.h	/^static inline Vec2d operator - (Vec2d const & a) {$/;"	f
operator -	vector/vectorf128.h	/^static inline Vec2d operator - (Vec2d const & a, Vec2d const & b) {$/;"	f
operator -	vector/vectorf128.h	/^static inline Vec2d operator - (Vec2d const & a, double b) {$/;"	f
operator -	vector/vectorf128.h	/^static inline Vec2d operator - (double a, Vec2d const & b) {$/;"	f
operator -	vector/vectorf128.h	/^static inline Vec4f operator - (Vec4f const & a) {$/;"	f
operator -	vector/vectorf128.h	/^static inline Vec4f operator - (Vec4f const & a, Vec4f const & b) {$/;"	f
operator -	vector/vectorf128.h	/^static inline Vec4f operator - (Vec4f const & a, float b) {$/;"	f
operator -	vector/vectorf128.h	/^static inline Vec4f operator - (float a, Vec4f const & b) {$/;"	f
operator -	vector/vectorf256.h	/^static inline Vec4d operator - (Vec4d const & a) {$/;"	f
operator -	vector/vectorf256.h	/^static inline Vec4d operator - (Vec4d const & a, Vec4d const & b) {$/;"	f
operator -	vector/vectorf256.h	/^static inline Vec4d operator - (Vec4d const & a, double b) {$/;"	f
operator -	vector/vectorf256.h	/^static inline Vec4d operator - (double a, Vec4d const & b) {$/;"	f
operator -	vector/vectorf256.h	/^static inline Vec8f operator - (Vec8f const & a) {$/;"	f
operator -	vector/vectorf256.h	/^static inline Vec8f operator - (Vec8f const & a, Vec8f const & b) {$/;"	f
operator -	vector/vectorf256.h	/^static inline Vec8f operator - (Vec8f const & a, float b) {$/;"	f
operator -	vector/vectorf256.h	/^static inline Vec8f operator - (float a, Vec8f const & b) {$/;"	f
operator -	vector/vectorf256e.h	/^static inline Vec4d operator - (Vec4d const & a) {$/;"	f
operator -	vector/vectorf256e.h	/^static inline Vec4d operator - (Vec4d const & a, Vec4d const & b) {$/;"	f
operator -	vector/vectorf256e.h	/^static inline Vec4d operator - (Vec4d const & a, double b) {$/;"	f
operator -	vector/vectorf256e.h	/^static inline Vec4d operator - (double a, Vec4d const & b) {$/;"	f
operator -	vector/vectorf256e.h	/^static inline Vec8f operator - (Vec8f const & a) {$/;"	f
operator -	vector/vectorf256e.h	/^static inline Vec8f operator - (Vec8f const & a, Vec8f const & b) {$/;"	f
operator -	vector/vectorf256e.h	/^static inline Vec8f operator - (Vec8f const & a, float b) {$/;"	f
operator -	vector/vectorf256e.h	/^static inline Vec8f operator - (float a, Vec8f const & b) {$/;"	f
operator -	vector/vectori128.h	/^static inline Vec16c operator - (Vec16c const & a) {$/;"	f
operator -	vector/vectori128.h	/^static inline Vec16c operator - (Vec16c const & a, Vec16c const & b) {$/;"	f
operator -	vector/vectori128.h	/^static inline Vec16uc operator - (Vec16uc const & a, Vec16uc const & b) {$/;"	f
operator -	vector/vectori128.h	/^static inline Vec2q operator - (Vec2q const & a) {$/;"	f
operator -	vector/vectori128.h	/^static inline Vec2q operator - (Vec2q const & a, Vec2q const & b) {$/;"	f
operator -	vector/vectori128.h	/^static inline Vec2uq operator - (Vec2uq const & a, Vec2uq const & b) {$/;"	f
operator -	vector/vectori128.h	/^static inline Vec4i operator - (Vec4i const & a) {$/;"	f
operator -	vector/vectori128.h	/^static inline Vec4i operator - (Vec4i const & a, Vec4i const & b) {$/;"	f
operator -	vector/vectori128.h	/^static inline Vec4ui operator - (Vec4ui const & a, Vec4ui const & b) {$/;"	f
operator -	vector/vectori128.h	/^static inline Vec8s operator - (Vec8s const & a) {$/;"	f
operator -	vector/vectori128.h	/^static inline Vec8s operator - (Vec8s const & a, Vec8s const & b) {$/;"	f
operator -	vector/vectori128.h	/^static inline Vec8us operator - (Vec8us const & a, Vec8us const & b) {$/;"	f
operator -	vector/vectori256.h	/^static inline Vec16s operator - (Vec16s const & a) {$/;"	f
operator -	vector/vectori256.h	/^static inline Vec16s operator - (Vec16s const & a, Vec16s const & b) {$/;"	f
operator -	vector/vectori256.h	/^static inline Vec16us operator - (Vec16us const & a, Vec16us const & b) {$/;"	f
operator -	vector/vectori256.h	/^static inline Vec32c operator - (Vec32c const & a) {$/;"	f
operator -	vector/vectori256.h	/^static inline Vec32c operator - (Vec32c const & a, Vec32c const & b) {$/;"	f
operator -	vector/vectori256.h	/^static inline Vec32uc operator - (Vec32uc const & a, Vec32uc const & b) {$/;"	f
operator -	vector/vectori256.h	/^static inline Vec4q operator - (Vec4q const & a) {$/;"	f
operator -	vector/vectori256.h	/^static inline Vec4q operator - (Vec4q const & a, Vec4q const & b) {$/;"	f
operator -	vector/vectori256.h	/^static inline Vec4uq operator - (Vec4uq const & a, Vec4uq const & b) {$/;"	f
operator -	vector/vectori256.h	/^static inline Vec8i operator - (Vec8i const & a) {$/;"	f
operator -	vector/vectori256.h	/^static inline Vec8i operator - (Vec8i const & a, Vec8i const & b) {$/;"	f
operator -	vector/vectori256.h	/^static inline Vec8ui operator - (Vec8ui const & a, Vec8ui const & b) {$/;"	f
operator -	vector/vectori256e.h	/^static inline Vec16s operator - (Vec16s const & a) {$/;"	f
operator -	vector/vectori256e.h	/^static inline Vec16s operator - (Vec16s const & a, Vec16s const & b) {$/;"	f
operator -	vector/vectori256e.h	/^static inline Vec16us operator - (Vec16us const & a, Vec16us const & b) {$/;"	f
operator -	vector/vectori256e.h	/^static inline Vec32c operator - (Vec32c const & a) {$/;"	f
operator -	vector/vectori256e.h	/^static inline Vec32c operator - (Vec32c const & a, Vec32c const & b) {$/;"	f
operator -	vector/vectori256e.h	/^static inline Vec32uc operator - (Vec32uc const & a, Vec32uc const & b) {$/;"	f
operator -	vector/vectori256e.h	/^static inline Vec4q operator - (Vec4q const & a) {$/;"	f
operator -	vector/vectori256e.h	/^static inline Vec4q operator - (Vec4q const & a, Vec4q const & b) {$/;"	f
operator -	vector/vectori256e.h	/^static inline Vec4uq operator - (Vec4uq const & a, Vec4uq const & b) {$/;"	f
operator -	vector/vectori256e.h	/^static inline Vec8i operator - (Vec8i const & a) {$/;"	f
operator -	vector/vectori256e.h	/^static inline Vec8i operator - (Vec8i const & a, Vec8i const & b) {$/;"	f
operator -	vector/vectori256e.h	/^static inline Vec8ui operator - (Vec8ui const & a, Vec8ui const & b) {$/;"	f
operator --	vector/vectorf128.h	/^static inline Vec2d & operator -- (Vec2d & a) {$/;"	f
operator --	vector/vectorf128.h	/^static inline Vec2d operator -- (Vec2d & a, int) {$/;"	f
operator --	vector/vectorf128.h	/^static inline Vec4f & operator -- (Vec4f & a) {$/;"	f
operator --	vector/vectorf128.h	/^static inline Vec4f operator -- (Vec4f & a, int) {$/;"	f
operator --	vector/vectorf256.h	/^static inline Vec4d & operator -- (Vec4d & a) {$/;"	f
operator --	vector/vectorf256.h	/^static inline Vec4d operator -- (Vec4d & a, int) {$/;"	f
operator --	vector/vectorf256.h	/^static inline Vec8f & operator -- (Vec8f & a) {$/;"	f
operator --	vector/vectorf256.h	/^static inline Vec8f operator -- (Vec8f & a, int) {$/;"	f
operator --	vector/vectorf256e.h	/^static inline Vec4d & operator -- (Vec4d & a) {$/;"	f
operator --	vector/vectorf256e.h	/^static inline Vec4d operator -- (Vec4d & a, int) {$/;"	f
operator --	vector/vectorf256e.h	/^static inline Vec8f & operator -- (Vec8f & a) {$/;"	f
operator --	vector/vectorf256e.h	/^static inline Vec8f operator -- (Vec8f & a, int) {$/;"	f
operator --	vector/vectori128.h	/^static inline Vec16c & operator -- (Vec16c & a) {$/;"	f
operator --	vector/vectori128.h	/^static inline Vec16c operator -- (Vec16c & a, int) {$/;"	f
operator --	vector/vectori128.h	/^static inline Vec2q & operator -- (Vec2q & a) {$/;"	f
operator --	vector/vectori128.h	/^static inline Vec2q operator -- (Vec2q & a, int) {$/;"	f
operator --	vector/vectori128.h	/^static inline Vec4i & operator -- (Vec4i & a) {$/;"	f
operator --	vector/vectori128.h	/^static inline Vec4i operator -- (Vec4i & a, int) {$/;"	f
operator --	vector/vectori128.h	/^static inline Vec8s & operator -- (Vec8s & a) {$/;"	f
operator --	vector/vectori128.h	/^static inline Vec8s operator -- (Vec8s & a, int) {$/;"	f
operator --	vector/vectori256.h	/^static inline Vec16s & operator -- (Vec16s & a) {$/;"	f
operator --	vector/vectori256.h	/^static inline Vec16s operator -- (Vec16s & a, int) {$/;"	f
operator --	vector/vectori256.h	/^static inline Vec32c & operator -- (Vec32c & a) {$/;"	f
operator --	vector/vectori256.h	/^static inline Vec32c operator -- (Vec32c & a, int) {$/;"	f
operator --	vector/vectori256.h	/^static inline Vec4q & operator -- (Vec4q & a) {$/;"	f
operator --	vector/vectori256.h	/^static inline Vec4q operator -- (Vec4q & a, int) {$/;"	f
operator --	vector/vectori256.h	/^static inline Vec8i & operator -- (Vec8i & a) {$/;"	f
operator --	vector/vectori256.h	/^static inline Vec8i operator -- (Vec8i & a, int) {$/;"	f
operator --	vector/vectori256e.h	/^static inline Vec16s & operator -- (Vec16s & a) {$/;"	f
operator --	vector/vectori256e.h	/^static inline Vec16s operator -- (Vec16s & a, int) {$/;"	f
operator --	vector/vectori256e.h	/^static inline Vec32c & operator -- (Vec32c & a) {$/;"	f
operator --	vector/vectori256e.h	/^static inline Vec32c operator -- (Vec32c & a, int) {$/;"	f
operator --	vector/vectori256e.h	/^static inline Vec4q & operator -- (Vec4q & a) {$/;"	f
operator --	vector/vectori256e.h	/^static inline Vec4q operator -- (Vec4q & a, int) {$/;"	f
operator --	vector/vectori256e.h	/^static inline Vec8i & operator -- (Vec8i & a) {$/;"	f
operator --	vector/vectori256e.h	/^static inline Vec8i operator -- (Vec8i & a, int) {$/;"	f
operator -=	vector/special/complexvec.h	/^static inline Complex2d & operator -= (Complex2d & a, Complex2d const & b) {$/;"	f
operator -=	vector/special/complexvec.h	/^static inline Complex2d & operator -= (Complex2d & a, double & b) {$/;"	f
operator -=	vector/special/complexvec.h	/^static inline Complex2f & operator -= (Complex2f & a, Complex2f const & b) {$/;"	f
operator -=	vector/special/complexvec.h	/^static inline Complex2f & operator -= (Complex2f & a, float & b) {$/;"	f
operator -=	vector/special/complexvec.h	/^static inline Complex4d & operator -= (Complex4d & a, Complex4d const & b) {$/;"	f
operator -=	vector/special/complexvec.h	/^static inline Complex4d & operator -= (Complex4d & a, double & b) {$/;"	f
operator -=	vector/special/complexvec.h	/^static inline Complex4f & operator -= (Complex4f & a, Complex4f const & b) {$/;"	f
operator -=	vector/special/complexvec.h	/^static inline Complex4f & operator -= (Complex4f & a, float & b) {$/;"	f
operator -=	vector/special/complexvec.h	/^static inline Complex8f & operator -= (Complex8f & a, Complex8f const & b) {$/;"	f
operator -=	vector/special/complexvec.h	/^static inline Complex8f & operator -= (Complex8f & a, float & b) {$/;"	f
operator -=	vector/special/quaternion.h	/^static inline Quaternion4d & operator -= (Quaternion4d & a, Quaternion4d const & b) {$/;"	f
operator -=	vector/special/quaternion.h	/^static inline Quaternion4d & operator -= (Quaternion4d & a, double & b) {$/;"	f
operator -=	vector/special/quaternion.h	/^static inline Quaternion4f & operator -= (Quaternion4f & a, Quaternion4f const & b) {$/;"	f
operator -=	vector/special/quaternion.h	/^static inline Quaternion4f & operator -= (Quaternion4f & a, float & b) {$/;"	f
operator -=	vector/special/vector3d.h	/^static inline Vec3d & operator -= (Vec3d & a, Vec3d const & b) {$/;"	f
operator -=	vector/special/vector3d.h	/^static inline Vec3f & operator -= (Vec3f & a, Vec3f const & b) {$/;"	f
operator -=	vector/vectorf128.h	/^static inline Vec2d & operator -= (Vec2d & a, Vec2d const & b) {$/;"	f
operator -=	vector/vectorf128.h	/^static inline Vec4f & operator -= (Vec4f & a, Vec4f const & b) {$/;"	f
operator -=	vector/vectorf256.h	/^static inline Vec4d & operator -= (Vec4d & a, Vec4d const & b) {$/;"	f
operator -=	vector/vectorf256.h	/^static inline Vec8f & operator -= (Vec8f & a, Vec8f const & b) {$/;"	f
operator -=	vector/vectorf256e.h	/^static inline Vec4d & operator -= (Vec4d & a, Vec4d const & b) {$/;"	f
operator -=	vector/vectorf256e.h	/^static inline Vec8f & operator -= (Vec8f & a, Vec8f const & b) {$/;"	f
operator -=	vector/vectori128.h	/^static inline Vec16c & operator -= (Vec16c & a, Vec16c const & b) {$/;"	f
operator -=	vector/vectori128.h	/^static inline Vec2q & operator -= (Vec2q & a, Vec2q const & b) {$/;"	f
operator -=	vector/vectori128.h	/^static inline Vec4i & operator -= (Vec4i & a, Vec4i const & b) {$/;"	f
operator -=	vector/vectori128.h	/^static inline Vec8s & operator -= (Vec8s & a, Vec8s const & b) {$/;"	f
operator -=	vector/vectori256.h	/^static inline Vec16s & operator -= (Vec16s & a, Vec16s const & b) {$/;"	f
operator -=	vector/vectori256.h	/^static inline Vec32c & operator -= (Vec32c & a, Vec32c const & b) {$/;"	f
operator -=	vector/vectori256.h	/^static inline Vec4q & operator -= (Vec4q & a, Vec4q const & b) {$/;"	f
operator -=	vector/vectori256.h	/^static inline Vec8i & operator -= (Vec8i & a, Vec8i const & b) {$/;"	f
operator -=	vector/vectori256e.h	/^static inline Vec16s & operator -= (Vec16s & a, Vec16s const & b) {$/;"	f
operator -=	vector/vectori256e.h	/^static inline Vec32c & operator -= (Vec32c & a, Vec32c const & b) {$/;"	f
operator -=	vector/vectori256e.h	/^static inline Vec4q & operator -= (Vec4q & a, Vec4q const & b) {$/;"	f
operator -=	vector/vectori256e.h	/^static inline Vec8i & operator -= (Vec8i & a, Vec8i const & b) {$/;"	f
operator /	vector/special/complexvec.h	/^static inline Complex2d operator \/ (Complex2d const & a, Complex2d const & b) {$/;"	f
operator /	vector/special/complexvec.h	/^static inline Complex2d operator \/ (Complex2d const & a, double b) {$/;"	f
operator /	vector/special/complexvec.h	/^static inline Complex2d operator \/ (double a, Complex2d const & b) {$/;"	f
operator /	vector/special/complexvec.h	/^static inline Complex2f operator \/ (Complex2f const & a, Complex2f const & b) {$/;"	f
operator /	vector/special/complexvec.h	/^static inline Complex2f operator \/ (Complex2f const & a, float b) {$/;"	f
operator /	vector/special/complexvec.h	/^static inline Complex2f operator \/ (float a, Complex2f const & b) {$/;"	f
operator /	vector/special/complexvec.h	/^static inline Complex4d operator \/ (Complex4d const & a, Complex4d const & b) {$/;"	f
operator /	vector/special/complexvec.h	/^static inline Complex4d operator \/ (Complex4d const & a, double b) {$/;"	f
operator /	vector/special/complexvec.h	/^static inline Complex4d operator \/ (double a, Complex4d const & b) {$/;"	f
operator /	vector/special/complexvec.h	/^static inline Complex4f operator \/ (Complex4f const & a, Complex4f const & b) {$/;"	f
operator /	vector/special/complexvec.h	/^static inline Complex4f operator \/ (Complex4f const & a, float b) {$/;"	f
operator /	vector/special/complexvec.h	/^static inline Complex4f operator \/ (float a, Complex4f const & b) {$/;"	f
operator /	vector/special/complexvec.h	/^static inline Complex8f operator \/ (Complex8f const & a, Complex8f const & b) {$/;"	f
operator /	vector/special/complexvec.h	/^static inline Complex8f operator \/ (Complex8f const & a, float b) {$/;"	f
operator /	vector/special/complexvec.h	/^static inline Complex8f operator \/ (float a, Complex8f const & b) {$/;"	f
operator /	vector/special/quaternion.h	/^static inline Quaternion4d operator \/ (Quaternion4d const & a, Quaternion4d const & b) {$/;"	f
operator /	vector/special/quaternion.h	/^static inline Quaternion4d operator \/ (Quaternion4d const & a, double b) {$/;"	f
operator /	vector/special/quaternion.h	/^static inline Quaternion4d operator \/ (double a, Quaternion4d const & b) {$/;"	f
operator /	vector/special/quaternion.h	/^static inline Quaternion4f operator \/ (Quaternion4f const & a, Quaternion4f const & b) {$/;"	f
operator /	vector/special/quaternion.h	/^static inline Quaternion4f operator \/ (Quaternion4f const & a, float b) {$/;"	f
operator /	vector/special/quaternion.h	/^static inline Quaternion4f operator \/ (float a, Quaternion4f const & b) {$/;"	f
operator /	vector/special/vector3d.h	/^static inline Vec3d operator \/ (Vec3d const & a, Vec3d const & b) {$/;"	f
operator /	vector/special/vector3d.h	/^static inline Vec3d operator \/ (Vec3d const & a, double b) {$/;"	f
operator /	vector/special/vector3d.h	/^static inline Vec3f operator \/ (Vec3f const & a, Vec3f const & b) {$/;"	f
operator /	vector/special/vector3d.h	/^static inline Vec3f operator \/ (Vec3f const & a, float b) {$/;"	f
operator /	vector/vectorf128.h	/^static inline Vec2d operator \/ (Vec2d const & a, Vec2d const & b) {$/;"	f
operator /	vector/vectorf128.h	/^static inline Vec2d operator \/ (Vec2d const & a, double b) {$/;"	f
operator /	vector/vectorf128.h	/^static inline Vec2d operator \/ (double a, Vec2d const & b) {$/;"	f
operator /	vector/vectorf128.h	/^static inline Vec4f operator \/ (Vec4f const & a, Vec4f const & b) {$/;"	f
operator /	vector/vectorf128.h	/^static inline Vec4f operator \/ (Vec4f const & a, float b) {$/;"	f
operator /	vector/vectorf128.h	/^static inline Vec4f operator \/ (float a, Vec4f const & b) {$/;"	f
operator /	vector/vectorf256.h	/^static inline Vec4d operator \/ (Vec4d const & a, Vec4d const & b) {$/;"	f
operator /	vector/vectorf256.h	/^static inline Vec4d operator \/ (Vec4d const & a, double b) {$/;"	f
operator /	vector/vectorf256.h	/^static inline Vec4d operator \/ (double a, Vec4d const & b) {$/;"	f
operator /	vector/vectorf256.h	/^static inline Vec8f operator \/ (Vec8f const & a, Vec8f const & b) {$/;"	f
operator /	vector/vectorf256.h	/^static inline Vec8f operator \/ (Vec8f const & a, float b) {$/;"	f
operator /	vector/vectorf256.h	/^static inline Vec8f operator \/ (float a, Vec8f const & b) {$/;"	f
operator /	vector/vectorf256e.h	/^static inline Vec4d operator \/ (Vec4d const & a, Vec4d const & b) {$/;"	f
operator /	vector/vectorf256e.h	/^static inline Vec4d operator \/ (Vec4d const & a, double b) {$/;"	f
operator /	vector/vectorf256e.h	/^static inline Vec4d operator \/ (double a, Vec4d const & b) {$/;"	f
operator /	vector/vectorf256e.h	/^static inline Vec8f operator \/ (Vec8f const & a, Vec8f const & b) {$/;"	f
operator /	vector/vectorf256e.h	/^static inline Vec8f operator \/ (Vec8f const & a, float b) {$/;"	f
operator /	vector/vectorf256e.h	/^static inline Vec8f operator \/ (float a, Vec8f const & b) {$/;"	f
operator /	vector/vectori128.h	/^static inline Vec16c operator \/ (Vec16c const & a, Const_int_t<d>) {$/;"	f
operator /	vector/vectori128.h	/^static inline Vec16c operator \/ (Vec16c const & a, Const_uint_t<d>) {$/;"	f
operator /	vector/vectori128.h	/^static inline Vec16c operator \/ (Vec16c const & a, Divisor_s const & d) {$/;"	f
operator /	vector/vectori128.h	/^static inline Vec16uc operator \/ (Vec16uc const & a, Const_int_t<d>) {$/;"	f
operator /	vector/vectori128.h	/^static inline Vec16uc operator \/ (Vec16uc const & a, Const_uint_t<d>) {$/;"	f
operator /	vector/vectori128.h	/^static inline Vec16uc operator \/ (Vec16uc const & a, Divisor_us const & d) {$/;"	f
operator /	vector/vectori128.h	/^static inline Vec4i operator \/ (Vec4i const & a, Const_int_t<d>) {$/;"	f
operator /	vector/vectori128.h	/^static inline Vec4i operator \/ (Vec4i const & a, Const_uint_t<d>) {$/;"	f
operator /	vector/vectori128.h	/^static inline Vec4i operator \/ (Vec4i const & a, Divisor_i const & d) {$/;"	f
operator /	vector/vectori128.h	/^static inline Vec4ui operator \/ (Vec4ui const & a, Const_int_t<d>) {$/;"	f
operator /	vector/vectori128.h	/^static inline Vec4ui operator \/ (Vec4ui const & a, Const_uint_t<d>) {$/;"	f
operator /	vector/vectori128.h	/^static inline Vec4ui operator \/ (Vec4ui const & a, Divisor_ui const & d) {$/;"	f
operator /	vector/vectori128.h	/^static inline Vec8s operator \/ (Vec8s const & a, Const_int_t<d>) {$/;"	f
operator /	vector/vectori128.h	/^static inline Vec8s operator \/ (Vec8s const & a, Const_uint_t<d>) {$/;"	f
operator /	vector/vectori128.h	/^static inline Vec8s operator \/ (Vec8s const & a, Divisor_s const & d) {$/;"	f
operator /	vector/vectori128.h	/^static inline Vec8us operator \/ (Vec8us const & a, Const_int_t<d>) {$/;"	f
operator /	vector/vectori128.h	/^static inline Vec8us operator \/ (Vec8us const & a, Const_uint_t<d>) {$/;"	f
operator /	vector/vectori128.h	/^static inline Vec8us operator \/ (Vec8us const & a, Divisor_us const & d) {$/;"	f
operator /	vector/vectori256.h	/^static inline Vec16s operator \/ (Vec16s const & a, Const_int_t<d>) {$/;"	f
operator /	vector/vectori256.h	/^static inline Vec16s operator \/ (Vec16s const & a, Const_uint_t<d>) {$/;"	f
operator /	vector/vectori256.h	/^static inline Vec16s operator \/ (Vec16s const & a, Divisor_s const & d) {$/;"	f
operator /	vector/vectori256.h	/^static inline Vec16us operator \/ (Vec16us const & a, Const_int_t<d>) {$/;"	f
operator /	vector/vectori256.h	/^static inline Vec16us operator \/ (Vec16us const & a, Const_uint_t<d>) {$/;"	f
operator /	vector/vectori256.h	/^static inline Vec16us operator \/ (Vec16us const & a, Divisor_us const & d) {$/;"	f
operator /	vector/vectori256.h	/^static inline Vec32c operator \/ (Vec32c const & a, Const_int_t<d>) {$/;"	f
operator /	vector/vectori256.h	/^static inline Vec32c operator \/ (Vec32c const & a, Const_uint_t<d>) {$/;"	f
operator /	vector/vectori256.h	/^static inline Vec32c operator \/ (Vec32c const & a, Divisor_s const & d) {$/;"	f
operator /	vector/vectori256.h	/^static inline Vec32uc operator \/ (Vec32uc const & a, Const_int_t<d>) {$/;"	f
operator /	vector/vectori256.h	/^static inline Vec32uc operator \/ (Vec32uc const & a, Const_uint_t<d>) {$/;"	f
operator /	vector/vectori256.h	/^static inline Vec32uc operator \/ (Vec32uc const & a, Divisor_us const & d) {$/;"	f
operator /	vector/vectori256.h	/^static inline Vec8i operator \/ (Vec8i const & a, Const_int_t<d>) {$/;"	f
operator /	vector/vectori256.h	/^static inline Vec8i operator \/ (Vec8i const & a, Const_uint_t<d>) {$/;"	f
operator /	vector/vectori256.h	/^static inline Vec8i operator \/ (Vec8i const & a, Divisor_i const & d) {$/;"	f
operator /	vector/vectori256.h	/^static inline Vec8ui operator \/ (Vec8ui const & a, Const_int_t<d>) {$/;"	f
operator /	vector/vectori256.h	/^static inline Vec8ui operator \/ (Vec8ui const & a, Const_uint_t<d>) {$/;"	f
operator /	vector/vectori256.h	/^static inline Vec8ui operator \/ (Vec8ui const & a, Divisor_ui const & d) {$/;"	f
operator /	vector/vectori256e.h	/^static inline Vec16s operator \/ (Vec16s const & a, Const_int_t<d>) {$/;"	f
operator /	vector/vectori256e.h	/^static inline Vec16s operator \/ (Vec16s const & a, Const_uint_t<d>) {$/;"	f
operator /	vector/vectori256e.h	/^static inline Vec16s operator \/ (Vec16s const & a, Divisor_s const & d) {$/;"	f
operator /	vector/vectori256e.h	/^static inline Vec16us operator \/ (Vec16us const & a, Const_int_t<d>) {$/;"	f
operator /	vector/vectori256e.h	/^static inline Vec16us operator \/ (Vec16us const & a, Const_uint_t<d>) {$/;"	f
operator /	vector/vectori256e.h	/^static inline Vec16us operator \/ (Vec16us const & a, Divisor_us const & d) {$/;"	f
operator /	vector/vectori256e.h	/^static inline Vec32c operator \/ (Vec32c const & a, Const_int_t<d>) {$/;"	f
operator /	vector/vectori256e.h	/^static inline Vec32c operator \/ (Vec32c const & a, Const_uint_t<d>) {$/;"	f
operator /	vector/vectori256e.h	/^static inline Vec32c operator \/ (Vec32c const & a, Divisor_s const & d) {$/;"	f
operator /	vector/vectori256e.h	/^static inline Vec32uc operator \/ (Vec32uc const & a, Const_int_t<d>) {$/;"	f
operator /	vector/vectori256e.h	/^static inline Vec32uc operator \/ (Vec32uc const & a, Const_uint_t<d>) {$/;"	f
operator /	vector/vectori256e.h	/^static inline Vec32uc operator \/ (Vec32uc const & a, Divisor_us const & d) {$/;"	f
operator /	vector/vectori256e.h	/^static inline Vec8i operator \/ (Vec8i const & a, Const_int_t<d>) {$/;"	f
operator /	vector/vectori256e.h	/^static inline Vec8i operator \/ (Vec8i const & a, Const_uint_t<d>) {$/;"	f
operator /	vector/vectori256e.h	/^static inline Vec8i operator \/ (Vec8i const & a, Divisor_i const & d) {$/;"	f
operator /	vector/vectori256e.h	/^static inline Vec8ui operator \/ (Vec8ui const & a, Const_int_t<d>) {$/;"	f
operator /	vector/vectori256e.h	/^static inline Vec8ui operator \/ (Vec8ui const & a, Const_uint_t<d>) {$/;"	f
operator /	vector/vectori256e.h	/^static inline Vec8ui operator \/ (Vec8ui const & a, Divisor_ui const & d) {$/;"	f
operator /=	vector/special/complexvec.h	/^static inline Complex2d & operator \/= (Complex2d & a, Complex2d const & b) {$/;"	f
operator /=	vector/special/complexvec.h	/^static inline Complex2d & operator \/= (Complex2d & a, double b) {$/;"	f
operator /=	vector/special/complexvec.h	/^static inline Complex2f & operator \/= (Complex2f & a, Complex2f const & b) {$/;"	f
operator /=	vector/special/complexvec.h	/^static inline Complex2f & operator \/= (Complex2f & a, float b) {$/;"	f
operator /=	vector/special/complexvec.h	/^static inline Complex4d & operator \/= (Complex4d & a, Complex4d const & b) {$/;"	f
operator /=	vector/special/complexvec.h	/^static inline Complex4d & operator \/= (Complex4d & a, double b) {$/;"	f
operator /=	vector/special/complexvec.h	/^static inline Complex4f & operator \/= (Complex4f & a, Complex4f const & b) {$/;"	f
operator /=	vector/special/complexvec.h	/^static inline Complex4f & operator \/= (Complex4f & a, float b) {$/;"	f
operator /=	vector/special/complexvec.h	/^static inline Complex8f & operator \/= (Complex8f & a, Complex8f const & b) {$/;"	f
operator /=	vector/special/complexvec.h	/^static inline Complex8f & operator \/= (Complex8f & a, float b) {$/;"	f
operator /=	vector/special/quaternion.h	/^static inline Quaternion4d & operator \/= (Quaternion4d & a, Quaternion4d const & b) {$/;"	f
operator /=	vector/special/quaternion.h	/^static inline Quaternion4d & operator \/= (Quaternion4d & a, double b) {$/;"	f
operator /=	vector/special/quaternion.h	/^static inline Quaternion4f & operator \/= (Quaternion4f & a, Quaternion4f const & b) {$/;"	f
operator /=	vector/special/quaternion.h	/^static inline Quaternion4f & operator \/= (Quaternion4f & a, float b) {$/;"	f
operator /=	vector/special/vector3d.h	/^static inline Vec3d & operator \/= (Vec3d & a, Vec3d const & b) {$/;"	f
operator /=	vector/special/vector3d.h	/^static inline Vec3d & operator \/= (Vec3d & a, double b) {$/;"	f
operator /=	vector/special/vector3d.h	/^static inline Vec3f & operator \/= (Vec3f & a, Vec3f const & b) {$/;"	f
operator /=	vector/special/vector3d.h	/^static inline Vec3f & operator \/= (Vec3f & a, float b) {$/;"	f
operator /=	vector/vectorf128.h	/^static inline Vec2d & operator \/= (Vec2d & a, Vec2d const & b) {$/;"	f
operator /=	vector/vectorf128.h	/^static inline Vec4f & operator \/= (Vec4f & a, Vec4f const & b) {$/;"	f
operator /=	vector/vectorf256.h	/^static inline Vec4d & operator \/= (Vec4d & a, Vec4d const & b) {$/;"	f
operator /=	vector/vectorf256.h	/^static inline Vec8f & operator \/= (Vec8f & a, Vec8f const & b) {$/;"	f
operator /=	vector/vectorf256e.h	/^static inline Vec4d & operator \/= (Vec4d & a, Vec4d const & b) {$/;"	f
operator /=	vector/vectorf256e.h	/^static inline Vec8f & operator \/= (Vec8f & a, Vec8f const & b) {$/;"	f
operator /=	vector/vectori128.h	/^static inline Vec16c & operator \/= (Vec16c & a, Const_int_t<d> b) {$/;"	f
operator /=	vector/vectori128.h	/^static inline Vec16c & operator \/= (Vec16c & a, Const_uint_t<d> b) {$/;"	f
operator /=	vector/vectori128.h	/^static inline Vec16c & operator \/= (Vec16c & a, Divisor_s const & d) {$/;"	f
operator /=	vector/vectori128.h	/^static inline Vec16uc & operator \/= (Vec16uc & a, Const_int_t<d> b) {$/;"	f
operator /=	vector/vectori128.h	/^static inline Vec16uc & operator \/= (Vec16uc & a, Const_uint_t<d> b) {$/;"	f
operator /=	vector/vectori128.h	/^static inline Vec16uc & operator \/= (Vec16uc & a, Divisor_us const & d) {$/;"	f
operator /=	vector/vectori128.h	/^static inline Vec4i & operator \/= (Vec4i & a, Const_int_t<d> b) {$/;"	f
operator /=	vector/vectori128.h	/^static inline Vec4i & operator \/= (Vec4i & a, Const_uint_t<d> b) {$/;"	f
operator /=	vector/vectori128.h	/^static inline Vec4i & operator \/= (Vec4i & a, Divisor_i const & d) {$/;"	f
operator /=	vector/vectori128.h	/^static inline Vec4ui & operator \/= (Vec4ui & a, Const_int_t<d> b) {$/;"	f
operator /=	vector/vectori128.h	/^static inline Vec4ui & operator \/= (Vec4ui & a, Const_uint_t<d> b) {$/;"	f
operator /=	vector/vectori128.h	/^static inline Vec4ui & operator \/= (Vec4ui & a, Divisor_ui const & d) {$/;"	f
operator /=	vector/vectori128.h	/^static inline Vec8s & operator \/= (Vec8s & a, Const_int_t<d> b) {$/;"	f
operator /=	vector/vectori128.h	/^static inline Vec8s & operator \/= (Vec8s & a, Const_uint_t<d> b) {$/;"	f
operator /=	vector/vectori128.h	/^static inline Vec8s & operator \/= (Vec8s & a, Divisor_s const & d) {$/;"	f
operator /=	vector/vectori128.h	/^static inline Vec8us & operator \/= (Vec8us & a, Const_int_t<d> b) {$/;"	f
operator /=	vector/vectori128.h	/^static inline Vec8us & operator \/= (Vec8us & a, Const_uint_t<d> b) {$/;"	f
operator /=	vector/vectori128.h	/^static inline Vec8us & operator \/= (Vec8us & a, Divisor_us const & d) {$/;"	f
operator /=	vector/vectori256.h	/^static inline Vec16s & operator \/= (Vec16s & a, Const_int_t<d> b) {$/;"	f
operator /=	vector/vectori256.h	/^static inline Vec16s & operator \/= (Vec16s & a, Const_uint_t<d> b) {$/;"	f
operator /=	vector/vectori256.h	/^static inline Vec16s & operator \/= (Vec16s & a, Divisor_s const & d) {$/;"	f
operator /=	vector/vectori256.h	/^static inline Vec16us & operator \/= (Vec16us & a, Const_int_t<d> b) {$/;"	f
operator /=	vector/vectori256.h	/^static inline Vec16us & operator \/= (Vec16us & a, Const_uint_t<d> b) {$/;"	f
operator /=	vector/vectori256.h	/^static inline Vec16us & operator \/= (Vec16us & a, Divisor_us const & d) {$/;"	f
operator /=	vector/vectori256.h	/^static inline Vec32c & operator \/= (Vec32c & a, Const_int_t<d> b) {$/;"	f
operator /=	vector/vectori256.h	/^static inline Vec32c & operator \/= (Vec32c & a, Const_uint_t<d> b) {$/;"	f
operator /=	vector/vectori256.h	/^static inline Vec32c & operator \/= (Vec32c & a, Divisor_s const & d) {$/;"	f
operator /=	vector/vectori256.h	/^static inline Vec32uc & operator \/= (Vec32uc & a, Const_int_t<d> b) {$/;"	f
operator /=	vector/vectori256.h	/^static inline Vec32uc & operator \/= (Vec32uc & a, Const_uint_t<d> b) {$/;"	f
operator /=	vector/vectori256.h	/^static inline Vec32uc & operator \/= (Vec32uc & a, Divisor_us const & d) {$/;"	f
operator /=	vector/vectori256.h	/^static inline Vec8i & operator \/= (Vec8i & a, Const_int_t<d> b) {$/;"	f
operator /=	vector/vectori256.h	/^static inline Vec8i & operator \/= (Vec8i & a, Const_uint_t<d> b) {$/;"	f
operator /=	vector/vectori256.h	/^static inline Vec8i & operator \/= (Vec8i & a, Divisor_i const & d) {$/;"	f
operator /=	vector/vectori256.h	/^static inline Vec8ui & operator \/= (Vec8ui & a, Const_int_t<d> b) {$/;"	f
operator /=	vector/vectori256.h	/^static inline Vec8ui & operator \/= (Vec8ui & a, Const_uint_t<d> b) {$/;"	f
operator /=	vector/vectori256.h	/^static inline Vec8ui & operator \/= (Vec8ui & a, Divisor_ui const & d) {$/;"	f
operator /=	vector/vectori256e.h	/^static inline Vec16s & operator \/= (Vec16s & a, Const_int_t<d> b) {$/;"	f
operator /=	vector/vectori256e.h	/^static inline Vec16s & operator \/= (Vec16s & a, Const_uint_t<d> b) {$/;"	f
operator /=	vector/vectori256e.h	/^static inline Vec16s & operator \/= (Vec16s & a, Divisor_s const & d) {$/;"	f
operator /=	vector/vectori256e.h	/^static inline Vec16us & operator \/= (Vec16us & a, Const_int_t<d> b) {$/;"	f
operator /=	vector/vectori256e.h	/^static inline Vec16us & operator \/= (Vec16us & a, Const_uint_t<d> b) {$/;"	f
operator /=	vector/vectori256e.h	/^static inline Vec16us & operator \/= (Vec16us & a, Divisor_us const & d) {$/;"	f
operator /=	vector/vectori256e.h	/^static inline Vec32c & operator \/= (Vec32c & a, Const_int_t<d> b) {$/;"	f
operator /=	vector/vectori256e.h	/^static inline Vec32c & operator \/= (Vec32c & a, Const_uint_t<d> b) {$/;"	f
operator /=	vector/vectori256e.h	/^static inline Vec32c & operator \/= (Vec32c & a, Divisor_s const & d) {$/;"	f
operator /=	vector/vectori256e.h	/^static inline Vec32uc & operator \/= (Vec32uc & a, Const_int_t<d> b) {$/;"	f
operator /=	vector/vectori256e.h	/^static inline Vec32uc & operator \/= (Vec32uc & a, Const_uint_t<d> b) {$/;"	f
operator /=	vector/vectori256e.h	/^static inline Vec32uc & operator \/= (Vec32uc & a, Divisor_us const & d) {$/;"	f
operator /=	vector/vectori256e.h	/^static inline Vec8i & operator \/= (Vec8i & a, Const_int_t<d> b) {$/;"	f
operator /=	vector/vectori256e.h	/^static inline Vec8i & operator \/= (Vec8i & a, Const_uint_t<d> b) {$/;"	f
operator /=	vector/vectori256e.h	/^static inline Vec8i & operator \/= (Vec8i & a, Divisor_i const & d) {$/;"	f
operator /=	vector/vectori256e.h	/^static inline Vec8ui & operator \/= (Vec8ui & a, Const_int_t<d> b) {$/;"	f
operator /=	vector/vectori256e.h	/^static inline Vec8ui & operator \/= (Vec8ui & a, Const_uint_t<d> b) {$/;"	f
operator /=	vector/vectori256e.h	/^static inline Vec8ui & operator \/= (Vec8ui & a, Divisor_ui const & d) {$/;"	f
operator <	sparseSA.hpp	/^    bool operator < (item_t t) const { return idx < t.idx;  }$/;"	f	struct:vec_uchar::item_t
operator <	vector/vectorf128.h	/^static inline Vec2db operator < (Vec2d const & a, Vec2d const & b) {$/;"	f
operator <	vector/vectorf128.h	/^static inline Vec4fb operator < (Vec4f const & a, Vec4f const & b) {$/;"	f
operator <	vector/vectorf256.h	/^static inline Vec4db operator < (Vec4d const & a, Vec4d const & b) {$/;"	f
operator <	vector/vectorf256.h	/^static inline Vec8fb operator < (Vec8f const & a, Vec8f const & b) {$/;"	f
operator <	vector/vectorf256e.h	/^static inline Vec4db operator < (Vec4d const & a, Vec4d const & b) {$/;"	f
operator <	vector/vectorf256e.h	/^static inline Vec8fb operator < (Vec8f const & a, Vec8f const & b) {$/;"	f
operator <	vector/vectori128.h	/^static inline Vec16c operator < (Vec16c const & a, Vec16c const & b) {$/;"	f
operator <	vector/vectori128.h	/^static inline Vec16c operator < (Vec16uc const & a, Vec16uc const & b) {$/;"	f
operator <	vector/vectori128.h	/^static inline Vec2q operator < (Vec2q const & a, Vec2q const & b) {$/;"	f
operator <	vector/vectori128.h	/^static inline Vec2q operator < (Vec2uq const & a, Vec2uq const & b) {$/;"	f
operator <	vector/vectori128.h	/^static inline Vec4i operator < (Vec4i const & a, Vec4i const & b) {$/;"	f
operator <	vector/vectori128.h	/^static inline Vec4i operator < (Vec4ui const & a, Vec4ui const & b) {$/;"	f
operator <	vector/vectori128.h	/^static inline Vec8s operator < (Vec8s const & a, Vec8s const & b) {$/;"	f
operator <	vector/vectori128.h	/^static inline Vec8s operator < (Vec8us const & a, Vec8us const & b) {$/;"	f
operator <	vector/vectori256.h	/^static inline Vec16s operator < (Vec16s const & a, Vec16s const & b) {$/;"	f
operator <	vector/vectori256.h	/^static inline Vec16s operator < (Vec16us const & a, Vec16us const & b) {$/;"	f
operator <	vector/vectori256.h	/^static inline Vec32c operator < (Vec32c const & a, Vec32c const & b) {$/;"	f
operator <	vector/vectori256.h	/^static inline Vec32c operator < (Vec32uc const & a, Vec32uc const & b) {$/;"	f
operator <	vector/vectori256.h	/^static inline Vec4q operator < (Vec4q const & a, Vec4q const & b) {$/;"	f
operator <	vector/vectori256.h	/^static inline Vec4q operator < (Vec4uq const & a, Vec4uq const & b) {$/;"	f
operator <	vector/vectori256.h	/^static inline Vec8i operator < (Vec8i const & a, Vec8i const & b) {$/;"	f
operator <	vector/vectori256.h	/^static inline Vec8i operator < (Vec8ui const & a, Vec8ui const & b) {$/;"	f
operator <	vector/vectori256e.h	/^static inline Vec16s operator < (Vec16s const & a, Vec16s const & b) {$/;"	f
operator <	vector/vectori256e.h	/^static inline Vec16s operator < (Vec16us const & a, Vec16us const & b) {$/;"	f
operator <	vector/vectori256e.h	/^static inline Vec32c operator < (Vec32c const & a, Vec32c const & b) {$/;"	f
operator <	vector/vectori256e.h	/^static inline Vec32c operator < (Vec32uc const & a, Vec32uc const & b) {$/;"	f
operator <	vector/vectori256e.h	/^static inline Vec4q operator < (Vec4q const & a, Vec4q const & b) {$/;"	f
operator <	vector/vectori256e.h	/^static inline Vec4q operator < (Vec4uq const & a, Vec4uq const & b) {$/;"	f
operator <	vector/vectori256e.h	/^static inline Vec8i operator < (Vec8i const & a, Vec8i const & b) {$/;"	f
operator <	vector/vectori256e.h	/^static inline Vec8i operator < (Vec8ui const & a, Vec8ui const & b) {$/;"	f
operator <<	vector/vectori128.h	/^static inline Vec16c operator << (Vec16c const & a, int b) {$/;"	f
operator <<	vector/vectori128.h	/^static inline Vec16uc operator << (Vec16uc const & a, int32_t b) {$/;"	f
operator <<	vector/vectori128.h	/^static inline Vec16uc operator << (Vec16uc const & a, uint32_t b) {$/;"	f
operator <<	vector/vectori128.h	/^static inline Vec2q operator << (Vec2q const & a, int32_t b) {$/;"	f
operator <<	vector/vectori128.h	/^static inline Vec2uq operator << (Vec2uq const & a, int32_t b) {$/;"	f
operator <<	vector/vectori128.h	/^static inline Vec2uq operator << (Vec2uq const & a, uint32_t b) {$/;"	f
operator <<	vector/vectori128.h	/^static inline Vec4i operator << (Vec4i const & a, int32_t b) {$/;"	f
operator <<	vector/vectori128.h	/^static inline Vec4ui operator << (Vec4ui const & a, int32_t b) {$/;"	f
operator <<	vector/vectori128.h	/^static inline Vec4ui operator << (Vec4ui const & a, uint32_t b) {$/;"	f
operator <<	vector/vectori128.h	/^static inline Vec8s operator << (Vec8s const & a, int b) {$/;"	f
operator <<	vector/vectori128.h	/^static inline Vec8us operator << (Vec8us const & a, int32_t b) {$/;"	f
operator <<	vector/vectori128.h	/^static inline Vec8us operator << (Vec8us const & a, uint32_t b) {$/;"	f
operator <<	vector/vectori256.h	/^static inline Vec16s operator << (Vec16s const & a, int b) {$/;"	f
operator <<	vector/vectori256.h	/^static inline Vec16us operator << (Vec16us const & a, int32_t b) {$/;"	f
operator <<	vector/vectori256.h	/^static inline Vec16us operator << (Vec16us const & a, uint32_t b) {$/;"	f
operator <<	vector/vectori256.h	/^static inline Vec32c operator << (Vec32c const & a, int b) {$/;"	f
operator <<	vector/vectori256.h	/^static inline Vec32uc operator << (Vec32uc const & a, int32_t b) {$/;"	f
operator <<	vector/vectori256.h	/^static inline Vec32uc operator << (Vec32uc const & a, uint32_t b) {$/;"	f
operator <<	vector/vectori256.h	/^static inline Vec4q operator << (Vec4q const & a, int32_t b) {$/;"	f
operator <<	vector/vectori256.h	/^static inline Vec4uq operator << (Vec4uq const & a, int32_t b) {$/;"	f
operator <<	vector/vectori256.h	/^static inline Vec4uq operator << (Vec4uq const & a, uint32_t b) {$/;"	f
operator <<	vector/vectori256.h	/^static inline Vec8i operator << (Vec8i const & a, int32_t b) {$/;"	f
operator <<	vector/vectori256.h	/^static inline Vec8ui operator << (Vec8ui const & a, int32_t b) {$/;"	f
operator <<	vector/vectori256.h	/^static inline Vec8ui operator << (Vec8ui const & a, uint32_t b) {$/;"	f
operator <<	vector/vectori256e.h	/^static inline Vec16s operator << (Vec16s const & a, int b) {$/;"	f
operator <<	vector/vectori256e.h	/^static inline Vec16us operator << (Vec16us const & a, int32_t b) {$/;"	f
operator <<	vector/vectori256e.h	/^static inline Vec16us operator << (Vec16us const & a, uint32_t b) {$/;"	f
operator <<	vector/vectori256e.h	/^static inline Vec32c operator << (Vec32c const & a, int b) {$/;"	f
operator <<	vector/vectori256e.h	/^static inline Vec32uc operator << (Vec32uc const & a, int32_t b) {$/;"	f
operator <<	vector/vectori256e.h	/^static inline Vec32uc operator << (Vec32uc const & a, uint32_t b) {$/;"	f
operator <<	vector/vectori256e.h	/^static inline Vec4q operator << (Vec4q const & a, int32_t b) {$/;"	f
operator <<	vector/vectori256e.h	/^static inline Vec4uq operator << (Vec4uq const & a, int32_t b) {$/;"	f
operator <<	vector/vectori256e.h	/^static inline Vec4uq operator << (Vec4uq const & a, uint32_t b) {$/;"	f
operator <<	vector/vectori256e.h	/^static inline Vec8i operator << (Vec8i const & a, int32_t b) {$/;"	f
operator <<	vector/vectori256e.h	/^static inline Vec8ui operator << (Vec8ui const & a, int32_t b) {$/;"	f
operator <<	vector/vectori256e.h	/^static inline Vec8ui operator << (Vec8ui const & a, uint32_t b) {$/;"	f
operator <<=	vector/vectori128.h	/^static inline Vec16c & operator <<= (Vec16c & a, int b) {$/;"	f
operator <<=	vector/vectori128.h	/^static inline Vec2q & operator <<= (Vec2q & a, int32_t b) {$/;"	f
operator <<=	vector/vectori128.h	/^static inline Vec4i & operator <<= (Vec4i & a, int32_t b) {$/;"	f
operator <<=	vector/vectori128.h	/^static inline Vec8s & operator <<= (Vec8s & a, int b) {$/;"	f
operator <<=	vector/vectori256.h	/^static inline Vec16s & operator <<= (Vec16s & a, int b) {$/;"	f
operator <<=	vector/vectori256.h	/^static inline Vec32c & operator <<= (Vec32c & a, int b) {$/;"	f
operator <<=	vector/vectori256.h	/^static inline Vec4q & operator <<= (Vec4q & a, int32_t b) {$/;"	f
operator <<=	vector/vectori256.h	/^static inline Vec8i & operator <<= (Vec8i & a, int32_t b) {$/;"	f
operator <<=	vector/vectori256e.h	/^static inline Vec16s & operator <<= (Vec16s & a, int b) {$/;"	f
operator <<=	vector/vectori256e.h	/^static inline Vec32c & operator <<= (Vec32c & a, int b) {$/;"	f
operator <<=	vector/vectori256e.h	/^static inline Vec4q & operator <<= (Vec4q & a, int32_t b) {$/;"	f
operator <<=	vector/vectori256e.h	/^static inline Vec8i & operator <<= (Vec8i & a, int32_t b) {$/;"	f
operator <=	vector/vectorf128.h	/^static inline Vec2db operator <= (Vec2d const & a, Vec2d const & b) {$/;"	f
operator <=	vector/vectorf128.h	/^static inline Vec4fb operator <= (Vec4f const & a, Vec4f const & b) {$/;"	f
operator <=	vector/vectorf256.h	/^static inline Vec4db operator <= (Vec4d const & a, Vec4d const & b) {$/;"	f
operator <=	vector/vectorf256.h	/^static inline Vec8fb operator <= (Vec8f const & a, Vec8f const & b) {$/;"	f
operator <=	vector/vectorf256e.h	/^static inline Vec4db operator <= (Vec4d const & a, Vec4d const & b) {$/;"	f
operator <=	vector/vectorf256e.h	/^static inline Vec8fb operator <= (Vec8f const & a, Vec8f const & b) {$/;"	f
operator <=	vector/vectori128.h	/^static inline Vec16c operator <= (Vec16c const & a, Vec16c const & b) {$/;"	f
operator <=	vector/vectori128.h	/^static inline Vec16c operator <= (Vec16uc const & a, Vec16uc const & b) {$/;"	f
operator <=	vector/vectori128.h	/^static inline Vec2q operator <= (Vec2q const & a, Vec2q const & b) {$/;"	f
operator <=	vector/vectori128.h	/^static inline Vec2q operator <= (Vec2uq const & a, Vec2uq const & b) {$/;"	f
operator <=	vector/vectori128.h	/^static inline Vec4i operator <= (Vec4i const & a, Vec4i const & b) {$/;"	f
operator <=	vector/vectori128.h	/^static inline Vec4i operator <= (Vec4ui const & a, Vec4ui const & b) {$/;"	f
operator <=	vector/vectori128.h	/^static inline Vec8s operator <= (Vec8s const & a, Vec8s const & b) {$/;"	f
operator <=	vector/vectori128.h	/^static inline Vec8s operator <= (Vec8us const & a, Vec8us const & b) {$/;"	f
operator <=	vector/vectori256.h	/^static inline Vec16s operator <= (Vec16s const & a, Vec16s const & b) {$/;"	f
operator <=	vector/vectori256.h	/^static inline Vec16s operator <= (Vec16us const & a, Vec16us const & b) {$/;"	f
operator <=	vector/vectori256.h	/^static inline Vec32c operator <= (Vec32c const & a, Vec32c const & b) {$/;"	f
operator <=	vector/vectori256.h	/^static inline Vec32c operator <= (Vec32uc const & a, Vec32uc const & b) {$/;"	f
operator <=	vector/vectori256.h	/^static inline Vec4q operator <= (Vec4q const & a, Vec4q const & b) {$/;"	f
operator <=	vector/vectori256.h	/^static inline Vec4q operator <= (Vec4uq const & a, Vec4uq const & b) {$/;"	f
operator <=	vector/vectori256.h	/^static inline Vec8i operator <= (Vec8i const & a, Vec8i const & b) {$/;"	f
operator <=	vector/vectori256.h	/^static inline Vec8i operator <= (Vec8ui const & a, Vec8ui const & b) {$/;"	f
operator <=	vector/vectori256e.h	/^static inline Vec16s operator <= (Vec16s const & a, Vec16s const & b) {$/;"	f
operator <=	vector/vectori256e.h	/^static inline Vec16s operator <= (Vec16us const & a, Vec16us const & b) {$/;"	f
operator <=	vector/vectori256e.h	/^static inline Vec32c operator <= (Vec32c const & a, Vec32c const & b) {$/;"	f
operator <=	vector/vectori256e.h	/^static inline Vec32c operator <= (Vec32uc const & a, Vec32uc const & b) {$/;"	f
operator <=	vector/vectori256e.h	/^static inline Vec4q operator <= (Vec4q const & a, Vec4q const & b) {$/;"	f
operator <=	vector/vectori256e.h	/^static inline Vec4q operator <= (Vec4uq const & a, Vec4uq const & b) {$/;"	f
operator <=	vector/vectori256e.h	/^static inline Vec8i operator <= (Vec8i const & a, Vec8i const & b) {$/;"	f
operator <=	vector/vectori256e.h	/^static inline Vec8i operator <= (Vec8ui const & a, Vec8ui const & b) {$/;"	f
operator =	vector/special/complexvec.h	/^    Complex2d & operator = (__m128d const & x) {$/;"	f	class:Complex2d
operator =	vector/special/complexvec.h	/^    Complex2f & operator = (__m128 const & x) {$/;"	f	class:Complex2f
operator =	vector/special/complexvec.h	/^    Complex4d & operator = (__m256d const & x) {$/;"	f	class:Complex4d
operator =	vector/special/complexvec.h	/^    Complex4f & operator = (__m128 const & x) {$/;"	f	class:Complex4f
operator =	vector/special/complexvec.h	/^    Complex8f & operator = (__m256 const & x) {$/;"	f	class:Complex8f
operator =	vector/special/quaternion.h	/^    Quaternion4d & operator = (__m256d const & x) {$/;"	f	class:Quaternion4d
operator =	vector/special/quaternion.h	/^    Quaternion4f & operator = (__m128 const & x) {$/;"	f	class:Quaternion4f
operator =	vector/special/vector3d.h	/^    Vec3d & operator = (__m256d const & x) {$/;"	f	class:Vec3d
operator =	vector/special/vector3d.h	/^    Vec3f & operator = (__m128 const & x) {$/;"	f	class:Vec3f
operator =	vector/vectorf128.h	/^    Vec2d & operator = (__m128d const & x) {$/;"	f	class:Vec2d
operator =	vector/vectorf128.h	/^    Vec2db & operator = (Vec2q const & x) {$/;"	f	class:Vec2db
operator =	vector/vectorf128.h	/^    Vec2db & operator = (__m128d const & x) {$/;"	f	class:Vec2db
operator =	vector/vectorf128.h	/^    Vec4f & operator = (__m128 const & x) {$/;"	f	class:Vec4f
operator =	vector/vectorf128.h	/^    Vec4fb & operator = (Vec4i const & x) {$/;"	f	class:Vec4fb
operator =	vector/vectorf128.h	/^    Vec4fb & operator = (__m128 const & x) {$/;"	f	class:Vec4fb
operator =	vector/vectorf256.h	/^    Vec4d & operator = (__m256d const & x) {$/;"	f	class:Vec4d
operator =	vector/vectorf256.h	/^    Vec4db & operator = (Vec4q const & x) {$/;"	f	class:Vec4db
operator =	vector/vectorf256.h	/^    Vec4db & operator = (__m256d const & x) {$/;"	f	class:Vec4db
operator =	vector/vectorf256.h	/^    Vec8f & operator = (__m256 const & x) {$/;"	f	class:Vec8f
operator =	vector/vectorf256.h	/^    Vec8fb & operator = (Vec8i const & x) {$/;"	f	class:Vec8fb
operator =	vector/vectorf256.h	/^    Vec8fb & operator = (__m256 const & x) {$/;"	f	class:Vec8fb
operator =	vector/vectorf256e.h	/^    Vec4d & operator = (Vec256de const & x) {$/;"	f	class:Vec4d
operator =	vector/vectorf256e.h	/^    Vec4db & operator = (Vec256de const & x) {$/;"	f	class:Vec4db
operator =	vector/vectorf256e.h	/^    Vec4db & operator = (Vec4q const & x) {$/;"	f	class:Vec4db
operator =	vector/vectorf256e.h	/^    Vec8f & operator = (Vec256fe const & x) {$/;"	f	class:Vec8f
operator =	vector/vectorf256e.h	/^    Vec8fb & operator = (Vec256fe const & x) {$/;"	f	class:Vec8fb
operator =	vector/vectorf256e.h	/^    Vec8fb & operator = (Vec8i const & x) {$/;"	f	class:Vec8fb
operator =	vector/vectori128.h	/^    Vec128b & operator = (__m128i const & x) {$/;"	f	class:Vec128b
operator =	vector/vectori128.h	/^    Vec16c & operator = (__m128i const & x) {$/;"	f	class:Vec16c
operator =	vector/vectori128.h	/^    Vec16uc & operator = (__m128i const & x) {$/;"	f	class:Vec16uc
operator =	vector/vectori128.h	/^    Vec2q & operator = (__m128i const & x) {$/;"	f	class:Vec2q
operator =	vector/vectori128.h	/^    Vec2uq & operator = (__m128i const & x) {$/;"	f	class:Vec2uq
operator =	vector/vectori128.h	/^    Vec4i & operator = (__m128i const & x) {$/;"	f	class:Vec4i
operator =	vector/vectori128.h	/^    Vec4ui & operator = (__m128i const & x) {$/;"	f	class:Vec4ui
operator =	vector/vectori128.h	/^    Vec8s & operator = (__m128i const & x) {$/;"	f	class:Vec8s
operator =	vector/vectori128.h	/^    Vec8us & operator = (__m128i const & x) {$/;"	f	class:Vec8us
operator =	vector/vectori256.h	/^    Vec16s & operator = (__m256i const & x) {$/;"	f	class:Vec16s
operator =	vector/vectori256.h	/^    Vec16us & operator = (__m256i const & x) {$/;"	f	class:Vec16us
operator =	vector/vectori256.h	/^    Vec256b & operator = (__m256i const & x) {$/;"	f	class:Vec256b
operator =	vector/vectori256.h	/^    Vec32c & operator = (__m256i const & x) {$/;"	f	class:Vec32c
operator =	vector/vectori256.h	/^    Vec32uc & operator = (__m256i const & x) {$/;"	f	class:Vec32uc
operator =	vector/vectori256.h	/^    Vec4q & operator = (__m256i const & x) {$/;"	f	class:Vec4q
operator =	vector/vectori256.h	/^    Vec4uq & operator = (__m256i const & x) {$/;"	f	class:Vec4uq
operator =	vector/vectori256.h	/^    Vec8i & operator = (__m256i const & x) {$/;"	f	class:Vec8i
operator =	vector/vectori256.h	/^    Vec8ui & operator = (__m256i const & x) {$/;"	f	class:Vec8ui
operator =	vector/vectori256e.h	/^    Vec16s & operator = (Vec256ie const & x) {$/;"	f	class:Vec16s
operator =	vector/vectori256e.h	/^    Vec16us & operator = (Vec256ie const & x) {$/;"	f	class:Vec16us
operator =	vector/vectori256e.h	/^    Vec256b & operator = (Vec256ie const & x) {$/;"	f	class:Vec256b
operator =	vector/vectori256e.h	/^    Vec32c & operator = (Vec256ie const & x) {$/;"	f	class:Vec32c
operator =	vector/vectori256e.h	/^    Vec32uc & operator = (Vec256ie const & x) {$/;"	f	class:Vec32uc
operator =	vector/vectori256e.h	/^    Vec4q & operator = (Vec256ie const & x) {$/;"	f	class:Vec4q
operator =	vector/vectori256e.h	/^    Vec4uq & operator = (Vec256ie const & x) {$/;"	f	class:Vec4uq
operator =	vector/vectori256e.h	/^    Vec8i & operator = (Vec256ie const & x) {$/;"	f	class:Vec8i
operator =	vector/vectori256e.h	/^    Vec8ui & operator = (Vec256ie const & x) {$/;"	f	class:Vec8ui
operator ==	vector/special/complexvec.h	/^static inline Vec2db operator == (Complex4f const & a, Complex4f const & b) {$/;"	f
operator ==	vector/special/complexvec.h	/^static inline Vec4db operator == (Complex4d const & a, Complex4d const & b) {$/;"	f
operator ==	vector/special/complexvec.h	/^static inline Vec4db operator == (Complex8f const & a, Complex8f const & b) {$/;"	f
operator ==	vector/special/complexvec.h	/^static inline bool operator == (Complex2d const & a, Complex2d const & b) {$/;"	f
operator ==	vector/special/complexvec.h	/^static inline bool operator == (Complex2f const & a, Complex2f const & b) {$/;"	f
operator ==	vector/special/quaternion.h	/^static inline bool operator == (Quaternion4d const & a, Quaternion4d const & b) {$/;"	f
operator ==	vector/special/quaternion.h	/^static inline bool operator == (Quaternion4f const & a, Quaternion4f const & b) {$/;"	f
operator ==	vector/special/vector3d.h	/^static inline bool operator == (Vec3d const & a, Vec3d const & b) {$/;"	f
operator ==	vector/special/vector3d.h	/^static inline bool operator == (Vec3f const & a, Vec3f const & b) {$/;"	f
operator ==	vector/vectorf128.h	/^static inline Vec2db operator == (Vec2d const & a, Vec2d const & b) {$/;"	f
operator ==	vector/vectorf128.h	/^static inline Vec4fb operator == (Vec4f const & a, Vec4f const & b) {$/;"	f
operator ==	vector/vectorf256.h	/^static inline Vec4db operator == (Vec4d const & a, Vec4d const & b) {$/;"	f
operator ==	vector/vectorf256.h	/^static inline Vec8fb operator == (Vec8f const & a, Vec8f const & b) {$/;"	f
operator ==	vector/vectorf256e.h	/^static inline Vec4db operator == (Vec4d const & a, Vec4d const & b) {$/;"	f
operator ==	vector/vectorf256e.h	/^static inline Vec8fb operator == (Vec8f const & a, Vec8f const & b) {$/;"	f
operator ==	vector/vectori128.h	/^static inline Vec16c operator == (Vec16c const & a, Vec16c const & b) {$/;"	f
operator ==	vector/vectori128.h	/^static inline Vec2q operator == (Vec2q const & a, Vec2q const & b) {$/;"	f
operator ==	vector/vectori128.h	/^static inline Vec4i operator == (Vec4i const & a, Vec4i const & b) {$/;"	f
operator ==	vector/vectori128.h	/^static inline Vec8s operator == (Vec8s const & a, Vec8s const & b) {$/;"	f
operator ==	vector/vectori256.h	/^static inline Vec16s operator == (Vec16s const & a, Vec16s const & b) {$/;"	f
operator ==	vector/vectori256.h	/^static inline Vec32c operator == (Vec32c const & a, Vec32c const & b) {$/;"	f
operator ==	vector/vectori256.h	/^static inline Vec4q operator == (Vec4q const & a, Vec4q const & b) {$/;"	f
operator ==	vector/vectori256.h	/^static inline Vec8i operator == (Vec8i const & a, Vec8i const & b) {$/;"	f
operator ==	vector/vectori256e.h	/^static inline Vec16s operator == (Vec16s const & a, Vec16s const & b) {$/;"	f
operator ==	vector/vectori256e.h	/^static inline Vec32c operator == (Vec32c const & a, Vec32c const & b) {$/;"	f
operator ==	vector/vectori256e.h	/^static inline Vec4q operator == (Vec4q const & a, Vec4q const & b) {$/;"	f
operator ==	vector/vectori256e.h	/^static inline Vec8i operator == (Vec8i const & a, Vec8i const & b) {$/;"	f
operator >	vector/vectorf128.h	/^static inline Vec2db operator > (Vec2d const & a, Vec2d const & b) {$/;"	f
operator >	vector/vectorf128.h	/^static inline Vec4fb operator > (Vec4f const & a, Vec4f const & b) {$/;"	f
operator >	vector/vectorf256.h	/^static inline Vec4db operator > (Vec4d const & a, Vec4d const & b) {$/;"	f
operator >	vector/vectorf256.h	/^static inline Vec8fb operator > (Vec8f const & a, Vec8f const & b) {$/;"	f
operator >	vector/vectorf256e.h	/^static inline Vec4db operator > (Vec4d const & a, Vec4d const & b) {$/;"	f
operator >	vector/vectorf256e.h	/^static inline Vec8fb operator > (Vec8f const & a, Vec8f const & b) {$/;"	f
operator >	vector/vectori128.h	/^static inline Vec16c operator > (Vec16c const & a, Vec16c const & b) {$/;"	f
operator >	vector/vectori128.h	/^static inline Vec16c operator > (Vec16uc const & a, Vec16uc const & b) {$/;"	f
operator >	vector/vectori128.h	/^static inline Vec2q operator > (Vec2q const & a, Vec2q const & b) {$/;"	f
operator >	vector/vectori128.h	/^static inline Vec2q operator > (Vec2uq const & a, Vec2uq const & b) {$/;"	f
operator >	vector/vectori128.h	/^static inline Vec4i operator > (Vec4i const & a, Vec4i const & b) {$/;"	f
operator >	vector/vectori128.h	/^static inline Vec4i operator > (Vec4ui const & a, Vec4ui const & b) {$/;"	f
operator >	vector/vectori128.h	/^static inline Vec8s operator > (Vec8s const & a, Vec8s const & b) {$/;"	f
operator >	vector/vectori128.h	/^static inline Vec8s operator > (Vec8us const & a, Vec8us const & b) {$/;"	f
operator >	vector/vectori256.h	/^static inline Vec16s operator > (Vec16s const & a, Vec16s const & b) {$/;"	f
operator >	vector/vectori256.h	/^static inline Vec16s operator > (Vec16us const & a, Vec16us const & b) {$/;"	f
operator >	vector/vectori256.h	/^static inline Vec32c operator > (Vec32c const & a, Vec32c const & b) {$/;"	f
operator >	vector/vectori256.h	/^static inline Vec32c operator > (Vec32uc const & a, Vec32uc const & b) {$/;"	f
operator >	vector/vectori256.h	/^static inline Vec4q operator > (Vec4q const & a, Vec4q const & b) {$/;"	f
operator >	vector/vectori256.h	/^static inline Vec4q operator > (Vec4uq const & a, Vec4uq const & b) {$/;"	f
operator >	vector/vectori256.h	/^static inline Vec8i operator > (Vec8i const & a, Vec8i const & b) {$/;"	f
operator >	vector/vectori256.h	/^static inline Vec8i operator > (Vec8ui const & a, Vec8ui const & b) {$/;"	f
operator >	vector/vectori256e.h	/^static inline Vec16s operator > (Vec16s const & a, Vec16s const & b) {$/;"	f
operator >	vector/vectori256e.h	/^static inline Vec16s operator > (Vec16us const & a, Vec16us const & b) {$/;"	f
operator >	vector/vectori256e.h	/^static inline Vec32c operator > (Vec32c const & a, Vec32c const & b) {$/;"	f
operator >	vector/vectori256e.h	/^static inline Vec32c operator > (Vec32uc const & a, Vec32uc const & b) {$/;"	f
operator >	vector/vectori256e.h	/^static inline Vec4q operator > (Vec4q const & a, Vec4q const & b) {$/;"	f
operator >	vector/vectori256e.h	/^static inline Vec4q operator > (Vec4uq const & a, Vec4uq const & b) {$/;"	f
operator >	vector/vectori256e.h	/^static inline Vec8i operator > (Vec8i const & a, Vec8i const & b) {$/;"	f
operator >	vector/vectori256e.h	/^static inline Vec8i operator > (Vec8ui const & a, Vec8ui const & b) {$/;"	f
operator >=	vector/vectorf128.h	/^static inline Vec2db operator >= (Vec2d const & a, Vec2d const & b) {$/;"	f
operator >=	vector/vectorf128.h	/^static inline Vec4fb operator >= (Vec4f const & a, Vec4f const & b) {$/;"	f
operator >=	vector/vectorf256.h	/^static inline Vec4db operator >= (Vec4d const & a, Vec4d const & b) {$/;"	f
operator >=	vector/vectorf256.h	/^static inline Vec8fb operator >= (Vec8f const & a, Vec8f const & b) {$/;"	f
operator >=	vector/vectorf256e.h	/^static inline Vec4db operator >= (Vec4d const & a, Vec4d const & b) {$/;"	f
operator >=	vector/vectorf256e.h	/^static inline Vec8fb operator >= (Vec8f const & a, Vec8f const & b) {$/;"	f
operator >=	vector/vectori128.h	/^static inline Vec16c operator >= (Vec16c const & a, Vec16c const & b) {$/;"	f
operator >=	vector/vectori128.h	/^static inline Vec16c operator >= (Vec16uc const & a, Vec16uc const & b) {$/;"	f
operator >=	vector/vectori128.h	/^static inline Vec2q operator >= (Vec2q const & a, Vec2q const & b) {$/;"	f
operator >=	vector/vectori128.h	/^static inline Vec2q operator >= (Vec2uq const & a, Vec2uq const & b) {$/;"	f
operator >=	vector/vectori128.h	/^static inline Vec4i operator >= (Vec4i const & a, Vec4i const & b) {$/;"	f
operator >=	vector/vectori128.h	/^static inline Vec4i operator >= (Vec4ui const & a, Vec4ui const & b) {$/;"	f
operator >=	vector/vectori128.h	/^static inline Vec8s operator >= (Vec8s const & a, Vec8s const & b) {$/;"	f
operator >=	vector/vectori128.h	/^static inline Vec8s operator >= (Vec8us const & a, Vec8us const & b) {$/;"	f
operator >=	vector/vectori256.h	/^static inline Vec16s operator >= (Vec16s const & a, Vec16s const & b) {$/;"	f
operator >=	vector/vectori256.h	/^static inline Vec16s operator >= (Vec16us const & a, Vec16us const & b) {$/;"	f
operator >=	vector/vectori256.h	/^static inline Vec32c operator >= (Vec32c const & a, Vec32c const & b) {$/;"	f
operator >=	vector/vectori256.h	/^static inline Vec32c operator >= (Vec32uc const & a, Vec32uc const & b) {$/;"	f
operator >=	vector/vectori256.h	/^static inline Vec4q operator >= (Vec4q const & a, Vec4q const & b) {$/;"	f
operator >=	vector/vectori256.h	/^static inline Vec4q operator >= (Vec4uq const & a, Vec4uq const & b) {$/;"	f
operator >=	vector/vectori256.h	/^static inline Vec8i operator >= (Vec8i const & a, Vec8i const & b) {$/;"	f
operator >=	vector/vectori256.h	/^static inline Vec8i operator >= (Vec8ui const & a, Vec8ui const & b) {$/;"	f
operator >=	vector/vectori256e.h	/^static inline Vec16s operator >= (Vec16s const & a, Vec16s const & b) {$/;"	f
operator >=	vector/vectori256e.h	/^static inline Vec16s operator >= (Vec16us const & a, Vec16us const & b) {$/;"	f
operator >=	vector/vectori256e.h	/^static inline Vec32c operator >= (Vec32c const & a, Vec32c const & b) {$/;"	f
operator >=	vector/vectori256e.h	/^static inline Vec32c operator >= (Vec32uc const & a, Vec32uc const & b) {$/;"	f
operator >=	vector/vectori256e.h	/^static inline Vec4q operator >= (Vec4q const & a, Vec4q const & b) {$/;"	f
operator >=	vector/vectori256e.h	/^static inline Vec4q operator >= (Vec4uq const & a, Vec4uq const & b) {$/;"	f
operator >=	vector/vectori256e.h	/^static inline Vec8i operator >= (Vec8i const & a, Vec8i const & b) {$/;"	f
operator >=	vector/vectori256e.h	/^static inline Vec8i operator >= (Vec8ui const & a, Vec8ui const & b) {$/;"	f
operator >>	vector/vectori128.h	/^static inline Vec16c operator >> (Vec16c const & a, int b) {$/;"	f
operator >>	vector/vectori128.h	/^static inline Vec16uc operator >> (Vec16uc const & a, int32_t b) {$/;"	f
operator >>	vector/vectori128.h	/^static inline Vec16uc operator >> (Vec16uc const & a, uint32_t b) {$/;"	f
operator >>	vector/vectori128.h	/^static inline Vec2q operator >> (Vec2q const & a, int32_t b) {$/;"	f
operator >>	vector/vectori128.h	/^static inline Vec2uq operator >> (Vec2uq const & a, int32_t b) {$/;"	f
operator >>	vector/vectori128.h	/^static inline Vec2uq operator >> (Vec2uq const & a, uint32_t b) {$/;"	f
operator >>	vector/vectori128.h	/^static inline Vec4i operator >> (Vec4i const & a, int32_t b) {$/;"	f
operator >>	vector/vectori128.h	/^static inline Vec4ui operator >> (Vec4ui const & a, int32_t b) {$/;"	f
operator >>	vector/vectori128.h	/^static inline Vec4ui operator >> (Vec4ui const & a, uint32_t b) {$/;"	f
operator >>	vector/vectori128.h	/^static inline Vec8s operator >> (Vec8s const & a, int b) {$/;"	f
operator >>	vector/vectori128.h	/^static inline Vec8us operator >> (Vec8us const & a, int32_t b) {$/;"	f
operator >>	vector/vectori128.h	/^static inline Vec8us operator >> (Vec8us const & a, uint32_t b) {$/;"	f
operator >>	vector/vectori256.h	/^static inline Vec16s operator >> (Vec16s const & a, int b) {$/;"	f
operator >>	vector/vectori256.h	/^static inline Vec16us operator >> (Vec16us const & a, int32_t b) {$/;"	f
operator >>	vector/vectori256.h	/^static inline Vec16us operator >> (Vec16us const & a, uint32_t b) {$/;"	f
operator >>	vector/vectori256.h	/^static inline Vec32c operator >> (Vec32c const & a, int b) {$/;"	f
operator >>	vector/vectori256.h	/^static inline Vec32uc operator >> (Vec32uc const & a, int32_t b) {$/;"	f
operator >>	vector/vectori256.h	/^static inline Vec32uc operator >> (Vec32uc const & a, uint32_t b) {$/;"	f
operator >>	vector/vectori256.h	/^static inline Vec4q operator >> (Vec4q const & a, int32_t b) {$/;"	f
operator >>	vector/vectori256.h	/^static inline Vec4uq operator >> (Vec4uq const & a, int32_t b) {$/;"	f
operator >>	vector/vectori256.h	/^static inline Vec4uq operator >> (Vec4uq const & a, uint32_t b) {$/;"	f
operator >>	vector/vectori256.h	/^static inline Vec8i operator >> (Vec8i const & a, int32_t b) {$/;"	f
operator >>	vector/vectori256.h	/^static inline Vec8ui operator >> (Vec8ui const & a, int32_t b) {$/;"	f
operator >>	vector/vectori256.h	/^static inline Vec8ui operator >> (Vec8ui const & a, uint32_t b) {$/;"	f
operator >>	vector/vectori256e.h	/^static inline Vec16s operator >> (Vec16s const & a, int b) {$/;"	f
operator >>	vector/vectori256e.h	/^static inline Vec16us operator >> (Vec16us const & a, int b) {$/;"	f
operator >>	vector/vectori256e.h	/^static inline Vec16us operator >> (Vec16us const & a, uint32_t b) {$/;"	f
operator >>	vector/vectori256e.h	/^static inline Vec32c operator >> (Vec32c const & a, int b) {$/;"	f
operator >>	vector/vectori256e.h	/^static inline Vec32uc operator >> (Vec32uc const & a, int32_t b) {$/;"	f
operator >>	vector/vectori256e.h	/^static inline Vec32uc operator >> (Vec32uc const & a, uint32_t b) {$/;"	f
operator >>	vector/vectori256e.h	/^static inline Vec4q operator >> (Vec4q const & a, int32_t b) {$/;"	f
operator >>	vector/vectori256e.h	/^static inline Vec4uq operator >> (Vec4uq const & a, int32_t b) {$/;"	f
operator >>	vector/vectori256e.h	/^static inline Vec4uq operator >> (Vec4uq const & a, uint32_t b) {$/;"	f
operator >>	vector/vectori256e.h	/^static inline Vec8i operator >> (Vec8i const & a, int32_t b) {$/;"	f
operator >>	vector/vectori256e.h	/^static inline Vec8ui operator >> (Vec8ui const & a, int32_t b) {$/;"	f
operator >>	vector/vectori256e.h	/^static inline Vec8ui operator >> (Vec8ui const & a, uint32_t b) {$/;"	f
operator >>=	vector/vectori128.h	/^static inline Vec16c & operator >>= (Vec16c & a, int b) {$/;"	f
operator >>=	vector/vectori128.h	/^static inline Vec16uc & operator >>= (Vec16uc & a, int b) {$/;"	f
operator >>=	vector/vectori128.h	/^static inline Vec2q & operator >>= (Vec2q & a, int32_t b) {$/;"	f
operator >>=	vector/vectori128.h	/^static inline Vec2uq & operator >>= (Vec2uq & a, int b) {$/;"	f
operator >>=	vector/vectori128.h	/^static inline Vec4i & operator >>= (Vec4i & a, int32_t b) {$/;"	f
operator >>=	vector/vectori128.h	/^static inline Vec4ui & operator >>= (Vec4ui & a, int b) {$/;"	f
operator >>=	vector/vectori128.h	/^static inline Vec8s & operator >>= (Vec8s & a, int b) {$/;"	f
operator >>=	vector/vectori128.h	/^static inline Vec8us & operator >>= (Vec8us & a, int b) {$/;"	f
operator >>=	vector/vectori256.h	/^static inline Vec16s & operator >>= (Vec16s & a, int b) {$/;"	f
operator >>=	vector/vectori256.h	/^static inline Vec32c & operator >>= (Vec32c & a, int b) {$/;"	f
operator >>=	vector/vectori256.h	/^static inline Vec4q & operator >>= (Vec4q & a, int32_t b) {$/;"	f
operator >>=	vector/vectori256.h	/^static inline Vec8i & operator >>= (Vec8i & a, int32_t b) {$/;"	f
operator >>=	vector/vectori256e.h	/^static inline Vec16s & operator >>= (Vec16s & a, int b) {$/;"	f
operator >>=	vector/vectori256e.h	/^static inline Vec16us & operator >>= (Vec16us & a, uint32_t b) {$/;"	f
operator >>=	vector/vectori256e.h	/^static inline Vec32c & operator >>= (Vec32c & a, int b) {$/;"	f
operator >>=	vector/vectori256e.h	/^static inline Vec32uc & operator >>= (Vec32uc & a, uint32_t b) {$/;"	f
operator >>=	vector/vectori256e.h	/^static inline Vec4q & operator >>= (Vec4q & a, int32_t b) {$/;"	f
operator >>=	vector/vectori256e.h	/^static inline Vec4uq & operator >>= (Vec4uq & a, uint32_t b) {$/;"	f
operator >>=	vector/vectori256e.h	/^static inline Vec8i & operator >>= (Vec8i & a, int32_t b) {$/;"	f
operator >>=	vector/vectori256e.h	/^static inline Vec8ui & operator >>= (Vec8ui & a, int32_t b) {$/;"	f
operator >>=	vector/vectori256e.h	/^static inline Vec8ui & operator >>= (Vec8ui & a, uint32_t b) {$/;"	f
operator Vec2q	vector/vectorf128.h	/^    operator Vec2q() const {$/;"	f	class:Vec2db
operator Vec3d	vector/special/quaternion.h	/^    operator Vec3d() const {$/;"	f	class:Quaternion4d
operator Vec3f	vector/special/quaternion.h	/^    operator Vec3f() const {$/;"	f	class:Quaternion4f
operator Vec4i	vector/vectorf128.h	/^    operator Vec4i() const {$/;"	f	class:Vec4fb
operator Vec4q	vector/vectorf256.h	/^    operator Vec4q() const {$/;"	f	class:Vec4db
operator Vec4q	vector/vectorf256e.h	/^    operator Vec4q() const {$/;"	f	class:Vec4db
operator Vec8i	vector/vectorf256.h	/^    operator Vec8i() const {$/;"	f	class:Vec8fb
operator Vec8i	vector/vectorf256e.h	/^    operator Vec8i() const {$/;"	f	class:Vec8fb
operator []	sparseSA.hpp	/^ int operator[] (size_t idx) {$/;"	f	struct:vec_uchar
operator []	vector/special/vector3d.h	/^    double operator [] (uint32_t index) const {$/;"	f	class:Vec3d
operator []	vector/special/vector3d.h	/^    float operator [] (uint32_t index) const {$/;"	f	class:Vec3f
operator []	vector/vectorf128.h	/^    double operator [] (uint32_t index) const {$/;"	f	class:Vec2d
operator []	vector/vectorf128.h	/^    float operator [] (uint32_t index) const {$/;"	f	class:Vec4f
operator []	vector/vectorf128.h	/^    int operator [] (uint32_t index) const {$/;"	f	class:Vec2db
operator []	vector/vectorf128.h	/^    int operator [] (uint32_t index) const {$/;"	f	class:Vec4fb
operator []	vector/vectorf256.h	/^    double operator [] (uint32_t index) const {$/;"	f	class:Vec4d
operator []	vector/vectorf256.h	/^    float operator [] (uint32_t index) const {$/;"	f	class:Vec8f
operator []	vector/vectorf256.h	/^    int operator [] (uint32_t index) const {$/;"	f	class:Vec4db
operator []	vector/vectorf256.h	/^    int operator [] (uint32_t index) const {$/;"	f	class:Vec8fb
operator []	vector/vectorf256e.h	/^    double operator [] (uint32_t index) const {$/;"	f	class:Vec4d
operator []	vector/vectorf256e.h	/^    float operator [] (uint32_t index) const {$/;"	f	class:Vec8f
operator []	vector/vectorf256e.h	/^    int operator [] (uint32_t index) const {$/;"	f	class:Vec4db
operator []	vector/vectorf256e.h	/^    int operator [] (uint32_t index) const {$/;"	f	class:Vec8fb
operator []	vector/vectori128.h	/^    bool operator [] (uint32_t index) const {$/;"	f	class:Vec128b
operator []	vector/vectori128.h	/^    int16_t operator [] (uint32_t index) const {$/;"	f	class:Vec8s
operator []	vector/vectori128.h	/^    int32_t operator [] (uint32_t index) const {$/;"	f	class:Vec4i
operator []	vector/vectori128.h	/^    int64_t operator [] (uint32_t index) const {$/;"	f	class:Vec2q
operator []	vector/vectori128.h	/^    int8_t operator [] (uint32_t index) const {$/;"	f	class:Vec16c
operator []	vector/vectori128.h	/^    uint16_t operator [] (uint32_t index) const {$/;"	f	class:Vec8us
operator []	vector/vectori128.h	/^    uint32_t operator [] (uint32_t index) const {$/;"	f	class:Vec4ui
operator []	vector/vectori128.h	/^    uint64_t operator [] (uint32_t index) const {$/;"	f	class:Vec2uq
operator []	vector/vectori128.h	/^    uint8_t operator [] (uint32_t index) const {$/;"	f	class:Vec16uc
operator []	vector/vectori256.h	/^    bool operator [] (uint32_t index) const {$/;"	f	class:Vec256b
operator []	vector/vectori256.h	/^    int16_t operator [] (uint32_t index) const {$/;"	f	class:Vec16s
operator []	vector/vectori256.h	/^    int32_t operator [] (uint32_t index) const {$/;"	f	class:Vec8i
operator []	vector/vectori256.h	/^    int64_t operator [] (uint32_t index) const {$/;"	f	class:Vec4q
operator []	vector/vectori256.h	/^    int8_t operator [] (uint32_t index) const {$/;"	f	class:Vec32c
operator []	vector/vectori256.h	/^    uint16_t operator [] (uint32_t index) const {$/;"	f	class:Vec16us
operator []	vector/vectori256.h	/^    uint32_t operator [] (uint32_t index) const {$/;"	f	class:Vec8ui
operator []	vector/vectori256.h	/^    uint64_t operator [] (uint32_t index) const {$/;"	f	class:Vec4uq
operator []	vector/vectori256.h	/^    uint8_t operator [] (uint32_t index) const {$/;"	f	class:Vec32uc
operator []	vector/vectori256e.h	/^    bool operator [] (uint32_t index) const {$/;"	f	class:Vec256b
operator []	vector/vectori256e.h	/^    int16_t operator [] (uint32_t index) const {$/;"	f	class:Vec16s
operator []	vector/vectori256e.h	/^    int32_t operator [] (uint32_t index) const {$/;"	f	class:Vec8i
operator []	vector/vectori256e.h	/^    int64_t operator [] (uint32_t index) const {$/;"	f	class:Vec4q
operator []	vector/vectori256e.h	/^    int8_t operator [] (uint32_t index) const {$/;"	f	class:Vec32c
operator []	vector/vectori256e.h	/^    uint16_t operator [] (uint32_t index) const {$/;"	f	class:Vec16us
operator []	vector/vectori256e.h	/^    uint32_t operator [] (uint32_t index) const {$/;"	f	class:Vec8ui
operator []	vector/vectori256e.h	/^    uint64_t operator [] (uint32_t index) const {$/;"	f	class:Vec4uq
operator []	vector/vectori256e.h	/^    uint8_t operator [] (uint32_t index) const {$/;"	f	class:Vec32uc
operator ^	vector/vectorf128.h	/^static inline Vec2d operator ^ (Vec2d const & a, Vec2d const & b) {$/;"	f
operator ^	vector/vectorf128.h	/^static inline Vec2db operator ^ (Vec2db const & a, Vec2db const & b) {$/;"	f
operator ^	vector/vectorf128.h	/^static inline Vec4f operator ^ (Vec4f const & a, Vec4f const & b) {$/;"	f
operator ^	vector/vectorf128.h	/^static inline Vec4fb operator ^ (Vec4fb const & a, Vec4fb const & b) {$/;"	f
operator ^	vector/vectorf256.h	/^static inline Vec4d operator ^ (Vec4d const & a, Vec4d const & b) {$/;"	f
operator ^	vector/vectorf256.h	/^static inline Vec4db operator ^ (Vec4db const & a, Vec4db const & b) {$/;"	f
operator ^	vector/vectorf256.h	/^static inline Vec8f operator ^ (Vec8f const & a, Vec8f const & b) {$/;"	f
operator ^	vector/vectorf256.h	/^static inline Vec8fb operator ^ (Vec8fb const & a, Vec8fb const & b) {$/;"	f
operator ^	vector/vectorf256e.h	/^static inline Vec4d operator ^ (Vec4d const & a, Vec4d const & b) {$/;"	f
operator ^	vector/vectorf256e.h	/^static inline Vec4db operator ^ (Vec4db const & a, Vec4db const & b) {$/;"	f
operator ^	vector/vectorf256e.h	/^static inline Vec8f operator ^ (Vec8f const & a, Vec8f const & b) {$/;"	f
operator ^	vector/vectorf256e.h	/^static inline Vec8fb operator ^ (Vec8fb const & a, Vec8fb const & b) {$/;"	f
operator ^	vector/vectori128.h	/^static inline Vec128b operator ^ (Vec128b const & a, Vec128b const & b) {$/;"	f
operator ^	vector/vectori128.h	/^static inline Vec16c operator ^ (Vec16c const & a, Vec16c const & b) {$/;"	f
operator ^	vector/vectori128.h	/^static inline Vec16uc operator ^ (Vec16uc const & a, Vec16uc const & b) {$/;"	f
operator ^	vector/vectori128.h	/^static inline Vec2q operator ^ (Vec2q const & a, Vec2q const & b) {$/;"	f
operator ^	vector/vectori128.h	/^static inline Vec2uq operator ^ (Vec2uq const & a, Vec2uq const & b) {$/;"	f
operator ^	vector/vectori128.h	/^static inline Vec4i operator ^ (Vec4i const & a, Vec4i const & b) {$/;"	f
operator ^	vector/vectori128.h	/^static inline Vec4ui operator ^ (Vec4ui const & a, Vec4ui const & b) {$/;"	f
operator ^	vector/vectori128.h	/^static inline Vec8s operator ^ (Vec8s const & a, Vec8s const & b) {$/;"	f
operator ^	vector/vectori128.h	/^static inline Vec8us operator ^ (Vec8us const & a, Vec8us const & b) {$/;"	f
operator ^	vector/vectori256.h	/^static inline Vec16s operator ^ (Vec16s const & a, Vec16s const & b) {$/;"	f
operator ^	vector/vectori256.h	/^static inline Vec16us operator ^ (Vec16us const & a, Vec16us const & b) {$/;"	f
operator ^	vector/vectori256.h	/^static inline Vec256b operator ^ (Vec256b const & a, Vec256b const & b) {$/;"	f
operator ^	vector/vectori256.h	/^static inline Vec32c operator ^ (Vec32c const & a, Vec32c const & b) {$/;"	f
operator ^	vector/vectori256.h	/^static inline Vec32uc operator ^ (Vec32uc const & a, Vec32uc const & b) {$/;"	f
operator ^	vector/vectori256.h	/^static inline Vec4q operator ^ (Vec4q const & a, Vec4q const & b) {$/;"	f
operator ^	vector/vectori256.h	/^static inline Vec4uq operator ^ (Vec4uq const & a, Vec4uq const & b) {$/;"	f
operator ^	vector/vectori256.h	/^static inline Vec8i operator ^ (Vec8i const & a, Vec8i const & b) {$/;"	f
operator ^	vector/vectori256.h	/^static inline Vec8ui operator ^ (Vec8ui const & a, Vec8ui const & b) {$/;"	f
operator ^	vector/vectori256e.h	/^static inline Vec16s operator ^ (Vec16s const & a, Vec16s const & b) {$/;"	f
operator ^	vector/vectori256e.h	/^static inline Vec16us operator ^ (Vec16us const & a, Vec16us const & b) {$/;"	f
operator ^	vector/vectori256e.h	/^static inline Vec256b operator ^ (Vec256b const & a, Vec256b const & b) {$/;"	f
operator ^	vector/vectori256e.h	/^static inline Vec32c operator ^ (Vec32c const & a, Vec32c const & b) {$/;"	f
operator ^	vector/vectori256e.h	/^static inline Vec32uc operator ^ (Vec32uc const & a, Vec32uc const & b) {$/;"	f
operator ^	vector/vectori256e.h	/^static inline Vec4q operator ^ (Vec4q const & a, Vec4q const & b) {$/;"	f
operator ^	vector/vectori256e.h	/^static inline Vec4uq operator ^ (Vec4uq const & a, Vec4uq const & b) {$/;"	f
operator ^	vector/vectori256e.h	/^static inline Vec8i operator ^ (Vec8i const & a, Vec8i const & b) {$/;"	f
operator ^	vector/vectori256e.h	/^static inline Vec8ui operator ^ (Vec8ui const & a, Vec8ui const & b) {$/;"	f
operator ^=	vector/vectorf128.h	/^static inline Vec2d & operator ^= (Vec2d & a, Vec2d const & b) {$/;"	f
operator ^=	vector/vectorf128.h	/^static inline Vec2db & operator ^= (Vec2db & a, Vec2db const & b) {$/;"	f
operator ^=	vector/vectorf128.h	/^static inline Vec4f & operator ^= (Vec4f & a, Vec4f const & b) {$/;"	f
operator ^=	vector/vectorf128.h	/^static inline Vec4fb & operator ^= (Vec4fb & a, Vec4fb const & b) {$/;"	f
operator ^=	vector/vectorf256.h	/^static inline Vec4d & operator ^= (Vec4d & a, Vec4d const & b) {$/;"	f
operator ^=	vector/vectorf256.h	/^static inline Vec4db & operator ^= (Vec4db & a, Vec4db const & b) {$/;"	f
operator ^=	vector/vectorf256.h	/^static inline Vec8f & operator ^= (Vec8f & a, Vec8f const & b) {$/;"	f
operator ^=	vector/vectorf256.h	/^static inline Vec8fb & operator ^= (Vec8fb & a, Vec8fb const & b) {$/;"	f
operator ^=	vector/vectorf256e.h	/^static inline Vec4d & operator ^= (Vec4d & a, Vec4d const & b) {$/;"	f
operator ^=	vector/vectorf256e.h	/^static inline Vec4db & operator ^= (Vec4db & a, Vec4db const & b) {$/;"	f
operator ^=	vector/vectorf256e.h	/^static inline Vec8f & operator ^= (Vec8f & a, Vec8f const & b) {$/;"	f
operator ^=	vector/vectorf256e.h	/^static inline Vec8fb & operator ^= (Vec8fb & a, Vec8fb const & b) {$/;"	f
operator ^=	vector/vectori128.h	/^static inline Vec128b & operator ^= (Vec128b & a, Vec128b const & b) {$/;"	f
operator ^=	vector/vectori256.h	/^static inline Vec256b & operator ^= (Vec256b & a, Vec256b const & b) {$/;"	f
operator ^=	vector/vectori256e.h	/^static inline Vec256b & operator ^= (Vec256b & a, Vec256b const & b) {$/;"	f
operator __m128	vector/special/complexvec.h	/^    operator __m128() const {$/;"	f	class:Complex2f
operator __m128	vector/special/complexvec.h	/^    operator __m128() const {$/;"	f	class:Complex4f
operator __m128	vector/special/quaternion.h	/^    operator __m128() const {$/;"	f	class:Quaternion4f
operator __m128	vector/special/vector3d.h	/^    operator __m128() const {$/;"	f	class:Vec3f
operator __m128	vector/vectorf128.h	/^    operator __m128() const {$/;"	f	class:Vec4f
operator __m128	vector/vectorf128.h	/^    operator __m128() const {$/;"	f	class:Vec4fb
operator __m128d	vector/special/complexvec.h	/^    operator __m128d() const {$/;"	f	class:Complex2d
operator __m128d	vector/vectorf128.h	/^    operator __m128d() const {$/;"	f	class:Vec2d
operator __m128d	vector/vectorf128.h	/^    operator __m128d() const {$/;"	f	class:Vec2db
operator __m128i	vector/vectori128.h	/^    operator __m128i() const {$/;"	f	class:Vec128b
operator __m128i	vector/vectori128.h	/^    operator __m128i() const {$/;"	f	class:Vec16c
operator __m128i	vector/vectori128.h	/^    operator __m128i() const {$/;"	f	class:Vec2q
operator __m128i	vector/vectori128.h	/^    operator __m128i() const {$/;"	f	class:Vec4i
operator __m128i	vector/vectori128.h	/^    operator __m128i() const {$/;"	f	class:Vec8s
operator __m256	vector/special/complexvec.h	/^    operator __m256() const {$/;"	f	class:Complex8f
operator __m256	vector/vectorf256.h	/^    operator __m256() const {$/;"	f	class:Vec8f
operator __m256	vector/vectorf256.h	/^    operator __m256() const {$/;"	f	class:Vec8fb
operator __m256d	vector/special/complexvec.h	/^    operator __m256d() const {$/;"	f	class:Complex4d
operator __m256d	vector/special/quaternion.h	/^    operator __m256d() const {$/;"	f	class:Quaternion4d
operator __m256d	vector/special/vector3d.h	/^    operator __m256d() const {$/;"	f	class:Vec3d
operator __m256d	vector/vectorf256.h	/^    operator __m256d() const {$/;"	f	class:Vec4d
operator __m256d	vector/vectorf256.h	/^    operator __m256d() const {$/;"	f	class:Vec4db
operator __m256i	vector/vectori256.h	/^    operator __m256i() const {$/;"	f	class:Vec16s
operator __m256i	vector/vectori256.h	/^    operator __m256i() const {$/;"	f	class:Vec256b
operator __m256i	vector/vectori256.h	/^    operator __m256i() const {$/;"	f	class:Vec32c
operator __m256i	vector/vectori256.h	/^    operator __m256i() const {$/;"	f	class:Vec4q
operator __m256i	vector/vectori256.h	/^    operator __m256i() const {$/;"	f	class:Vec8i
operator |	vector/vectorf128.h	/^static inline Vec2d operator | (Vec2d const & a, Vec2d const & b) {$/;"	f
operator |	vector/vectorf128.h	/^static inline Vec2db operator | (Vec2db const & a, Vec2db const & b) {$/;"	f
operator |	vector/vectorf128.h	/^static inline Vec4f operator | (Vec4f const & a, Vec4f const & b) {$/;"	f
operator |	vector/vectorf128.h	/^static inline Vec4fb operator | (Vec4fb const & a, Vec4fb const & b) {$/;"	f
operator |	vector/vectorf256.h	/^static inline Vec4d operator | (Vec4d const & a, Vec4d const & b) {$/;"	f
operator |	vector/vectorf256.h	/^static inline Vec4db operator | (Vec4db const & a, Vec4db const & b) {$/;"	f
operator |	vector/vectorf256.h	/^static inline Vec8f operator | (Vec8f const & a, Vec8f const & b) {$/;"	f
operator |	vector/vectorf256.h	/^static inline Vec8fb operator | (Vec8fb const & a, Vec8fb const & b) {$/;"	f
operator |	vector/vectorf256e.h	/^static inline Vec4d operator | (Vec4d const & a, Vec4d const & b) {$/;"	f
operator |	vector/vectorf256e.h	/^static inline Vec4db operator | (Vec4db const & a, Vec4db const & b) {$/;"	f
operator |	vector/vectorf256e.h	/^static inline Vec8f operator | (Vec8f const & a, Vec8f const & b) {$/;"	f
operator |	vector/vectorf256e.h	/^static inline Vec8fb operator | (Vec8fb const & a, Vec8fb const & b) {$/;"	f
operator |	vector/vectori128.h	/^static inline Vec128b operator | (Vec128b const & a, Vec128b const & b) {$/;"	f
operator |	vector/vectori128.h	/^static inline Vec16c operator | (Vec16c const & a, Vec16c const & b) {$/;"	f
operator |	vector/vectori128.h	/^static inline Vec16uc operator | (Vec16uc const & a, Vec16uc const & b) {$/;"	f
operator |	vector/vectori128.h	/^static inline Vec2q operator | (Vec2q const & a, Vec2q const & b) {$/;"	f
operator |	vector/vectori128.h	/^static inline Vec2uq operator | (Vec2uq const & a, Vec2uq const & b) {$/;"	f
operator |	vector/vectori128.h	/^static inline Vec4i operator | (Vec4i const & a, Vec4i const & b) {$/;"	f
operator |	vector/vectori128.h	/^static inline Vec4ui operator | (Vec4ui const & a, Vec4ui const & b) {$/;"	f
operator |	vector/vectori128.h	/^static inline Vec8s operator | (Vec8s const & a, Vec8s const & b) {$/;"	f
operator |	vector/vectori128.h	/^static inline Vec8us operator | (Vec8us const & a, Vec8us const & b) {$/;"	f
operator |	vector/vectori256.h	/^static inline Vec16s operator | (Vec16s const & a, Vec16s const & b) {$/;"	f
operator |	vector/vectori256.h	/^static inline Vec16us operator | (Vec16us const & a, Vec16us const & b) {$/;"	f
operator |	vector/vectori256.h	/^static inline Vec256b operator | (Vec256b const & a, Vec256b const & b) {$/;"	f
operator |	vector/vectori256.h	/^static inline Vec32c operator | (Vec32c const & a, Vec32c const & b) {$/;"	f
operator |	vector/vectori256.h	/^static inline Vec32uc operator | (Vec32uc const & a, Vec32uc const & b) {$/;"	f
operator |	vector/vectori256.h	/^static inline Vec4q operator | (Vec4q const & a, Vec4q const & b) {$/;"	f
operator |	vector/vectori256.h	/^static inline Vec4uq operator | (Vec4uq const & a, Vec4uq const & b) {$/;"	f
operator |	vector/vectori256.h	/^static inline Vec8i operator | (Vec8i const & a, Vec8i const & b) {$/;"	f
operator |	vector/vectori256.h	/^static inline Vec8ui operator | (Vec8ui const & a, Vec8ui const & b) {$/;"	f
operator |	vector/vectori256e.h	/^static inline Vec16s operator | (Vec16s const & a, Vec16s const & b) {$/;"	f
operator |	vector/vectori256e.h	/^static inline Vec16us operator | (Vec16us const & a, Vec16us const & b) {$/;"	f
operator |	vector/vectori256e.h	/^static inline Vec256b operator | (Vec256b const & a, Vec256b const & b) {$/;"	f
operator |	vector/vectori256e.h	/^static inline Vec32c operator | (Vec32c const & a, Vec32c const & b) {$/;"	f
operator |	vector/vectori256e.h	/^static inline Vec32uc operator | (Vec32uc const & a, Vec32uc const & b) {$/;"	f
operator |	vector/vectori256e.h	/^static inline Vec4q operator | (Vec4q const & a, Vec4q const & b) {$/;"	f
operator |	vector/vectori256e.h	/^static inline Vec4uq operator | (Vec4uq const & a, Vec4uq const & b) {$/;"	f
operator |	vector/vectori256e.h	/^static inline Vec8i operator | (Vec8i const & a, Vec8i const & b) {$/;"	f
operator |	vector/vectori256e.h	/^static inline Vec8ui operator | (Vec8ui const & a, Vec8ui const & b) {$/;"	f
operator |=	vector/vectorf128.h	/^static inline Vec2d & operator |= (Vec2d & a, Vec2d const & b) {$/;"	f
operator |=	vector/vectorf128.h	/^static inline Vec2db & operator |= (Vec2db & a, Vec2db const & b) {$/;"	f
operator |=	vector/vectorf128.h	/^static inline Vec4f & operator |= (Vec4f & a, Vec4f const & b) {$/;"	f
operator |=	vector/vectorf128.h	/^static inline Vec4fb & operator |= (Vec4fb & a, Vec4fb const & b) {$/;"	f
operator |=	vector/vectorf256.h	/^static inline Vec4d & operator |= (Vec4d & a, Vec4d const & b) {$/;"	f
operator |=	vector/vectorf256.h	/^static inline Vec4db & operator |= (Vec4db & a, Vec4db const & b) {$/;"	f
operator |=	vector/vectorf256.h	/^static inline Vec8f & operator |= (Vec8f & a, Vec8f const & b) {$/;"	f
operator |=	vector/vectorf256.h	/^static inline Vec8fb & operator |= (Vec8fb & a, Vec8fb const & b) {$/;"	f
operator |=	vector/vectorf256e.h	/^static inline Vec4d & operator |= (Vec4d & a, Vec4d const & b) {$/;"	f
operator |=	vector/vectorf256e.h	/^static inline Vec4db & operator |= (Vec4db & a, Vec4db const & b) {$/;"	f
operator |=	vector/vectorf256e.h	/^static inline Vec8f & operator |= (Vec8f & a, Vec8f const & b) {$/;"	f
operator |=	vector/vectorf256e.h	/^static inline Vec8fb & operator |= (Vec8fb & a, Vec8fb const & b) {$/;"	f
operator |=	vector/vectori128.h	/^static inline Vec128b & operator |= (Vec128b & a, Vec128b const & b) {$/;"	f
operator |=	vector/vectori256.h	/^static inline Vec256b & operator |= (Vec256b & a, Vec256b const & b) {$/;"	f
operator |=	vector/vectori256e.h	/^static inline Vec256b & operator |= (Vec256b & a, Vec256b const & b) {$/;"	f
operator ||	vector/vectorf128.h	/^static inline Vec2db operator || (Vec2db const & a, Vec2db const & b) {$/;"	f
operator ||	vector/vectorf128.h	/^static inline Vec4fb operator || (Vec4fb const & a, Vec4fb const & b) {$/;"	f
operator ||	vector/vectorf256.h	/^static inline Vec4db operator || (Vec4db const & a, Vec4db const & b) {$/;"	f
operator ||	vector/vectorf256.h	/^static inline Vec8fb operator || (Vec8fb const & a, Vec8fb const & b) {$/;"	f
operator ||	vector/vectorf256e.h	/^static inline Vec4db operator || (Vec4db const & a, Vec4db const & b) {$/;"	f
operator ||	vector/vectorf256e.h	/^static inline Vec8fb operator || (Vec8fb const & a, Vec8fb const & b) {$/;"	f
operator ||	vector/vectori128.h	/^static inline Vec128b operator || (Vec128b const & a, Vec128b const & b) {$/;"	f
operator ||	vector/vectori128.h	/^static inline Vec16c operator || (Vec16c const & a, Vec16c const & b) {$/;"	f
operator ||	vector/vectori128.h	/^static inline Vec16uc operator || (Vec16uc const & a, Vec16uc const & b) {$/;"	f
operator ||	vector/vectori128.h	/^static inline Vec2q operator || (Vec2q const & a, Vec2q const & b) {$/;"	f
operator ||	vector/vectori128.h	/^static inline Vec2uq operator || (Vec2uq const & a, Vec2uq const & b) {$/;"	f
operator ||	vector/vectori128.h	/^static inline Vec4i operator || (Vec4i const & a, Vec4i const & b) {$/;"	f
operator ||	vector/vectori128.h	/^static inline Vec4ui operator || (Vec4ui const & a, Vec4ui const & b) {$/;"	f
operator ||	vector/vectori128.h	/^static inline Vec8s operator || (Vec8s const & a, Vec8s const & b) {$/;"	f
operator ||	vector/vectori128.h	/^static inline Vec8us operator || (Vec8us const & a, Vec8us const & b) {$/;"	f
operator ||	vector/vectori256.h	/^static inline Vec16s operator || (Vec16s const & a, Vec16s const & b) {$/;"	f
operator ||	vector/vectori256.h	/^static inline Vec16us operator || (Vec16us const & a, Vec16us const & b) {$/;"	f
operator ||	vector/vectori256.h	/^static inline Vec256b operator || (Vec256b const & a, Vec256b const & b) {$/;"	f
operator ||	vector/vectori256.h	/^static inline Vec32c operator || (Vec32c const & a, Vec32c const & b) {$/;"	f
operator ||	vector/vectori256.h	/^static inline Vec32uc operator || (Vec32uc const & a, Vec32uc const & b) {$/;"	f
operator ||	vector/vectori256.h	/^static inline Vec4q operator || (Vec4q const & a, Vec4q const & b) {$/;"	f
operator ||	vector/vectori256.h	/^static inline Vec4uq operator || (Vec4uq const & a, Vec4uq const & b) {$/;"	f
operator ||	vector/vectori256.h	/^static inline Vec8i operator || (Vec8i const & a, Vec8i const & b) {$/;"	f
operator ||	vector/vectori256.h	/^static inline Vec8ui operator || (Vec8ui const & a, Vec8ui const & b) {$/;"	f
operator ||	vector/vectori256e.h	/^static inline Vec16s operator || (Vec16s const & a, Vec16s const & b) {$/;"	f
operator ||	vector/vectori256e.h	/^static inline Vec16us operator || (Vec16us const & a, Vec16us const & b) {$/;"	f
operator ||	vector/vectori256e.h	/^static inline Vec256b operator || (Vec256b const & a, Vec256b const & b) {$/;"	f
operator ||	vector/vectori256e.h	/^static inline Vec32c operator || (Vec32c const & a, Vec32c const & b) {$/;"	f
operator ||	vector/vectori256e.h	/^static inline Vec32uc operator || (Vec32uc const & a, Vec32uc const & b) {$/;"	f
operator ||	vector/vectori256e.h	/^static inline Vec4q operator || (Vec4q const & a, Vec4q const & b) {$/;"	f
operator ||	vector/vectori256e.h	/^static inline Vec4uq operator || (Vec4uq const & a, Vec4uq const & b) {$/;"	f
operator ||	vector/vectori256e.h	/^static inline Vec8i operator || (Vec8i const & a, Vec8i const & b) {$/;"	f
operator ||	vector/vectori256e.h	/^static inline Vec8ui operator || (Vec8ui const & a, Vec8ui const & b) {$/;"	f
operator ~	vector/special/complexvec.h	/^static inline Complex2d operator ~ (Complex2d const & a) {$/;"	f
operator ~	vector/special/complexvec.h	/^static inline Complex2f operator ~ (Complex2f const & a) {$/;"	f
operator ~	vector/special/complexvec.h	/^static inline Complex4d operator ~ (Complex4d const & a) {$/;"	f
operator ~	vector/special/complexvec.h	/^static inline Complex4f operator ~ (Complex4f const & a) {$/;"	f
operator ~	vector/special/complexvec.h	/^static inline Complex8f operator ~ (Complex8f const & a) {$/;"	f
operator ~	vector/special/quaternion.h	/^static inline Quaternion4d operator ~ (Quaternion4d const & a) {$/;"	f
operator ~	vector/special/quaternion.h	/^static inline Quaternion4f operator ~ (Quaternion4f const & a) {$/;"	f
operator ~	vector/vectorf128.h	/^static inline Vec2db operator ~ (Vec2db const & a) {$/;"	f
operator ~	vector/vectorf128.h	/^static inline Vec4fb operator ~ (Vec4fb const & a) {$/;"	f
operator ~	vector/vectorf256.h	/^static inline Vec4db operator ~ (Vec4db const & a) {$/;"	f
operator ~	vector/vectorf256.h	/^static inline Vec8fb operator ~ (Vec8fb const & a) {$/;"	f
operator ~	vector/vectorf256e.h	/^static inline Vec4db operator ~ (Vec4db const & a) {$/;"	f
operator ~	vector/vectorf256e.h	/^static inline Vec8fb operator ~ (Vec8fb const & a) {$/;"	f
operator ~	vector/vectori128.h	/^static inline Vec128b operator ~ (Vec128b const & a) {$/;"	f
operator ~	vector/vectori128.h	/^static inline Vec16c operator ~ (Vec16c const & a) {$/;"	f
operator ~	vector/vectori128.h	/^static inline Vec16uc operator ~ (Vec16uc const & a) {$/;"	f
operator ~	vector/vectori128.h	/^static inline Vec2q operator ~ (Vec2q const & a) {$/;"	f
operator ~	vector/vectori128.h	/^static inline Vec2uq operator ~ (Vec2uq const & a) {$/;"	f
operator ~	vector/vectori128.h	/^static inline Vec4i operator ~ (Vec4i const & a) {$/;"	f
operator ~	vector/vectori128.h	/^static inline Vec4ui operator ~ (Vec4ui const & a) {$/;"	f
operator ~	vector/vectori128.h	/^static inline Vec8s operator ~ (Vec8s const & a) {$/;"	f
operator ~	vector/vectori128.h	/^static inline Vec8us operator ~ (Vec8us const & a) {$/;"	f
operator ~	vector/vectori256.h	/^static inline Vec16s operator ~ (Vec16s const & a) {$/;"	f
operator ~	vector/vectori256.h	/^static inline Vec16us operator ~ (Vec16us const & a) {$/;"	f
operator ~	vector/vectori256.h	/^static inline Vec256b operator ~ (Vec256b const & a) {$/;"	f
operator ~	vector/vectori256.h	/^static inline Vec32c operator ~ (Vec32c const & a) {$/;"	f
operator ~	vector/vectori256.h	/^static inline Vec32uc operator ~ (Vec32uc const & a) {$/;"	f
operator ~	vector/vectori256.h	/^static inline Vec4q operator ~ (Vec4q const & a) {$/;"	f
operator ~	vector/vectori256.h	/^static inline Vec8i operator ~ (Vec8i const & a) {$/;"	f
operator ~	vector/vectori256.h	/^static inline Vec8ui operator ~ (Vec8ui const & a) {$/;"	f
operator ~	vector/vectori256e.h	/^static inline Vec16s operator ~ (Vec16s const & a) {$/;"	f
operator ~	vector/vectori256e.h	/^static inline Vec16us operator ~ (Vec16us const & a) {$/;"	f
operator ~	vector/vectori256e.h	/^static inline Vec256b operator ~ (Vec256b const & a) {$/;"	f
operator ~	vector/vectori256e.h	/^static inline Vec32c operator ~ (Vec32c const & a) {$/;"	f
operator ~	vector/vectori256e.h	/^static inline Vec32uc operator ~ (Vec32uc const & a) {$/;"	f
operator ~	vector/vectori256e.h	/^static inline Vec4q operator ~ (Vec4q const & a) {$/;"	f
operator ~	vector/vectori256e.h	/^static inline Vec4uq operator ~ (Vec4uq const & a) {$/;"	f
operator ~	vector/vectori256e.h	/^static inline Vec8i operator ~ (Vec8i const & a) {$/;"	f
operator ~	vector/vectori256e.h	/^static inline Vec8ui operator ~ (Vec8ui const & a) {$/;"	f
optname	MUMmer/src/kurtz/libbasedir/optdesc.h	/^  char *optname,             \/\/ the option string, begins with -$/;"	m	struct:__anon18
optval	MUMmer/src/kurtz/libbasedir/optdesc.h	/^  Uint optval;               \/\/ the unique number of an option$/;"	m	struct:__anon18
ori	MUMmer/src/tigr/show-coords.cc	/^  bool ori;$/;"	m	struct:LASstats	file:
originalsequence	MUMmer/src/kurtz/libbasedir/multidef.h	/^        *originalsequence;             \/\/ NULL or points to orig. sequence$/;"	m	struct:__anon21
osi	MUMmer/docs/web/manual/index.html	/^<h3><a name="osi"><\/a>1.3. OSI open source<\/h3>$/;"	a
outputContigs	MUMmer/src/tigr/show-tiling.cc	/^void outputContigs$/;"	f
outputDelta	MUMmer/src/tigr/delta.cc	/^ostream & DeltaGraph_t::outputDelta (ostream & out)$/;"	f	class:DeltaGraph_t
outputPseudoMolecule	MUMmer/src/tigr/show-tiling.cc	/^void outputPseudoMolecule$/;"	f
outputUnusable	MUMmer/src/tigr/show-tiling.cc	/^void outputUnusable$/;"	f
outputmapview	MUMmer/docs/web/examples/index.html	/^<h4><a name="outputmapview" id="outputmapview"><\/a>2.1.3. Viewing the output<\/h4>$/;"	a
outputmummer	MUMmer/docs/web/examples/index.html	/^<h4><a name="outputmummer" id="outputmummer"><\/a>2.2.3. Viewing the output<\/h4>$/;"	a
outputnucmer	MUMmer/docs/web/examples/index.html	/^<h4><a name="outputnucmer"><\/a>2.3.6. Viewing the output<\/h4>$/;"	a
outputpromer	MUMmer/docs/web/examples/index.html	/^<h4><a name="outputpromer" id="outputpromer"><\/a>2.4.4. Viewing the output<\/h4>$/;"	a
outputrunmummer1	MUMmer/docs/web/examples/index.html	/^<h4><a name="outputrunmummer1"><\/a>2.5.2. Viewing the output<\/h4>$/;"	a
outputrunmummer3	MUMmer/docs/web/examples/index.html	/^<h4><a name="outputrunmummer3"><\/a>2.6.2. Viewing the output<\/h4>$/;"	a
overallsequences	MUMmer/src/kurtz/libbasedir/multiseq.c	/^Sint overallsequences(BOOL rcmode,Multiseq *multiseq,void *applyinfo,$/;"	f
overallstree	MUMmer/src/kurtz/streesrc/overmax.c	/^void overallstree(Suffixtree *stree,BOOL skiproot,$/;"	f
overallstree	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^void overallstree(Suffixtree *stree,BOOL skiproot,$/;"	f
overmaximalstree	MUMmer/src/kurtz/streesrc/overmax.c	/^void overmaximalstree(Suffixtree *stree,$/;"	f
overmaximalstree	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^void overmaximalstree(Suffixtree *stree,$/;"	f
oversuccsstree	MUMmer/src/kurtz/streesrc/oversucc.c	/^void oversuccsstree(Suffixtree *stree,Bref bnode,$/;"	f
oversuccsstree	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^void oversuccsstree(Suffixtree *stree,Bref bnode,$/;"	f
pQ	MUMmer/src/tigr/delta.hh	/^  long pQ, pR;$/;"	m	struct:SNP_t
pR	MUMmer/src/tigr/delta.hh	/^  long pQ, pR;$/;"	m	struct:SNP_t
parseAbort	MUMmer/src/tigr/postnuc.cc	/^void parseAbort$/;"	f
parseAbort	MUMmer/src/tigr/postpro.cc	/^void parseAbort$/;"	f
parseDelta	MUMmer/src/tigr/postnuc.cc	/^void parseDelta$/;"	f
parseDelta	MUMmer/src/tigr/postpro.cc	/^void parseDelta$/;"	f
parseDelta	MUMmer/src/tigr/show-aligns.cc	/^void parseDelta$/;"	f
parseDelta	MUMmer/src/tigr/show-coords.cc	/^void parseDelta$/;"	f
parseDelta	MUMmer/src/tigr/show-tiling.cc	/^void parseDelta$/;"	f
parsemaxmatoptions	MUMmer/src/kurtz/mm3src/maxmatopt.c	/^Sint parsemaxmatoptions(MMcallinfo *mmcallinfo,Argctype argc, char **argv)$/;"	f
permute16c	vector/vectori128.h	/^static inline Vec16c permute16c(Vec16c const & a) {$/;"	f
permute16s	vector/vectori256.h	/^static inline Vec16s permute16s(Vec16s const & a) {$/;"	f
permute16s	vector/vectori256e.h	/^static inline Vec16s permute16s(Vec16s const & a) {$/;"	f
permute16uc	vector/vectori128.h	/^static inline Vec16uc permute16uc(Vec16uc const & a) {$/;"	f
permute16us	vector/vectori256.h	/^static inline Vec16us permute16us(Vec16us const & a) {$/;"	f
permute16us	vector/vectori256e.h	/^static inline Vec16us permute16us(Vec16us const & a) {$/;"	f
permute2d	vector/vectorf128.h	/^static inline Vec2d permute2d(Vec2d const & a) {$/;"	f
permute2q	vector/vectori128.h	/^static inline Vec2q permute2q(Vec2q const & a) {$/;"	f
permute2uq	vector/vectori128.h	/^static inline Vec2uq permute2uq(Vec2uq const & a) {$/;"	f
permute32c	vector/vectori256.h	/^static inline Vec32c permute32c(Vec32c const & a) {$/;"	f
permute32c	vector/vectori256e.h	/^static inline Vec32c permute32c(Vec32c const & a) {$/;"	f
permute32uc	vector/vectori256.h	/^    static inline Vec32uc permute32uc(Vec32uc const & a) {$/;"	f
permute32uc	vector/vectori256e.h	/^    static inline Vec32uc permute32uc(Vec32uc const & a) {$/;"	f
permute4d	vector/vectorf256.h	/^static inline Vec4d permute4d(Vec4d const & a) {$/;"	f
permute4d	vector/vectorf256e.h	/^static inline Vec4d permute4d(Vec4d const & a) {$/;"	f
permute4f	vector/vectorf128.h	/^static inline Vec4f permute4f(Vec4f const & a) {$/;"	f
permute4i	vector/vectori128.h	/^static inline Vec4i permute4i(Vec4i const & a) {$/;"	f
permute4q	vector/vectori256.h	/^static inline Vec4q permute4q(Vec4q const & a) {$/;"	f
permute4q	vector/vectori256e.h	/^static inline Vec4q permute4q(Vec4q const & a) {$/;"	f
permute4ui	vector/vectori128.h	/^static inline Vec4ui permute4ui(Vec4ui const & a) {$/;"	f
permute4uq	vector/vectori256.h	/^static inline Vec4uq permute4uq(Vec4uq const & a) {$/;"	f
permute4uq	vector/vectori256e.h	/^static inline Vec4uq permute4uq(Vec4uq const & a) {$/;"	f
permute8f	vector/vectorf256.h	/^static inline Vec8f permute8f(Vec8f const & a) {$/;"	f
permute8f	vector/vectorf256e.h	/^static inline Vec8f permute8f(Vec8f const & a) {$/;"	f
permute8i	vector/vectori256.h	/^static inline Vec8i permute8i(Vec8i const & a) {$/;"	f
permute8i	vector/vectori256e.h	/^static inline Vec8i permute8i(Vec8i const & a) {$/;"	f
permute8s	vector/vectori128.h	/^static inline Vec8s permute8s(Vec8s const & a) {$/;"	f
permute8ui	vector/vectori256.h	/^static inline Vec8ui permute8ui(Vec8ui const & a) {$/;"	f
permute8ui	vector/vectori256e.h	/^static inline Vec8ui permute8ui(Vec8ui const & a) {$/;"	f
permute8us	vector/vectori128.h	/^static inline Vec8us permute8us(Vec8us const & a) {$/;"	f
placeContig	MUMmer/src/tigr/show-tiling.cc	/^void placeContig$/;"	f
pos2pospair	MUMmer/src/kurtz/libbasedir/multiseq.c	/^Sint pos2pospair(Multiseq *multiseq,PairUint *pos,Uint position)$/;"	f
pow	vector/special/vectormath.h	/^static inline Vec2d pow (Vec2d const & a, Vec2d const & b) {   \/\/ pow(a,b) = a to the power of b$/;"	f
pow	vector/special/vectormath.h	/^static inline Vec2d pow (Vec2d const & a, Vec2d const & b) {$/;"	f
pow	vector/special/vectormath.h	/^static inline Vec4d pow (Vec4d const & a, Vec4d const & b) {   \/\/ pow(a,b) = a to the power of b$/;"	f
pow	vector/special/vectormath.h	/^static inline Vec4f pow (Vec4f const & a, Vec4f const & b) {   \/\/ pow(a,b) = a to the power of b$/;"	f
pow	vector/special/vectormath.h	/^static inline Vec4f pow (Vec4f const & a, Vec4f const & b) {$/;"	f
pow	vector/special/vectormath.h	/^static inline Vec8f pow (Vec8f const & a, Vec8f const & b) {   \/\/ pow(a,b) = a to the power of b$/;"	f
pow	vector/vectorf128.h	/^static inline Vec2d pow(Vec2d const & a, Const_int_t<n>) {$/;"	f
pow	vector/vectorf128.h	/^static inline Vec2d pow(Vec2d const & a, int n) {$/;"	f
pow	vector/vectorf128.h	/^static inline Vec4f pow(Vec4f const & a, Const_int_t<n>) {$/;"	f
pow	vector/vectorf128.h	/^static inline Vec4f pow(Vec4f const & a, int n) {$/;"	f
pow	vector/vectorf256.h	/^static inline Vec4d pow(Vec4d const & a, Const_int_t<n>) {$/;"	f
pow	vector/vectorf256.h	/^static inline Vec4d pow(Vec4d const & a, int n) {$/;"	f
pow	vector/vectorf256.h	/^static inline Vec8f pow(Vec8f const & a, Const_int_t<n>) {$/;"	f
pow	vector/vectorf256.h	/^static inline Vec8f pow(Vec8f const & a, int n) {$/;"	f
pow	vector/vectorf256e.h	/^static inline Vec4d pow(Vec4d const & a, Const_int_t<n>) {$/;"	f
pow	vector/vectorf256e.h	/^static inline Vec4d pow(Vec4d const & a, int n) {$/;"	f
pow	vector/vectorf256e.h	/^static inline Vec8f pow(Vec8f const & a, Const_int_t<n>) {$/;"	f
pow	vector/vectorf256e.h	/^static inline Vec8f pow(Vec8f const & a, int n) {$/;"	f
pow_n	vector/vectorf128.h	/^static inline Vec2d pow_n(Vec2d const & a) {$/;"	f
pow_n	vector/vectorf128.h	/^static inline Vec4f pow_n(Vec4f const & a) {$/;"	f
pow_n	vector/vectorf256.h	/^static inline Vec4d pow_n(Vec4d const & a) {$/;"	f
pow_n	vector/vectorf256.h	/^static inline Vec8f pow_n(Vec8f const & a) {$/;"	f
pow_n	vector/vectorf256e.h	/^static inline Vec4d pow_n(Vec4d const & a) {$/;"	f
pow_n	vector/vectorf256e.h	/^static inline Vec8f pow_n(Vec8f const & a) {$/;"	f
previousnode	MUMmer/src/kurtz/streesrc/streetyp.h	/^  Bref previousnode;    \/\/ reference to previous node (which is branching)$/;"	m	struct:__anon9
printAlignment	MUMmer/src/tigr/show-tiling.cc	/^void printAlignment$/;"	f
printAlignments	MUMmer/src/tigr/show-aligns.cc	/^void printAlignments$/;"	f
printBtab	MUMmer/src/tigr/show-coords.cc	/^void printBtab$/;"	f
printDependInfo	MUMmer/scripts/Foundation.pm	/^   sub printDependInfo() {$/;"	s
printDependInfoAndExit	MUMmer/scripts/Foundation.pm	/^   sub printDependInfoAndExit() {$/;"	s
printHelp	MUMmer/src/tigr/postnuc.cc	/^void printHelp$/;"	f
printHelp	MUMmer/src/tigr/postpro.cc	/^void printHelp$/;"	f
printHelp	MUMmer/src/tigr/prenuc.cc	/^void printHelp$/;"	f
printHelp	MUMmer/src/tigr/prepro.cc	/^void printHelp$/;"	f
printHelp	MUMmer/src/tigr/show-aligns.cc	/^void printHelp$/;"	f
printHelp	MUMmer/src/tigr/show-coords.cc	/^void printHelp$/;"	f
printHelp	MUMmer/src/tigr/show-tiling.cc	/^void printHelp$/;"	f
printHelpInfo	MUMmer/scripts/Foundation.pm	/^   sub printHelpInfo() {$/;"	s
printHelpInfoAndExit	MUMmer/scripts/Foundation.pm	/^   sub printHelpInfoAndExit() {$/;"	s
printHuman	MUMmer/src/tigr/show-coords.cc	/^void printHuman$/;"	f
printSubstring	mummer.cpp	/^bool printSubstring = false;$/;"	v
printSubstring	sparseSA.hpp	/^  bool printSubstring;$/;"	m	struct:sparseSA
printTabular	MUMmer/src/tigr/show-coords.cc	/^void printTabular$/;"	f
printTilingAlignments	MUMmer/src/tigr/show-tiling.cc	/^void printTilingAlignments$/;"	f
printTilingPath	MUMmer/src/tigr/show-tiling.cc	/^void printTilingPath$/;"	f
printTilingXML	MUMmer/src/tigr/show-tiling.cc	/^void printTilingXML$/;"	f
printUsage	MUMmer/src/tigr/postnuc.cc	/^void printUsage$/;"	f
printUsage	MUMmer/src/tigr/postpro.cc	/^void printUsage$/;"	f
printUsage	MUMmer/src/tigr/prenuc.cc	/^void printUsage$/;"	f
printUsage	MUMmer/src/tigr/prepro.cc	/^void printUsage$/;"	f
printUsage	MUMmer/src/tigr/show-aligns.cc	/^void printUsage$/;"	f
printUsage	MUMmer/src/tigr/show-coords.cc	/^void printUsage$/;"	f
printUsage	MUMmer/src/tigr/show-tiling.cc	/^void printUsage$/;"	f
printUsageInfo	MUMmer/scripts/Foundation.pm	/^   sub printUsageInfo() {$/;"	s
printUsageInfoAndExit	MUMmer/scripts/Foundation.pm	/^   sub printUsageInfoAndExit() {$/;"	s
printVersionInfo	MUMmer/scripts/Foundation.pm	/^   sub printVersionInfo() {$/;"	s
printVersionInfoAndExit	MUMmer/scripts/Foundation.pm	/^   sub printVersionInfoAndExit() {$/;"	s
print_Id_genes	MUMmer/mapview	/^sub print_Id_genes{$/;"	s
print_Id_genes	MUMmer/scripts/mapview.pl	/^sub print_Id_genes{$/;"	s
print_align	MUMmer/mapview	/^sub print_align{$/;"	s
print_align	MUMmer/scripts/mapview.pl	/^sub print_align{$/;"	s
print_connections	MUMmer/mapview	/^sub print_connections{$/;"	s
print_connections	MUMmer/scripts/mapview.pl	/^sub print_connections{$/;"	s
print_genes	MUMmer/mapview	/^sub print_genes{$/;"	s
print_genes	MUMmer/scripts/mapview.pl	/^sub print_genes{$/;"	s
print_genes_mr	MUMmer/mapview	/^sub print_genes_mr{ $/;"	s
print_genes_mr	MUMmer/scripts/mapview.pl	/^sub print_genes_mr{ $/;"	s
print_grid	MUMmer/mapview	/^sub print_grid{  $/;"	s
print_grid	MUMmer/scripts/mapview.pl	/^sub print_grid{  $/;"	s
print_header	MUMmer/mapview	/^sub print_header{$/;"	s
print_header	MUMmer/scripts/mapview.pl	/^sub print_header{$/;"	s
print_label	MUMmer/nucmer2xfig	/^sub print_label {$/;"	s
print_label	MUMmer/scripts/nucmer2xfig.pl	/^sub print_label {$/;"	s
print_legend	MUMmer/mapview	/^sub print_legend{ $/;"	s
print_legend	MUMmer/scripts/mapview.pl	/^sub print_legend{ $/;"	s
print_length	mummer.cpp	/^bool print_length = false;$/;"	v
print_match	sparseSA.cpp	/^void sparseSA::print_match(match_t m) {$/;"	f	class:sparseSA
print_match	sparseSA.cpp	/^void sparseSA::print_match(match_t m_new, vector<match_t> &buf) {$/;"	f	class:sparseSA
print_match	sparseSA.cpp	/^void sparseSA::print_match(string meta, vector<match_t> &buf, bool rc) {$/;"	f	class:sparseSA
print_xfig_line	MUMmer/nucmer2xfig	/^sub print_xfig_line {$/;"	s
print_xfig_line	MUMmer/scripts/nucmer2xfig.pl	/^sub print_xfig_line {$/;"	s
problems	MUMmer/docs/web/manual/index.html	/^<h2><a name="problems"><\/a>5. Known problems<\/h2>$/;"	a
processSyntenys	MUMmer/src/tigr/postnuc.cc	/^void processSyntenys$/;"	f
processSyntenys	MUMmer/src/tigr/postpro.cc	/^void processSyntenys$/;"	f
processbranch1	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^static BOOL processbranch1(Bref nodeptr,void *info)$/;"	f	file:
processbranch1	MUMmer/src/kurtz/streesrc/addleafcount.c	/^static BOOL processbranch1(\/*@unused@*\/ Bref nodeptr,void *info)$/;"	f	file:
processbranch2	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^static Sint processbranch2(\/*@unused@*\/ Bref nodeptr,void *info)$/;"	f	file:
processbranch2	MUMmer/src/kurtz/streesrc/addleafcount.c	/^static Sint processbranch2(Bref nodeptr,void *info)$/;"	f	file:
processinfo	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^  void *processinfo;            \/\/ first arg. when calling previous function$/;"	m	struct:__anon2	file:
processleaf	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^static Sint processleaf(Uint leafindex,\/*@unused@*\/ Bref lcpnode,void *info)$/;"	f	file:
processleaf	MUMmer/src/kurtz/streesrc/addleafcount.c	/^static Sint processleaf(\/*@unused@*\/ Uint leafnumber,$/;"	f	file:
processmatch	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^  Processmatchfunction processmatch; \/\/ this function processes found match$/;"	m	struct:__anon2	file:
procmaxmatches	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^Sint procmaxmatches(MMcallinfo *mmcallinfo,Multiseq *subjectmultiseq)$/;"	f
procoption	MUMmer/src/kurtz/libbasedir/procopt.c	/^Sint procoption(OptionDescription *opt,Uint numofopt,char *optstring)$/;"	f
program	MUMmer/docs/web/manual/index.html	/^<h2><a name="program"><\/a>5. Program descriptions<\/h2>$/;"	a
program	MUMmer/src/kurtz/mm3src/maxmatdef.h	/^  char program[PATH_MAX+1],     \/\/ the path of the program$/;"	m	struct:__anon4
progresswithdot	MUMmer/src/kurtz/streesrc/stree.c	/^\/*@unused@*\/ static void progresswithdot(\/*@unused@*\/ Uint nextstep,$/;"	f	file:
progresswithdot	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^void progresswithdot(Uint nextstep,void *info)$/;"	f
promer	MUMmer/docs/web/examples/index.html	/^<h3><a name="promer"><\/a>2.4. promer<\/h3>$/;"	a
promer	MUMmer/docs/web/manual/index.html	/^<h4><a name="promer"><\/a>5.3.2. PROmer<\/h4>$/;"	a
promermapview	MUMmer/docs/web/examples/index.html	/^<h4><a name="promermapview" id="promermapview"><\/a>2.1.1. Running promer<\/h4>$/;"	a
promerpromer	MUMmer/docs/web/examples/index.html	/^<h4><a name="promerpromer" id="promerpromer"><\/a>2.4.1. Running promer<\/h4>$/;"	a
qrynode	MUMmer/src/tigr/delta.hh	/^  DeltaNode_t * qrynode;      \/\/!< the adjacent query node$/;"	m	struct:DeltaEdge_t
qrynodes	MUMmer/src/tigr/delta.hh	/^  std::map<std::string, DeltaNode_t> qrynodes;$/;"	m	class:DeltaGraph_t
qrypath	MUMmer/src/tigr/delta.hh	/^  std::string qrypath;         \/\/!< path of the query FastA file$/;"	m	class:DeltaGraph_t
query	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^  Uchar *query,                   \/\/ the query string$/;"	m	struct:__anon2	file:
query	sparseSA.hpp	/^  long query; \/\/ position in query$/;"	m	struct:match_t
query_arg	mummer.cpp	/^struct query_arg {$/;"	s	file:
query_fasta	mummer.cpp	/^string query_fasta;$/;"	v
query_path_m	MUMmer/src/tigr/delta.hh	/^  std::string query_path_m;      \/\/!< the name of the query file$/;"	m	class:DeltaReader_t
query_thread	mummer.cpp	/^void *query_thread(void *arg_) {$/;"	f
query_threads	mummer.cpp	/^int K = 1, num_threads = 1, query_threads = 1;$/;"	v
querycommondepth	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^  Uint querycommondepth;$/;"	m	struct:__anon1	file:
queryfilelist	MUMmer/src/kurtz/mm3src/maxmatdef.h	/^       queryfilelist[MAXNUMOFQUERYFILES][PATH_MAX+1]; $/;"	m	struct:__anon4
querylen	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^  Uint querylen,                  \/\/ length of the current query$/;"	m	struct:__anon2	file:
querymultiseq	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^           querymultiseq;      \/\/ the Multiseq record of the queries$/;"	m	struct:__anon3	file:
queryseq	MUMmer/src/kurtz/libbasedir/mumcand.h	/^       queryseq,     \/\/ number of the query sequence$/;"	m	struct:__anon19
queryseqnum	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^       queryseqnum,               \/\/ number of query sequence$/;"	m	struct:__anon2	file:
querystart	MUMmer/src/kurtz/libbasedir/mumcand.h	/^       querystart;   \/\/ start position in the query sequence      $/;"	m	struct:__anon19
querysuffix	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^        *querysuffix;             \/\/ current suffix of query$/;"	m	struct:__anon2	file:
r	qsufsort.c	/^   r,                           \/* number of symbols aggregated by transform.*\/$/;"	v	file:
radixStep	sparseSA.cpp	/^void sparseSA::radixStep(int *t_new, int *SA, long &bucketNr, long *BucketBegin, long l, long r, long h) {$/;"	f	class:sparseSA
randint	genDNA.py	/^from random import randint$/;"	i
rbound	MUMmer/src/tigr/sw_align.hh	/^  long int lbound, rbound;   \/\/ left(lower) and right(upper) bounds$/;"	m	struct:Diagonal
rcsequence	MUMmer/src/kurtz/libbasedir/multidef.h	/^        *rcsequence,                   \/\/ NULL or points to $/;"	m	struct:__anon21
readNext	MUMmer/src/tigr/delta.hh	/^  inline bool readNext (bool getdeltas = true)$/;"	f	class:DeltaReader_t
readNextAlignment	MUMmer/src/tigr/delta.cc	/^void DeltaReader_t::readNextAlignment$/;"	f	class:DeltaReader_t
readNextHeadersOnly	MUMmer/src/tigr/delta.hh	/^  inline bool readNextHeadersOnly ( )$/;"	f	class:DeltaReader_t
readNextRecord	MUMmer/src/tigr/delta.cc	/^bool DeltaReader_t::readNextRecord (const bool read_deltas)$/;"	f	class:DeltaReader_t
real	vector/special/complexvec.h	/^    double real() const {$/;"	f	class:Complex2d
real	vector/special/complexvec.h	/^    float real() const {$/;"	f	class:Complex2f
real	vector/special/quaternion.h	/^    double real() const {$/;"	f	class:Quaternion4d
real	vector/special/quaternion.h	/^    float real() const {$/;"	f	class:Quaternion4f
recipr_sqrt	vector/special/vectormath.h	/^static inline Vec2d recipr_sqrt (Vec2d const & x) {   \/\/ pow(x,-1\/2)$/;"	f
recipr_sqrt	vector/special/vectormath.h	/^static inline Vec4d recipr_sqrt (Vec4d const & x) {   \/\/ pow(x,-1\/2)$/;"	f
recipr_sqrt	vector/special/vectormath.h	/^static inline Vec4f recipr_sqrt (Vec4f const & x) {   \/\/ pow(x,-1\/2)$/;"	f
recipr_sqrt	vector/special/vectormath.h	/^static inline Vec8f recipr_sqrt (Vec8f const & x) {   \/\/ pow(x,-1\/2)$/;"	f
reciprocal	vector/special/quaternion.h	/^static inline Quaternion4d reciprocal (Quaternion4d const & a) {$/;"	f
reciprocal	vector/special/quaternion.h	/^static inline Quaternion4f reciprocal (Quaternion4f const & a) {$/;"	f
record_m	MUMmer/src/tigr/delta.hh	/^  DeltaRecord_t record_m;        \/\/!< the current delta information record$/;"	m	class:DeltaReader_t
ref	MUMmer/src/kurtz/streesrc/streetyp.h	/^  Bref ref;$/;"	m	struct:__anon11
ref	sparseSA.hpp	/^  long ref; \/\/ position in reference sequence$/;"	m	struct:match_t
refLen	MUMmer/src/tigr/postpro.cc	/^inline long int refLen$/;"	f
reference_path_m	MUMmer/src/tigr/delta.hh	/^  std::string reference_path_m;  \/\/!< the name of the reference file$/;"	m	class:DeltaReader_t
refnode	MUMmer/src/tigr/delta.hh	/^  DeltaNode_t * refnode;      \/\/!< the adjacent reference node$/;"	m	struct:DeltaEdge_t
refnodes	MUMmer/src/tigr/delta.hh	/^  std::map<std::string, DeltaNode_t> refnodes;$/;"	m	class:DeltaGraph_t
refpath	MUMmer/src/tigr/delta.hh	/^  std::string refpath;         \/\/!< path of the reference FastA file$/;"	m	class:DeltaGraph_t
reinterpret_d	vector/vectorf128.h	/^static inline __m128d reinterpret_d (__m128  const & x) {$/;"	f
reinterpret_d	vector/vectorf128.h	/^static inline __m128d reinterpret_d (__m128d const & x) {$/;"	f
reinterpret_d	vector/vectorf128.h	/^static inline __m128d reinterpret_d (__m128i const & x) {$/;"	f
reinterpret_d	vector/vectorf256.h	/^static inline __m256d reinterpret_d (Vec16s const & x) {$/;"	f
reinterpret_d	vector/vectorf256.h	/^static inline __m256d reinterpret_d (Vec256ie const & x) {$/;"	f
reinterpret_d	vector/vectorf256.h	/^static inline __m256d reinterpret_d (Vec32c const & x) {$/;"	f
reinterpret_d	vector/vectorf256.h	/^static inline __m256d reinterpret_d (Vec4d const & x) {$/;"	f
reinterpret_d	vector/vectorf256.h	/^static inline __m256d reinterpret_d (Vec4q const & x) {$/;"	f
reinterpret_d	vector/vectorf256.h	/^static inline __m256d reinterpret_d (Vec8f  const & x) {$/;"	f
reinterpret_d	vector/vectorf256.h	/^static inline __m256d reinterpret_d (Vec8f const & x) {$/;"	f
reinterpret_d	vector/vectorf256.h	/^static inline __m256d reinterpret_d (Vec8i const & x) {$/;"	f
reinterpret_d	vector/vectorf256.h	/^static inline __m256d reinterpret_d (__m256  const & x) {$/;"	f
reinterpret_d	vector/vectorf256.h	/^static inline __m256d reinterpret_d (__m256d const & x) {$/;"	f
reinterpret_d	vector/vectorf256.h	/^static inline __m256d reinterpret_d (__m256i const & x) {$/;"	f
reinterpret_d	vector/vectorf256e.h	/^static inline Vec256de reinterpret_d (Vec256de const & x) {$/;"	f
reinterpret_d	vector/vectorf256e.h	/^static inline Vec256de reinterpret_d (Vec256fe  const & x) {$/;"	f
reinterpret_d	vector/vectorf256e.h	/^static inline Vec256de reinterpret_d (Vec256ie const & x) {$/;"	f
reinterpret_f	vector/vectorf128.h	/^static inline __m128  reinterpret_f (__m128  const & x) {$/;"	f
reinterpret_f	vector/vectorf128.h	/^static inline __m128  reinterpret_f (__m128d const & x) {$/;"	f
reinterpret_f	vector/vectorf128.h	/^static inline __m128  reinterpret_f (__m128i const & x) {$/;"	f
reinterpret_f	vector/vectorf256.h	/^static inline __m256  reinterpret_f (Vec16s const & x) {$/;"	f
reinterpret_f	vector/vectorf256.h	/^static inline __m256  reinterpret_f (Vec256ie const & x) {$/;"	f
reinterpret_f	vector/vectorf256.h	/^static inline __m256  reinterpret_f (Vec32c const & x) {$/;"	f
reinterpret_f	vector/vectorf256.h	/^static inline __m256  reinterpret_f (Vec4d const & x) {$/;"	f
reinterpret_f	vector/vectorf256.h	/^static inline __m256  reinterpret_f (Vec4q const & x) {$/;"	f
reinterpret_f	vector/vectorf256.h	/^static inline __m256  reinterpret_f (Vec8f  const & x) {$/;"	f
reinterpret_f	vector/vectorf256.h	/^static inline __m256  reinterpret_f (Vec8f const & x) {$/;"	f
reinterpret_f	vector/vectorf256.h	/^static inline __m256  reinterpret_f (Vec8i const & x) {$/;"	f
reinterpret_f	vector/vectorf256.h	/^static inline __m256  reinterpret_f (__m256  const & x) {$/;"	f
reinterpret_f	vector/vectorf256.h	/^static inline __m256  reinterpret_f (__m256d const & x) {$/;"	f
reinterpret_f	vector/vectorf256.h	/^static inline __m256  reinterpret_f (__m256i const & x) {$/;"	f
reinterpret_f	vector/vectorf256e.h	/^static inline Vec256fe  reinterpret_f (Vec256de const & x) {$/;"	f
reinterpret_f	vector/vectorf256e.h	/^static inline Vec256fe  reinterpret_f (Vec256fe  const & x) {$/;"	f
reinterpret_f	vector/vectorf256e.h	/^static inline Vec256fe  reinterpret_f (Vec256ie const & x) {$/;"	f
reinterpret_i	vector/vectorf128.h	/^static inline __m128i reinterpret_i (__m128  const & x) {$/;"	f
reinterpret_i	vector/vectorf128.h	/^static inline __m128i reinterpret_i (__m128d const & x) {$/;"	f
reinterpret_i	vector/vectorf128.h	/^static inline __m128i reinterpret_i (__m128i const & x) {$/;"	f
reinterpret_i	vector/vectorf256.h	/^static inline Vec256ie reinterpret_i (Vec256ie const & x) {$/;"	f
reinterpret_i	vector/vectorf256.h	/^static inline Vec256ie reinterpret_i (Vec4d const & x) {$/;"	f
reinterpret_i	vector/vectorf256.h	/^static inline Vec256ie reinterpret_i (Vec8f const & x) {$/;"	f
reinterpret_i	vector/vectorf256.h	/^static inline Vec256ie reinterpret_i (__m256  const & x) {$/;"	f
reinterpret_i	vector/vectorf256.h	/^static inline Vec256ie reinterpret_i (__m256d const & x) {$/;"	f
reinterpret_i	vector/vectorf256.h	/^static inline __m256i reinterpret_i (Vec16s const & x) {$/;"	f
reinterpret_i	vector/vectorf256.h	/^static inline __m256i reinterpret_i (Vec32c const & x) {$/;"	f
reinterpret_i	vector/vectorf256.h	/^static inline __m256i reinterpret_i (Vec4d const & x) {$/;"	f
reinterpret_i	vector/vectorf256.h	/^static inline __m256i reinterpret_i (Vec4q const & x) {$/;"	f
reinterpret_i	vector/vectorf256.h	/^static inline __m256i reinterpret_i (Vec8f  const & x) {$/;"	f
reinterpret_i	vector/vectorf256.h	/^static inline __m256i reinterpret_i (Vec8i const & x) {$/;"	f
reinterpret_i	vector/vectorf256.h	/^static inline __m256i reinterpret_i (__m256  const & x) {$/;"	f
reinterpret_i	vector/vectorf256.h	/^static inline __m256i reinterpret_i (__m256d const & x) {$/;"	f
reinterpret_i	vector/vectorf256.h	/^static inline __m256i reinterpret_i (__m256i const & x) {$/;"	f
reinterpret_i	vector/vectorf256e.h	/^static inline Vec256ie reinterpret_i (Vec256de const & x) {$/;"	f
reinterpret_i	vector/vectorf256e.h	/^static inline Vec256ie reinterpret_i (Vec256fe  const & x) {$/;"	f
reinterpret_i	vector/vectorf256e.h	/^static inline Vec256ie reinterpret_i (Vec256ie const & x) {$/;"	f
relposition	MUMmer/src/kurtz/libbasedir/multidef.h	/^       relposition;  \/\/ the relative position of the sequence$/;"	m	struct:__anon23
remain	MUMmer/src/kurtz/streesrc/streetyp.h	/^       remain;          \/\/ number of remaining characters on edge$/;"	m	struct:__anon9
remain	MUMmer/src/kurtz/streesrc/streetyp.h	/^  Uint remain,$/;"	m	struct:__anon10
removeLogERROR	MUMmer/scripts/Foundation.pm	/^   sub removeLogERROR() {$/;"	s
removeLogMSG	MUMmer/scripts/Foundation.pm	/^   sub removeLogMSG() {$/;"	s
repeat	MUMmer/docs/web/manual/index.html	/^<h4><a name="repeat"><\/a>5.1.2. repeat-match<\/h4>$/;"	a
replaceblanks	MUMmer/src/kurtz/libbasedir/multidef.h	/^       replaceblanks,    \/\/ replaceblanks by underscore$/;"	m	struct:__anon22
repnum	MUMmer/src/kurtz/streesrc/addleafcount.c	/^static Uint tmpleafcount, repnum = 0;$/;"	v	file:
requirements	MUMmer/docs/web/manual/index.html	/^<h3><a name="requirements"><\/a>2.1. System Requirements<\/h3>$/;"	a
rescan	MUMmer/src/kurtz/streesrc/construct.c	/^static void rescan (Suffixtree *stree)$/;"	f	file:
rescanstree	MUMmer/src/kurtz/streesrc/linkloc.c	/^void rescanstree(Suffixtree *stree,Location *loc,$/;"	f
rescanstree	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^void rescanstree(Suffixtree *stree,Location *loc,$/;"	f
reset	sparseSA.hpp	/^  void reset(long e) { start = 0; end = e; depth = 0; }$/;"	f	struct:interval_t
reset_control_word	vector/vectorf128.h	/^static inline void reset_control_word() {$/;"	f
reseterror	MUMmer/src/kurtz/libbasedir/seterror.c	/^void reseterror(void)$/;"	f
resize	MUMmer/src/tigr/annotate.cc	/^  void resize(long nRows, long nCols)$/;"	f	class:Matrix_t
resize	sparseSA.hpp	/^  void resize(size_t N) { vec.resize(N); }$/;"	f	struct:vec_uchar
revC	MUMmer/src/tigr/postnuc.cc	/^inline long int revC$/;"	f
revC	MUMmer/src/tigr/postpro.cc	/^inline long int revC$/;"	f
revC	MUMmer/src/tigr/show-aligns.cc	/^long int revC$/;"	f
revC	MUMmer/src/tigr/show-coords.cc	/^inline long int revC$/;"	f
revC	MUMmer/src/tigr/show-tiling.cc	/^inline long int revC$/;"	f
rev_comp	mummer.cpp	/^bool rev_comp = false, _4column = false, nucleotides_only = false;$/;"	v
reverse_complement	fasta.cpp	/^void reverse_complement(string &seq_rc, bool nucleotides_only) {$/;"	f
reversecomplement	MUMmer/src/kurtz/mm3src/maxmatdef.h	/^       reversecomplement,       \/\/ compute matches on reverse strand$/;"	m	struct:__anon4
reversecomplement	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^       reversecomplement,      \/\/ compute reverse complement matches$/;"	m	struct:__anon3	file:
rightbrother	MUMmer/src/kurtz/streesrc/iterator.c	/^\/*@null@*\/ Reference *rightbrother(Suffixtree *stree,Reference *node)$/;"	f
rootchildren	MUMmer/src/kurtz/streesrc/streetyp.h	/^       *rootchildren;         \/\/ references to successors of root$/;"	m	struct:Suffixtreetype
rootsucclocationsstree	MUMmer/src/kurtz/streesrc/access.c	/^void rootsucclocationsstree(Suffixtree *stree,ArraySimpleloc *ll)$/;"	f
rotate	vector/special/vector3d.h	/^static inline Vec3d rotate (Vec3d const & col0, Vec3d const & col1, Vec3d const & col2, Vec3d const & a) {$/;"	f
rotate	vector/special/vector3d.h	/^static inline Vec3f rotate (Vec3f const & col0, Vec3f const & col1, Vec3f const & col2, Vec3f const & a) {$/;"	f
rotate_left	vector/vectori128.h	/^static inline Vec16c rotate_left(Vec16c const & a, int b) {$/;"	f
rotate_left	vector/vectori128.h	/^static inline Vec2q rotate_left(Vec2q const & a, int b) {$/;"	f
rotate_left	vector/vectori128.h	/^static inline Vec4i rotate_left(Vec4i const & a, int b) {$/;"	f
rotate_left	vector/vectori128.h	/^static inline Vec8s rotate_left(Vec8s const & a, int b) {$/;"	f
rotate_left	vector/vectori256.h	/^static inline Vec16s rotate_left(Vec16s const & a, int b) {$/;"	f
rotate_left	vector/vectori256.h	/^static inline Vec32c rotate_left(Vec32c const & a, int b) {$/;"	f
rotate_left	vector/vectori256.h	/^static inline Vec4q rotate_left(Vec4q const & a, int b) {$/;"	f
rotate_left	vector/vectori256.h	/^static inline Vec8i rotate_left(Vec8i const & a, int b) {$/;"	f
rotate_left	vector/vectori256e.h	/^static inline Vec16s rotate_left(Vec16s const & a, int b) {$/;"	f
rotate_left	vector/vectori256e.h	/^static inline Vec32c rotate_left(Vec32c const & a, int b) {$/;"	f
rotate_left	vector/vectori256e.h	/^static inline Vec4q rotate_left(Vec4q const & a, int b) {$/;"	f
rotate_left	vector/vectori256e.h	/^static inline Vec8i rotate_left(Vec8i const & a, int b) {$/;"	f
round	vector/vectorf128.h	/^static inline Vec2d round(Vec2d const & a) {$/;"	f
round	vector/vectorf128.h	/^static inline Vec4f round(Vec4f const & a) {$/;"	f
round	vector/vectorf256.h	/^static inline Vec4d round(Vec4d const & a) {$/;"	f
round	vector/vectorf256.h	/^static inline Vec8f round(Vec8f const & a) {$/;"	f
round	vector/vectorf256e.h	/^static inline Vec4d round(Vec4d const & a) {$/;"	f
round	vector/vectorf256e.h	/^static inline Vec8f round(Vec8f const & a) {$/;"	f
round_to_int	vector/vectorf128.h	/^static inline Vec4i round_to_int(Vec2d const & a, Vec2d const & b) {$/;"	f
round_to_int	vector/vectorf128.h	/^static inline Vec4i round_to_int(Vec4f const & a) {$/;"	f
round_to_int	vector/vectorf256.h	/^static inline Vec4i round_to_int(Vec4d const & a) {$/;"	f
round_to_int	vector/vectorf256.h	/^static inline Vec8i round_to_int(Vec8f const & a) {$/;"	f
round_to_int	vector/vectorf256e.h	/^static inline Vec4i round_to_int(Vec4d const & a) {$/;"	f
round_to_int	vector/vectorf256e.h	/^static inline Vec8i round_to_int(Vec8f const & a) {$/;"	f
round_to_int64	vector/vectorf256.h	/^static inline Vec4q round_to_int64(Vec4d const & a) {$/;"	f
round_to_int64	vector/vectorf256e.h	/^static inline Vec4q round_to_int64(Vec4d const & a) {$/;"	f
runCommand	MUMmer/scripts/Foundation.pm	/^   sub runCommand($) {$/;"	s
runmummer1runmummer1	MUMmer/docs/web/examples/index.html	/^<h4><a name="runmummer1runmummer1"><\/a>2.5.1. Running run-mummer1<\/h4>$/;"	a
runmummer3runmummer3	MUMmer/docs/web/examples/index.html	/^<h4><a name="runmummer3runmummer3"><\/a>2.6.1. Running run-mummer3<\/h4>$/;"	a
running	MUMmer/docs/web/manual/index.html	/^<h2><a name="running"><\/a>3. Running MUMmer<\/h2>$/;"	a
sA	MUMmer/src/tigr/postnuc.cc	/^  long int sA, sB, eA, eB;   \/\/ the start in A, B and the end in A, B$/;"	m	struct:Alignment	file:
sA	MUMmer/src/tigr/postnuc.cc	/^  long int sA, sB, len;      \/\/ start coordinate in A, in B and the length$/;"	m	struct:Match	file:
sA	MUMmer/src/tigr/postpro.cc	/^  long int sA, sB, eA, eB;   \/\/ the start in A, B and the end in A, B$/;"	m	struct:Alignment	file:
sA	MUMmer/src/tigr/postpro.cc	/^  long int sA, sB, len;      \/\/ start coordinate in A, in B and the length$/;"	m	struct:Match	file:
sA	MUMmer/src/tigr/show-coords.cc	/^  long int sA, eA, sB, eB;                \/\/ start, end in A, start, end in B$/;"	m	struct:AlignStats	file:
sA_Sort	MUMmer/src/tigr/show-coords.cc	/^struct sA_Sort$/;"	s	file:
sB	MUMmer/src/tigr/postnuc.cc	/^  long int sA, sB, eA, eB;   \/\/ the start in A, B and the end in A, B$/;"	m	struct:Alignment	file:
sB	MUMmer/src/tigr/postnuc.cc	/^  long int sA, sB, len;      \/\/ start coordinate in A, in B and the length$/;"	m	struct:Match	file:
sB	MUMmer/src/tigr/postpro.cc	/^  long int sA, sB, eA, eB;   \/\/ the start in A, B and the end in A, B$/;"	m	struct:Alignment	file:
sB	MUMmer/src/tigr/postpro.cc	/^  long int sA, sB, len;      \/\/ start coordinate in A, in B and the length$/;"	m	struct:Match	file:
sB	MUMmer/src/tigr/show-coords.cc	/^  long int sA, eA, sB, eB;                \/\/ start, end in A, start, end in B$/;"	m	struct:AlignStats	file:
sQ	MUMmer/src/tigr/delta.hh	/^  long sQ;    \/\/!< start coordinate in the reference$/;"	m	struct:DeltaAlignment_t
sQ	MUMmer/src/tigr/show-aligns.cc	/^  long int sQ, eQ, sR, eR;              \/\/ start and end in Query and Reference$/;"	m	struct:AlignStats	file:
sQ	MUMmer/src/tigr/show-tiling.cc	/^  long int sQ, eQ, sR, eR;              \/\/ start and end in Query and Reference$/;"	m	struct:AlignStats	file:
sQ_Sort	MUMmer/src/tigr/show-aligns.cc	/^struct sQ_Sort$/;"	s	file:
sR	MUMmer/src/tigr/delta.hh	/^  long sR;    \/\/!< start coordinate in the reference$/;"	m	struct:DeltaAlignment_t
sR	MUMmer/src/tigr/show-aligns.cc	/^  long int sQ, eQ, sR, eR;              \/\/ start and end in Query and Reference$/;"	m	struct:AlignStats	file:
sR	MUMmer/src/tigr/show-tiling.cc	/^  long int sQ, eQ, sR, eR;              \/\/ start and end in Query and Reference$/;"	m	struct:AlignStats	file:
sR_Sort	MUMmer/src/tigr/show-aligns.cc	/^struct sR_Sort$/;"	s	file:
s_Cover_t	MUMmer/src/tigr/combineMUMs.cc	/^typedef  struct s_Cover_t$/;"	s	file:
sa	mummer.cpp	/^sparseSA *sa;$/;"	v
sa	sparseSA.cpp	/^  sparseSA *sa; \/\/ Suffix array + aux informaton$/;"	m	struct:thread_data	file:
safestringcopy	MUMmer/src/kurtz/libbasedir/safescpy.c	/^Sint safestringcopy(char *dest,char *source,Sint maxlen)$/;"	f
scanmultiplefastafile	MUMmer/src/kurtz/mm3src/maxmatinp.c	/^Sint scanmultiplefastafile (Multiseq *multiseq,$/;"	f
scanprefix	MUMmer/src/kurtz/streesrc/construct.c	/^static void scanprefix(Suffixtree *stree)$/;"	f	file:
scanprefixfromnodestree	MUMmer/src/kurtz/streesrc/scanpref.c	/^\/*@null@*\/ SYMBOL *scanprefixfromnodestree(Suffixtree *stree,Location *loc,$/;"	f
scanprefixfromnodestree	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^SYMBOL *scanprefixfromnodestree(Suffixtree *stree,Location *loc,$/;"	f
scanprefixstree	MUMmer/src/kurtz/streesrc/scanpref.c	/^\/*@null@*\/ SYMBOL *scanprefixstree(Suffixtree *stree,Location *outloc,$/;"	f
scanprefixstree	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^SYMBOL *scanprefixstree(Suffixtree *stree,Location *outloc,$/;"	f
score	MUMmer/src/tigr/delta.cc	/^  long score;$/;"	m	struct:LIS_t	file:
score	MUMmer/src/tigr/show-coords.cc	/^  long int score, wscore;$/;"	m	struct:LASstats	file:
scoreEdit	MUMmer/src/tigr/sw_align.cc	/^static inline void scoreEdit$/;"	f	file:
scoreMatch	MUMmer/src/tigr/sw_align.cc	/^static inline long int scoreMatch$/;"	f	file:
search	sparseSA.cpp	/^bool sparseSA::search(string &P, long &start, long &end) {$/;"	f	class:sparseSA
secondtime	MUMmer/src/kurtz/streesrc/streetyp.h	/^  BOOL secondtime;$/;"	m	struct:__anon12
select	vector/special/complexvec.h	/^static inline Complex2d select (bool s, Complex2d const & a, Complex2d const & b) {$/;"	f
select	vector/special/complexvec.h	/^static inline Complex2f select (bool s, Complex2f const & a, Complex2f const & b) {$/;"	f
select	vector/special/complexvec.h	/^static inline Complex4d select (Vec4db const & s, Complex4d const & a, Complex4d const & b) {$/;"	f
select	vector/special/complexvec.h	/^static inline Complex4f select (Vec2db const & s, Complex4f const & a, Complex4f const & b) {$/;"	f
select	vector/special/complexvec.h	/^static inline Complex8f select (Vec4db const & s, Complex8f const & a, Complex8f const & b) {$/;"	f
select	vector/special/quaternion.h	/^static inline Quaternion4d select (bool s, Quaternion4d const & a, Quaternion4d const & b) {$/;"	f
select	vector/special/quaternion.h	/^static inline Quaternion4f select (bool s, Quaternion4f const & a, Quaternion4f const & b) {$/;"	f
select	vector/special/vector3d.h	/^static inline Vec3d select (bool s, Vec3d const & a, Vec3d const & b) {$/;"	f
select	vector/special/vector3d.h	/^static inline Vec3f select (bool s, Vec3f const & a, Vec3f const & b) {$/;"	f
select	vector/vectorf128.h	/^static inline Vec2d select (Vec2db const & s, Vec2d const & a, Vec2d const & b) {$/;"	f
select	vector/vectorf128.h	/^static inline Vec4f select (Vec4fb const & s, Vec4f const & a, Vec4f const & b) {$/;"	f
select	vector/vectorf256.h	/^static inline Vec4d select (Vec4db const & s, Vec4d const & a, Vec4d const & b) {$/;"	f
select	vector/vectorf256.h	/^static inline Vec8f select (Vec8fb const & s, Vec8f const & a, Vec8f const & b) {$/;"	f
select	vector/vectorf256e.h	/^static inline Vec4d select (Vec4db const & s, Vec4d const & a, Vec4d const & b) {$/;"	f
select	vector/vectorf256e.h	/^static inline Vec8f select (Vec8fb const & s, Vec8f const & a, Vec8f const & b) {$/;"	f
select	vector/vectori128.h	/^static inline Vec16c select (Vec16c const & s, Vec16c const & a, Vec16c const & b) {$/;"	f
select	vector/vectori128.h	/^static inline Vec16uc select (Vec16c const & s, Vec16uc const & a, Vec16uc const & b) {$/;"	f
select	vector/vectori128.h	/^static inline Vec2q select (Vec2q const & s, Vec2q const & a, Vec2q const & b) {$/;"	f
select	vector/vectori128.h	/^static inline Vec2uq select (Vec2q const & s, Vec2uq const & a, Vec2uq const & b) {$/;"	f
select	vector/vectori128.h	/^static inline Vec4i select (Vec4i const & s, Vec4i const & a, Vec4i const & b) {$/;"	f
select	vector/vectori128.h	/^static inline Vec4ui select (Vec4i const & s, Vec4ui const & a, Vec4ui const & b) {$/;"	f
select	vector/vectori128.h	/^static inline Vec8s select (Vec8s const & s, Vec8s const & a, Vec8s const & b) {$/;"	f
select	vector/vectori128.h	/^static inline Vec8us select (Vec8s const & s, Vec8us const & a, Vec8us const & b) {$/;"	f
select	vector/vectori256.h	/^static inline Vec16s select (Vec16s const & s, Vec16s const & a, Vec16s const & b) {$/;"	f
select	vector/vectori256.h	/^static inline Vec16us select (Vec16s const & s, Vec16us const & a, Vec16us const & b) {$/;"	f
select	vector/vectori256.h	/^static inline Vec32c select (Vec32c const & s, Vec32c const & a, Vec32c const & b) {$/;"	f
select	vector/vectori256.h	/^static inline Vec32uc select (Vec32c const & s, Vec32uc const & a, Vec32uc const & b) {$/;"	f
select	vector/vectori256.h	/^static inline Vec4q select (Vec4q const & s, Vec4q const & a, Vec4q const & b) {$/;"	f
select	vector/vectori256.h	/^static inline Vec4q select (Vec4q const & s, Vec4uq const & a, Vec4uq const & b) {$/;"	f
select	vector/vectori256.h	/^static inline Vec8i select (Vec8i const & s, Vec8i const & a, Vec8i const & b) {$/;"	f
select	vector/vectori256.h	/^static inline Vec8ui select (Vec8i const & s, Vec8ui const & a, Vec8ui const & b) {$/;"	f
select	vector/vectori256e.h	/^static inline Vec16s select (Vec16s const & s, Vec16s const & a, Vec16s const & b) {$/;"	f
select	vector/vectori256e.h	/^static inline Vec16us select (Vec16s const & s, Vec16us const & a, Vec16us const & b) {$/;"	f
select	vector/vectori256e.h	/^static inline Vec32c select (Vec32c const & s, Vec32c const & a, Vec32c const & b) {$/;"	f
select	vector/vectori256e.h	/^static inline Vec32uc select (Vec32c const & s, Vec32uc const & a, Vec32uc const & b) {$/;"	f
select	vector/vectori256e.h	/^static inline Vec4q select (Vec4q const & s, Vec4q const & a, Vec4q const & b) {$/;"	f
select	vector/vectori256e.h	/^static inline Vec4q select (Vec4q const & s, Vec4uq const & a, Vec4uq const & b) {$/;"	f
select	vector/vectori256e.h	/^static inline Vec8i select (Vec8i const & s, Vec8i const & a, Vec8i const & b) {$/;"	f
select	vector/vectori256e.h	/^static inline Vec8ui select (Vec8i const & s, Vec8ui const & a, Vec8ui const & b) {$/;"	f
select4	vector/vectorf256e.h	/^static inline Vec2d select4(Vec4d const & a, Vec4d const & b) {$/;"	f
select4	vector/vectorf256e.h	/^static inline Vec4f select4(Vec8f const & a, Vec8f const & b) {$/;"	f
select4	vector/vectori256e.h	/^static inline Vec16c select4(Vec32c const & a, Vec32c const & b) {$/;"	f
select4	vector/vectori256e.h	/^static inline Vec2q select4(Vec4q const & a, Vec4q const & b) {$/;"	f
select4	vector/vectori256e.h	/^static inline Vec4i select4(Vec8i const & a, Vec8i const & b) {$/;"	f
select4	vector/vectori256e.h	/^static inline Vec8s select4(Vec16s const & a, Vec16s const & b) {$/;"	f
select_sort_split	qsufsort.c	/^static void select_sort_split(int *p, int n) {$/;"	f	file:
selectb	vector/vectori128.h	/^static inline __m128i selectb (__m128i const & s, __m128i const & a, __m128i const & b) {$/;"	f
selectb	vector/vectori256.h	/^static inline __m256i selectb (__m256i const & s, __m256i const & a, __m256i const & b) {$/;"	f
selectb	vector/vectori256e.h	/^static inline Vec256ie selectb (Vec256ie const & s, Vec256ie const & a, Vec256ie const & b) {$/;"	f
selectd	vector/vectorf128.h	/^static inline __m128d selectd (__m128d const & s, __m128d const & a, __m128d const & b) {$/;"	f
selectd	vector/vectorf256.h	/^static inline __m256d selectd (__m256d const & s, __m256d const & a, __m256d const & b) {$/;"	f
selectd	vector/vectorf256e.h	/^static inline Vec256de selectd (Vec256de const & s, Vec256de const & a, Vec256de const & b) {$/;"	f
selectf	vector/vectorf128.h	/^static inline __m128 selectf (__m128 const & s, __m128 const & a, __m128 const & b) {$/;"	f
selectf	vector/vectorf256.h	/^static inline __m256 selectf (__m256 const & s, __m256 const & a, __m256 const & b) {$/;"	f
selectf	vector/vectorf256e.h	/^static inline Vec256fe selectf (Vec256fe const & s, Vec256fe const & a, Vec256fe const & b) {$/;"	f
sentinel	MUMmer/src/kurtz/streesrc/streetyp.h	/^         *sentinel;           \/\/ points to the position of the \\(\\$\\)-symbol$/;"	m	struct:Suffixtreetype
seq	MUMmer/src/tigr/delta.hh	/^  char * seq;                         \/\/!< the DNA sequence$/;"	m	struct:DeltaNode_t
seq	MUMmer/src/tigr/postnuc.cc	/^  char * seq;                \/\/ the sequence data$/;"	m	struct:FastaRecord	file:
seq	MUMmer/src/tigr/postpro.cc	/^  char * seq;                \/\/ the sequence data$/;"	m	struct:FastaRecord	file:
seq	genDNA.py	/^seq = []$/;"	v
seqlength	MUMmer/src/kurtz/libbasedir/multidef.h	/^       seqlength,    \/\/ the length of the sequence$/;"	m	struct:__anon23
seqnum	MUMmer/src/kurtz/libbasedir/multidef.h	/^  Uint seqnum,       \/\/ the sequence number in multiseq$/;"	m	struct:__anon23
seqstartpos	MUMmer/src/kurtz/libbasedir/multidef.h	/^       seqstartpos,  \/\/ the position of the first character in multiseq.sequence$/;"	m	struct:__anon23
sequence	MUMmer/src/kurtz/libbasedir/multidef.h	/^  Uchar *sequence,                     \/\/ the concatenated sequences$/;"	m	struct:__anon21
set	sparseSA.hpp	/^  void set(size_t idx, int v) {$/;"	f	struct:vec_uchar
set	vector/vectori128.h	/^    void set(int16_t d) {                                  \/\/ Set or change divisor, calculate parameters$/;"	f	class:Divisor_s
set	vector/vectori128.h	/^    void set(int32_t d) {                                  \/\/ Set or change divisor, calculate parameters$/;"	f	class:Divisor_i
set	vector/vectori128.h	/^    void set(uint16_t d) {                                 \/\/ Set or change divisor, calculate parameters$/;"	f	class:Divisor_us
set	vector/vectori128.h	/^    void set(uint32_t d) {                                 \/\/ Set or change divisor, calculate parameters$/;"	f	class:Divisor_ui
setBanding	MUMmer/src/tigr/sw_align.hh	/^inline void setBanding(const int Banding)$/;"	f
setBoth	mummer.cpp	/^bool setBoth = false;$/;"	v
setBreakLen	MUMmer/src/tigr/sw_align.hh	/^inline void setBreakLen$/;"	f
setDebugLevel	MUMmer/scripts/Foundation.pm	/^   sub setDebugLevel($;$) {$/;"	s
setHelpInfo	MUMmer/scripts/Foundation.pm	/^   sub setHelpInfo($) {$/;"	s
setLogFile	MUMmer/scripts/Foundation.pm	/^   sub setLogFile($;$) {$/;"	s
setMatrixType	MUMmer/src/tigr/sw_align.hh	/^inline void setMatrixType$/;"	f
setRevComp	mummer.cpp	/^bool setRevComp = false;$/;"	v
setUsageInfo	MUMmer/scripts/Foundation.pm	/^   sub setUsageInfo($) {$/;"	s
setVersionInfo	MUMmer/scripts/Foundation.pm	/^   sub setVersionInfo($) {$/;"	s
set_bit	vector/vectori128.h	/^    Vec128b const & set_bit(uint32_t index, int value) {$/;"	f	class:Vec128b
set_bit	vector/vectori256.h	/^    Vec256b const & set_bit(uint32_t index, int value) {$/;"	f	class:Vec256b
set_bit	vector/vectori256e.h	/^    Vec256b const & set_bit(uint32_t index, int value) {$/;"	f	class:Vec256b
set_control_word	vector/vectorf128.h	/^static inline void set_control_word(uint32_t w) {$/;"	f
set_m128ir	vector/vectori256.h	63;"	d
set_m128r	vector/vectorf256.h	95;"	d
set_output_fname	MUMmer/mapview	/^sub set_output_fname{$/;"	s
set_output_fname	MUMmer/scripts/mapview.pl	/^sub set_output_fname{$/;"	s
setatnewleaf	MUMmer/src/kurtz/streesrc/streetyp.h	/^  BOOL setatnewleaf;          \/\/ nil-reference is stored in new leaf$/;"	m	struct:Suffixtreetype
setdebuglevel	MUMmer/src/kurtz/libbasedir/debug.c	/^void setdebuglevel(void)$/;"	f
setdebuglevelfilename	MUMmer/src/kurtz/libbasedir/debug.c	/^void setdebuglevelfilename(char *filename)$/;"	f
setdepthheadposition	MUMmer/src/kurtz/streesrc/construct.c	/^static void setdepthheadposition(Suffixtree *stree,Uint depth,$/;"	f	file:
setdepthtab	MUMmer/src/kurtz/streesrc/depthtab.c	/^static void setdepthtab(ArrayUint *depthtab,Uint depth)$/;"	f	file:
seterror	MUMmer/src/kurtz/libbasedir/seterror.c	/^void seterror(Sint code)$/;"	f
setlink	MUMmer/src/kurtz/streesrc/streetyp.h	/^       *setlink,              \/\/ address of a nil-reference$/;"	m	struct:Suffixtreetype
setmaxspace	MUMmer/src/kurtz/libbasedir/space.c	/^static void setmaxspace(void)$/;"	f	file:
setsuffixlink	MUMmer/src/kurtz/streesrc/construct.c	/^static void setsuffixlink(Suffixtree *stree,Uint slink)$/;"	f	file:
shift1	vector/vectori128.h	/^    __m128i shift1;                                        \/\/ shift count 1 used in fast division$/;"	m	class:Divisor_ui
shift1	vector/vectori128.h	/^    __m128i shift1;                                        \/\/ shift count 1 used in fast division$/;"	m	class:Divisor_us
shift1	vector/vectori128.h	/^    __m128i shift1;                                        \/\/ shift count used in fast division$/;"	m	class:Divisor_i
shift1	vector/vectori128.h	/^    __m128i shift1;                                        \/\/ shift count used in fast division$/;"	m	class:Divisor_s
shift2	vector/vectori128.h	/^    __m128i shift2;                                        \/\/ shift count 2 used in fast division$/;"	m	class:Divisor_ui
shift2	vector/vectori128.h	/^    __m128i shift2;                                        \/\/ shift count 2 used in fast division$/;"	m	class:Divisor_us
shift_bytes_down	vector/vectori128.h	/^static inline Vec16c shift_bytes_down(Vec16c const & a, int b) {$/;"	f
shift_bytes_down	vector/vectori256.h	/^static inline Vec32c shift_bytes_down(Vec32c const & a, int b) {$/;"	f
shift_bytes_down	vector/vectori256e.h	/^static inline Vec32c shift_bytes_down(Vec32c const & a, int b) {$/;"	f
shift_bytes_up	vector/vectori128.h	/^static inline Vec16c shift_bytes_up(Vec16c const & a, int b) {$/;"	f
shift_bytes_up	vector/vectori256.h	/^static inline Vec32c shift_bytes_up(Vec32c const & a, int b) {$/;"	f
shift_bytes_up	vector/vectori256e.h	/^static inline Vec32c shift_bytes_up(Vec32c const & a, int b) {$/;"	f
showalignspromer	MUMmer/docs/web/examples/index.html	/^<h4><a name="showalignspromer" id="showalignspromer"><\/a>2.4.3. Running show-aligns<\/h4>$/;"	a
showcoordsnucmer	MUMmer/docs/web/examples/index.html	/^<h4><a name="showcoordsnucmer"><\/a>2.3.2. Running show-coords<\/h4>$/;"	a
showcoordspromer	MUMmer/docs/web/examples/index.html	/^<h4><a name="showcoordspromer" id="showcoordspromer"><\/a>2.4.2. Running show-coords<\/h4>$/;"	a
showdepthtab	MUMmer/src/kurtz/streesrc/depthtab.c	/^void showdepthtab(ArrayUint *dt)$/;"	f
showexclude	MUMmer/src/kurtz/libbasedir/procopt.c	/^void showexclude(OptionDescription *opt,Sint *excludetab,Uint len)$/;"	f
showgreedymatchresult	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^static void showgreedymatchresult(Maxmatchinfo *maxmatchinfo,$/;"	f	file:
showlocation	MUMmer/src/kurtz/streesrc/streedbg.c	/^void showlocation(FILE *fp,Suffixtree *stree,Location *loc)$/;"	f
showmaximalmatch	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^static Sint showmaximalmatch (void *info,$/;"	f	file:
showmaxmatflags	MUMmer/src/kurtz/mm3src/maxmat3.c	/^static void showmaxmatflags (char *program,$/;"	f	file:
showmemsize	MUMmer/src/kurtz/libbasedir/space.c	/^void showmemsize(void)$/;"	f
showoptdesc	MUMmer/src/kurtz/libbasedir/procopt.c	/^static void showoptdesc(FILE *fp,Uint indentlevel,char *desc)$/;"	f	file:
showoptions	MUMmer/src/kurtz/libbasedir/procopt.c	/^void showoptions(FILE *outfp,char *program,OptionDescription *opt,$/;"	f
showoptionswithoutexclude	MUMmer/src/kurtz/libbasedir/procopt.c	/^void showoptionswithoutexclude(FILE *outfp,char *program,$/;"	f
showpathstree	MUMmer/src/kurtz/streesrc/access.c	/^void showpathstree(Suffixtree *stree,Bref bnode,$/;"	f
showpathstree	MUMmer/src/kurtz/streesrc/streefiledoc.c	/^void showpathstree(Suffixtree *stree,Bref bnode,$/;"	f
showreversepositions	MUMmer/src/kurtz/mm3src/maxmatdef.h	/^       showreversepositions,    \/\/ give reverse pos. rel. to orig. string$/;"	m	struct:__anon4
showreversepositions	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^       showreversepositions,   \/\/ is option \\texttt{-c} on?$/;"	m	struct:__anon3	file:
showseqandmaximalmatch	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^static Sint showseqandmaximalmatch (void *info,$/;"	f	file:
showsequencedescription	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^static void showsequencedescription(Multiseq *multiseq, Uint maxdesclength,$/;"	f	file:
showsequenceheader	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^static void showsequenceheader(Multiseq *multiseq,$/;"	f	file:
showsequencelengths	MUMmer/src/kurtz/mm3src/maxmatdef.h	/^       showsequencelengths,     \/\/ show length of sequences on header line$/;"	m	struct:__anon4
showsequencelengths	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^       showsequencelengths,    \/\/ is option \\texttt{-L} on?$/;"	m	struct:__anon3	file:
showsimplelocliststree	MUMmer/src/kurtz/streesrc/access.c	/^void showsimplelocliststree(Suffixtree *stree,ArraySimpleloc *ll)$/;"	f
showsimplelocstree	MUMmer/src/kurtz/streesrc/access.c	/^void showsimplelocstree(Suffixtree *stree,Simpleloc *loc)$/;"	f
showsnpsnucmer	MUMmer/docs/web/examples/index.html	/^<h4><a name="showsnpsnucmer" id="showsnpsnucmer"><\/a>2.3.4. Running show-snps<\/h4>$/;"	a
showspace	MUMmer/src/kurtz/libbasedir/space.c	/^void showspace(void)$/;"	f
showstate	MUMmer/src/kurtz/streesrc/streedbg.c	/^void showstate(Suffixtree *stree)$/;"	f
showstree	MUMmer/src/kurtz/streesrc/streedbg.c	/^void showstree(Suffixtree *stree)$/;"	f
showstring	MUMmer/src/kurtz/mm3src/maxmatdef.h	/^  BOOL showstring,              \/\/ show the matching string$/;"	m	struct:__anon4
showstring	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^  BOOL showstring,             \/\/ is option \\texttt{-s} on?$/;"	m	struct:__anon3	file:
showsubtree	MUMmer/src/kurtz/streesrc/streedbg.c	/^static void showsubtree(Suffixtree *stree,Uint indent,Uint *btptr)$/;"	f	file:
showsymbol	MUMmer/src/kurtz/streesrc/streedbg.c	/^static char *showsymbol(SYMBOL c)$/;"	f	file:
showsymbolstree	MUMmer/src/kurtz/streesrc/streetyp.h	/^  char * (*showsymbolstree)(SYMBOL,Uchar *);$/;"	m	struct:Suffixtreetype
showtable	MUMmer/src/kurtz/streesrc/streedbg.c	/^void showtable(Suffixtree *stree,BOOL final)$/;"	f
showthesymbolstring	MUMmer/src/kurtz/streesrc/streedbg.c	/^static void showthesymbolstring(FILE *fp,SYMBOL *tlast,SYMBOL *left,$/;"	f	file:
showtilingnucmer	MUMmer/docs/web/examples/index.html	/^<h4><a name="showtilingnucmer"><\/a>2.3.5. Running show-tiling<\/h4>$/;"	a
showusage	MUMmer/src/kurtz/mm3src/maxmatopt.c	/^static void showusage(char *program,OptionDescription *options,$/;"	f	file:
showvalues	MUMmer/src/kurtz/streesrc/construct.c	/^static void showvalues(void)$/;"	f	file:
sign	vector/vectori128.h	/^    __m128i sign;                                          \/\/ sign of divisor$/;"	m	class:Divisor_i
sign	vector/vectori128.h	/^    __m128i sign;                                          \/\/ sign of divisor$/;"	m	class:Divisor_s
sign_bit	vector/vectorf128.h	/^static inline Vec2db sign_bit(Vec2d const & a) {$/;"	f
sign_bit	vector/vectorf128.h	/^static inline Vec4fb sign_bit(Vec4f const & a) {$/;"	f
sign_bit	vector/vectorf256.h	/^static inline Vec4db sign_bit(Vec4d const & a) {$/;"	f
sign_bit	vector/vectorf256.h	/^static inline Vec8fb sign_bit(Vec8f const & a) {$/;"	f
sign_bit	vector/vectorf256e.h	/^static inline Vec4db sign_bit(Vec4d const & a) {$/;"	f
sign_bit	vector/vectorf256e.h	/^static inline Vec8fb sign_bit(Vec8f const & a) {$/;"	f
sim	MUMmer/src/tigr/delta.hh	/^  float idy, sim, stp;        \/\/!< percent identity [0 - 1]$/;"	m	struct:DeltaEdgelet_t
sim	MUMmer/src/tigr/delta.hh	/^  float sim;               \/\/!< percent similarity [0 - 100]$/;"	m	struct:DeltaAlignment_t
simc	MUMmer/src/tigr/delta.hh	/^  long idyc, simc, stpc;      \/\/!< idy, sim, stp counts$/;"	m	struct:DeltaEdgelet_t
simc	MUMmer/src/tigr/delta.hh	/^  long simc;  \/\/!< number of similarity scores < 1 in the alignment$/;"	m	struct:DeltaAlignment_t
simplefileOpen	MUMmer/src/kurtz/libbasedir/mapfile.c	/^Sint simplefileOpen(char *filename,Uint *numofbytes)$/;"	f
simplifyAlignments	MUMmer/src/tigr/show-coords.cc	/^void simplifyAlignments$/;"	f
sin	vector/special/vectormath.h	/^static inline Vec2d sin (Vec2d const & x) {   \/\/ sine$/;"	f
sin	vector/special/vectormath.h	/^static inline Vec2d sin (Vec2d const & x) {$/;"	f
sin	vector/special/vectormath.h	/^static inline Vec4d sin (Vec4d const & x) {   \/\/ sine$/;"	f
sin	vector/special/vectormath.h	/^static inline Vec4f sin (Vec4f const & x) {   \/\/ sine$/;"	f
sin	vector/special/vectormath.h	/^static inline Vec4f sin(Vec4f const & x) {$/;"	f
sin	vector/special/vectormath.h	/^static inline Vec8f sin (Vec8f const & x) {   \/\/ sine$/;"	f
sincos	vector/special/vectormath.h	/^static inline Vec2d sincos (Vec2d * pcos, Vec2d const & x) {   \/\/ sine and cosine. sin(x) returned, cos(x) in pcos$/;"	f
sincos	vector/special/vectormath.h	/^static inline Vec4d sincos (Vec4d * pcos, Vec4d const & x) {   \/\/ sine and cosine. sin(x) returned, cos(x) in pcos$/;"	f
sincos	vector/special/vectormath.h	/^static inline Vec4f sincos (Vec4f * pcos, Vec4f const & x) {   \/\/ sine and cosine. sin(x) returned, cos(x) in pcos$/;"	f
sincos	vector/special/vectormath.h	/^static inline Vec8f sincos (Vec8f * pcos, Vec8f const & x) {   \/\/ sine and cosine. sin(x) returned, cos(x) in pcos$/;"	f
sinh	vector/special/vectormath.h	/^static inline Vec2d sinh (Vec2d const & x) {   \/\/ hyperbolic sine$/;"	f
sinh	vector/special/vectormath.h	/^static inline Vec2d sinh (Vec2d const & x) {$/;"	f
sinh	vector/special/vectormath.h	/^static inline Vec4d sinh (Vec4d const & x) {   \/\/ hyperbolic sine$/;"	f
sinh	vector/special/vectormath.h	/^static inline Vec4f sinh (Vec4f const & x) {   \/\/ hyperbolic sine$/;"	f
sinh	vector/special/vectormath.h	/^static inline Vec4f sinh(Vec4f const & x) {   \/\/ hyperbolic sine$/;"	f
sinh	vector/special/vectormath.h	/^static inline Vec8f sinh (Vec8f const & x) {   \/\/ hyperbolic sine$/;"	f
size	sparseSA.hpp	/^  long size() { return end - start + 1; }$/;"	f	struct:interval_t
sizeofcells	MUMmer/src/kurtz/libbasedir/space.c	/^  Uint sizeofcells,    \/\/ size of cells of the block$/;"	m	struct:__anon24	file:
skip	mummer.cpp	/^  int skip;$/;"	m	struct:query_arg	file:
skip0	mummer.cpp	/^  int skip0;$/;"	m	struct:query_arg	file:
skipprefix	MUMmer/src/kurtz/libbasedir/multidef.h	/^  Uint skipprefix,       \/\/ always skip this number of prefixes$/;"	m	struct:__anon22
slope	MUMmer/src/tigr/delta.hh	/^  int slope() const$/;"	f	struct:DeltaEdgelet_t
smallnode	MUMmer/src/kurtz/streesrc/streetyp.h	/^       smallnode,             \/\/ number of small nodes$/;"	m	struct:Suffixtreetype
smallnotcompleted	MUMmer/src/kurtz/streesrc/streetyp.h	/^       smallnotcompleted,     \/\/ the number of small nodes in the current chain$/;"	m	struct:Suffixtreetype
snan2d	vector/vectorf128.h	/^static inline Vec2d snan2d() {$/;"	f
snan4d	vector/vectorf256.h	/^static inline Vec4d snan4d() {$/;"	f
snan4d	vector/vectorf256e.h	/^static inline Vec4d snan4d() {$/;"	f
snan4f	vector/vectorf128.h	/^static inline Vec4f snan4f() {$/;"	f
snan8f	vector/vectorf256.h	/^static inline Vec8f snan8f() {$/;"	f
snan8f	vector/vectorf256e.h	/^static inline Vec8f snan8f() {$/;"	f
snpdetection	MUMmer/docs/web/manual/index.html	/^<h3><a name="snpdetection" id="snpdetection"><\/a>4.4. SNP detection<\/h3>$/;"	a
snps	MUMmer/docs/web/manual/index.html	/^<h4><a name="snps" id="snps"><\/a>5.4.6. show-snps<\/h4>$/;"	a
snps	MUMmer/src/tigr/delta.hh	/^  std::vector<SNP_t *> snps;  \/\/!< snps for this edgelet$/;"	m	struct:DeltaEdgelet_t
sortMUMcandidates	MUMmer/src/kurtz/libbasedir/cleanMUMcand.c	/^static void sortMUMcandidates(ArrayMUMcandidate *mumcand)$/;"	f	file:
sort_split	qsufsort.c	/^static void sort_split(int *p, int n)$/;"	f	file:
spaceStrings	MUMmer/src/kurtz/libbasedir/arraydef.h	/^  Stringtype *spaceStrings;$/;"	m	struct:__anon20
spaceforbranchtab	MUMmer/src/kurtz/streesrc/construct.c	/^static void spaceforbranchtab(Suffixtree *stree)$/;"	f	file:
spacepeak	MUMmer/src/kurtz/libbasedir/mapfile.c	/^            spacepeak = 0,                 \/\/ maximally mapped num of bytes$/;"	v	file:
spacepeak	MUMmer/src/kurtz/libbasedir/space.c	/^            spacepeak = 0;      \/\/ maximally allocated num of bytes$/;"	v	file:
spaceptr	MUMmer/src/kurtz/libbasedir/space.c	/^  void *spaceptr;      \/\/ ptr to the spaceblock$/;"	m	struct:__anon24	file:
sparseMult	mummer.cpp	/^int sparseMult=1;$/;"	v
sparseMult	sparseSA.hpp	/^  int sparseMult;$/;"	m	struct:sparseSA
sparseSA	sparseSA.cpp	/^sparseSA::sparseSA(string &S_, vector<string> &descr_, vector<long> &startpos_, bool __4column, long K_, bool suflink_, bool child_, int sparseMult_, bool printSubstring_) : $/;"	f	class:sparseSA
sparseSA	sparseSA.hpp	/^struct sparseSA {$/;"	s
splitinternaledge	MUMmer/src/kurtz/streesrc/streetyp.h	/^       splitinternaledge,$/;"	m	struct:Suffixtreetype
splitleafedge	MUMmer/src/kurtz/streesrc/streetyp.h	/^  Uint splitleafedge,$/;"	m	struct:Suffixtreetype
sqrt	vector/special/complexvec.h	/^static inline Complex2d sqrt(Complex2d const & a) {$/;"	f
sqrt	vector/special/complexvec.h	/^static inline Complex2f sqrt(Complex2f const & a) {$/;"	f
sqrt	vector/special/complexvec.h	/^static inline Complex4d sqrt(Complex4d const & a) {$/;"	f
sqrt	vector/special/complexvec.h	/^static inline Complex4f sqrt(Complex4f const & a) {$/;"	f
sqrt	vector/special/complexvec.h	/^static inline Complex8f sqrt(Complex8f const & a) {$/;"	f
sqrt	vector/vectorf128.h	/^static inline Vec2d sqrt(Vec2d const & a) {$/;"	f
sqrt	vector/vectorf128.h	/^static inline Vec4f sqrt(Vec4f const & a) {$/;"	f
sqrt	vector/vectorf256.h	/^static inline Vec4d sqrt(Vec4d const & a) {$/;"	f
sqrt	vector/vectorf256.h	/^static inline Vec8f sqrt(Vec8f const & a) {$/;"	f
sqrt	vector/vectorf256e.h	/^static inline Vec4d sqrt(Vec4d const & a) {$/;"	f
sqrt	vector/vectorf256e.h	/^static inline Vec8f sqrt(Vec8f const & a) {$/;"	f
square	vector/vectorf128.h	/^static inline Vec2d square(Vec2d const & a) {$/;"	f
square	vector/vectorf128.h	/^static inline Vec4f square(Vec4f const & a) {$/;"	f
square	vector/vectorf256.h	/^static inline Vec4d square(Vec4d const & a) {$/;"	f
square	vector/vectorf256.h	/^static inline Vec8f square(Vec8f const & a) {$/;"	f
square	vector/vectorf256e.h	/^static inline Vec4d square(Vec4d const & a) {$/;"	f
square	vector/vectorf256e.h	/^static inline Vec8f square(Vec8f const & a) {$/;"	f
stack	MUMmer/src/kurtz/streesrc/streetyp.h	/^  ArrayBref stack;$/;"	m	struct:__anon12
start	MUMmer/src/kurtz/libbasedir/types.h	/^  Uint start, length;$/;"	m	struct:__anon16
start	sparseSA.hpp	/^  long depth, start, end;$/;"	m	struct:interval_t
startclock	MUMmer/src/kurtz/libbasedir/clock.c	/^static clock_t startclock, $/;"	v	file:
startdesc	MUMmer/src/kurtz/libbasedir/multidef.h	/^  Uint *startdesc,                     \/\/ of length numofsequences + 1$/;"	m	struct:__anon21
startpos	sparseSA.hpp	/^  vector<long> &startpos; \/\/ Lengths of concatenated sequences.$/;"	m	struct:sparseSA
stopclock	MUMmer/src/kurtz/libbasedir/clock.c	/^               stopclock;$/;"	v	file:
store	vector/special/complexvec.h	/^    void store(double * p) const {$/;"	f	class:Complex2d
store	vector/special/complexvec.h	/^    void store(double * p) const {$/;"	f	class:Complex4d
store	vector/special/complexvec.h	/^    void store(float * p) const {$/;"	f	class:Complex2f
store	vector/special/complexvec.h	/^    void store(float * p) const {$/;"	f	class:Complex4f
store	vector/special/complexvec.h	/^    void store(float * p) const {$/;"	f	class:Complex8f
store	vector/special/quaternion.h	/^    void store(double * p) const {$/;"	f	class:Quaternion4d
store	vector/special/quaternion.h	/^    void store(float * p) const {$/;"	f	class:Quaternion4f
store	vector/special/vector3d.h	/^    void store(double * p) const {$/;"	f	class:Vec3d
store	vector/special/vector3d.h	/^    void store(float * p) const {$/;"	f	class:Vec3f
store	vector/vectorf128.h	/^    void store(double * p) const {$/;"	f	class:Vec2d
store	vector/vectorf128.h	/^    void store(float * p) const {$/;"	f	class:Vec4f
store	vector/vectorf256.h	/^    void store(double * p) const {$/;"	f	class:Vec4d
store	vector/vectorf256.h	/^    void store(float * p) const {$/;"	f	class:Vec8f
store	vector/vectorf256e.h	/^    void store(double * p) const {$/;"	f	class:Vec4d
store	vector/vectorf256e.h	/^    void store(float * p) const {$/;"	f	class:Vec8f
store	vector/vectori128.h	/^    void store(void * p) const {$/;"	f	class:Vec128b
store	vector/vectori256.h	/^    void store(void * p) const {$/;"	f	class:Vec256b
store	vector/vectori256e.h	/^    void store(void * p) const {$/;"	f	class:Vec256b
storeMUMcandidate	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^static Sint storeMUMcandidate (void *info,$/;"	f	file:
store_a	vector/special/complexvec.h	/^    void store_a(double * p) const {$/;"	f	class:Complex2d
store_a	vector/special/complexvec.h	/^    void store_a(double * p) const {$/;"	f	class:Complex4d
store_a	vector/special/complexvec.h	/^    void store_a(float * p) const {$/;"	f	class:Complex2f
store_a	vector/special/complexvec.h	/^    void store_a(float * p) const {$/;"	f	class:Complex4f
store_a	vector/special/complexvec.h	/^    void store_a(float * p) const {$/;"	f	class:Complex8f
store_a	vector/special/quaternion.h	/^    void store_a(double * p) const {$/;"	f	class:Quaternion4d
store_a	vector/special/quaternion.h	/^    void store_a(float * p) const {$/;"	f	class:Quaternion4f
store_a	vector/special/vector3d.h	/^    void store_a(double * p) const {$/;"	f	class:Vec3d
store_a	vector/special/vector3d.h	/^    void store_a(float * p) const {$/;"	f	class:Vec3f
store_a	vector/vectorf128.h	/^    void store_a(double * p) const {$/;"	f	class:Vec2d
store_a	vector/vectorf128.h	/^    void store_a(float * p) const {$/;"	f	class:Vec4f
store_a	vector/vectorf256.h	/^    void store_a(double * p) const {$/;"	f	class:Vec4d
store_a	vector/vectorf256.h	/^    void store_a(float * p) const {$/;"	f	class:Vec8f
store_a	vector/vectorf256e.h	/^    void store_a(double * p) const {$/;"	f	class:Vec4d
store_a	vector/vectorf256e.h	/^    void store_a(float * p) const {$/;"	f	class:Vec8f
store_a	vector/vectori128.h	/^    void store_a(void * p) const {$/;"	f	class:Vec128b
store_a	vector/vectori256.h	/^    void store_a(void * p) const {$/;"	f	class:Vec256b
store_a	vector/vectori256e.h	/^    void store_a(void * p) const {$/;"	f	class:Vec256b
store_partial	vector/vectorf128.h	/^    void store_partial(int n, double * p) const {$/;"	f	class:Vec2d
store_partial	vector/vectorf128.h	/^    void store_partial(int n, float * p) const {$/;"	f	class:Vec4f
store_partial	vector/vectorf256.h	/^    void store_partial(int n, double * p) const {$/;"	f	class:Vec4d
store_partial	vector/vectorf256.h	/^    void store_partial(int n, float * p) const {$/;"	f	class:Vec8f
store_partial	vector/vectorf256e.h	/^    void store_partial(int n, double * p) const {$/;"	f	class:Vec4d
store_partial	vector/vectorf256e.h	/^    void store_partial(int n, float * p) const {$/;"	f	class:Vec8f
store_partial	vector/vectori128.h	/^    void store_partial(int n, void * p) const {$/;"	f	class:Vec16c
store_partial	vector/vectori128.h	/^    void store_partial(int n, void * p) const {$/;"	f	class:Vec2q
store_partial	vector/vectori128.h	/^    void store_partial(int n, void * p) const {$/;"	f	class:Vec4i
store_partial	vector/vectori128.h	/^    void store_partial(int n, void * p) const {$/;"	f	class:Vec8s
store_partial	vector/vectori256.h	/^    void store_partial(int n, void * p) const {$/;"	f	class:Vec16s
store_partial	vector/vectori256.h	/^    void store_partial(int n, void * p) const {$/;"	f	class:Vec32c
store_partial	vector/vectori256.h	/^    void store_partial(int n, void * p) const {$/;"	f	class:Vec4q
store_partial	vector/vectori256.h	/^    void store_partial(int n, void * p) const {$/;"	f	class:Vec8i
store_partial	vector/vectori256e.h	/^    void store_partial(int n, void * p) const {$/;"	f	class:Vec16s
store_partial	vector/vectori256e.h	/^    void store_partial(int n, void * p) const {$/;"	f	class:Vec32c
store_partial	vector/vectori256e.h	/^    void store_partial(int n, void * p) const {$/;"	f	class:Vec4q
store_partial	vector/vectori256e.h	/^    void store_partial(int n, void * p) const {$/;"	f	class:Vec8i
stp	MUMmer/src/tigr/delta.hh	/^  float idy, sim, stp;        \/\/!< percent identity [0 - 1]$/;"	m	struct:DeltaEdgelet_t
stp	MUMmer/src/tigr/delta.hh	/^  float stp;               \/\/!< percent stop codon [0 - 100]$/;"	m	struct:DeltaAlignment_t
stpc	MUMmer/src/tigr/delta.hh	/^  long idyc, simc, stpc;      \/\/!< idy, sim, stp counts$/;"	m	struct:DeltaEdgelet_t
stpc	MUMmer/src/tigr/delta.hh	/^  long stpc;  \/\/!< number of stop codons in the alignment$/;"	m	struct:DeltaAlignment_t
stree	MUMmer/src/kurtz/mm3src/findmaxmat.c	/^  Suffixtree *stree;              \/\/ reference to suffix tree of subject-seq$/;"	m	struct:__anon2	file:
stree	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^  Suffixtree stree;            \/\/ the suffix tree of the subject-sequence$/;"	m	struct:__anon3	file:
stree	MUMmer/src/kurtz/streesrc/addleafcount.c	/^  Suffixtree *stree;                      \/\/ suffix tree info$/;"	m	struct:__anon6	file:
stringbuffer	MUMmer/src/kurtz/libbasedir/arraydef.h	/^  Uchar *stringbuffer;$/;"	m	struct:__anon20
stringbufferlength	MUMmer/src/kurtz/libbasedir/arraydef.h	/^  Uint stringbufferlength, nextfreeStrings, allocatedStrings;$/;"	m	struct:__anon20
sub_saturated	vector/vectori128.h	/^static inline Vec16c sub_saturated(Vec16c const & a, Vec16c const & b) {$/;"	f
sub_saturated	vector/vectori128.h	/^static inline Vec16uc sub_saturated(Vec16uc const & a, Vec16uc const & b) {$/;"	f
sub_saturated	vector/vectori128.h	/^static inline Vec4i sub_saturated(Vec4i const & a, Vec4i const & b) {$/;"	f
sub_saturated	vector/vectori128.h	/^static inline Vec4ui sub_saturated(Vec4ui const & a, Vec4ui const & b) {$/;"	f
sub_saturated	vector/vectori128.h	/^static inline Vec8s sub_saturated(Vec8s const & a, Vec8s const & b) {$/;"	f
sub_saturated	vector/vectori128.h	/^static inline Vec8us sub_saturated(Vec8us const & a, Vec8us const & b) {$/;"	f
sub_saturated	vector/vectori256.h	/^static inline Vec16s sub_saturated(Vec16s const & a, Vec16s const & b) {$/;"	f
sub_saturated	vector/vectori256.h	/^static inline Vec16us sub_saturated(Vec16us const & a, Vec16us const & b) {$/;"	f
sub_saturated	vector/vectori256.h	/^static inline Vec32c sub_saturated(Vec32c const & a, Vec32c const & b) {$/;"	f
sub_saturated	vector/vectori256.h	/^static inline Vec32uc sub_saturated(Vec32uc const & a, Vec32uc const & b) {$/;"	f
sub_saturated	vector/vectori256.h	/^static inline Vec8i sub_saturated(Vec8i const & a, Vec8i const & b) {$/;"	f
sub_saturated	vector/vectori256.h	/^static inline Vec8ui sub_saturated(Vec8ui const & a, Vec8ui const & b) {$/;"	f
sub_saturated	vector/vectori256e.h	/^static inline Vec16s sub_saturated(Vec16s const & a, Vec16s const & b) {$/;"	f
sub_saturated	vector/vectori256e.h	/^static inline Vec16us sub_saturated(Vec16us const & a, Vec16us const & b) {$/;"	f
sub_saturated	vector/vectori256e.h	/^static inline Vec32c sub_saturated(Vec32c const & a, Vec32c const & b) {$/;"	f
sub_saturated	vector/vectori256e.h	/^static inline Vec32uc sub_saturated(Vec32uc const & a, Vec32uc const & b) {$/;"	f
sub_saturated	vector/vectori256e.h	/^static inline Vec8i sub_saturated(Vec8i const & a, Vec8i const & b) {$/;"	f
sub_saturated	vector/vectori256e.h	/^static inline Vec8ui sub_saturated(Vec8ui const & a, Vec8ui const & b) {$/;"	f
subjectfile	MUMmer/src/kurtz/mm3src/maxmatdef.h	/^       subjectfile[PATH_MAX+1], \/\/ filename of the subject-sequence$/;"	m	struct:__anon4
subjectmultiseq	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^  Multiseq *subjectmultiseq,   \/\/ reference to multiseq of subject$/;"	m	struct:__anon3	file:
subtractspace	MUMmer/src/kurtz/libbasedir/space.c	/^static void subtractspace(Uint space)$/;"	f	file:
succlocationsstree	MUMmer/src/kurtz/streesrc/access.c	/^void succlocationsstree(Suffixtree *stree,BOOL nosentinel,Simpleloc *loc,$/;"	f
suffixlink	MUMmer/src/kurtz/streesrc/streetyp.h	/^  Bref suffixlink;          \/\/ the suffix link is always to a branching node$/;"	m	struct:__anon8
suffixlink	sparseSA.cpp	/^bool sparseSA::suffixlink(interval_t &m) {$/;"	f	class:sparseSA
suffixsort	qsufsort.c	/^void suffixsort(int *x, int *p, int n, int k, int l)$/;"	f
suflink	mummer.cpp	/^bool suflink = true;$/;"	v
swap	MUMmer/src/tigr/show-coords.cc	/^inline void swap$/;"	f
sys	genDNA.py	/^import sys$/;"	i
taillcp	MUMmer/src/kurtz/streesrc/construct.c	/^static Uint taillcp(Suffixtree *stree,SYMBOL *start1, SYMBOL *end1)$/;"	f	file:
tailptr	MUMmer/src/kurtz/streesrc/streetyp.h	/^         *tailptr;            \/\/ points to the tail$/;"	m	struct:Suffixtreetype
tan	vector/special/vectormath.h	/^static inline Vec2d tan (Vec2d const & x) {   \/\/ tangent$/;"	f
tan	vector/special/vectormath.h	/^static inline Vec2d tan (Vec2d const & x) {$/;"	f
tan	vector/special/vectormath.h	/^static inline Vec4d tan (Vec4d const & x) {   \/\/ tangent$/;"	f
tan	vector/special/vectormath.h	/^static inline Vec4f tan (Vec4f const & x) {   \/\/ tangent$/;"	f
tan	vector/special/vectormath.h	/^static inline Vec4f tan(Vec4f const & x) {$/;"	f
tan	vector/special/vectormath.h	/^static inline Vec8f tan (Vec8f const & x) {   \/\/ tangent$/;"	f
tanh	vector/special/vectormath.h	/^static inline Vec2d tanh (Vec2d const & x) {   \/\/ hyperbolic tangent$/;"	f
tanh	vector/special/vectormath.h	/^static inline Vec2d tanh (Vec2d const & x) {$/;"	f
tanh	vector/special/vectormath.h	/^static inline Vec4d tanh (Vec4d const & x) {   \/\/ hyperbolic tangent$/;"	f
tanh	vector/special/vectormath.h	/^static inline Vec4f tanh (Vec4f const & x) {   \/\/ hyperbolic tangent$/;"	f
tanh	vector/special/vectormath.h	/^static inline Vec4f tanh(Vec4f const & x) {   \/\/ hyperbolic tangent$/;"	f
tanh	vector/special/vectormath.h	/^static inline Vec8f tanh (Vec8f const & x) {   \/\/ hyperbolic tangent$/;"	f
test_formatGFF	MUMmer/mapview	/^sub test_formatGFF{$/;"	s
test_formatGFF	MUMmer/scripts/mapview.pl	/^sub test_formatGFF{$/;"	s
test_overlap	MUMmer/mapview	/^sub test_overlap{$/;"	s
test_overlap	MUMmer/scripts/mapview.pl	/^sub test_overlap{$/;"	s
text	MUMmer/src/kurtz/streesrc/streetyp.h	/^  SYMBOL *text,               \/\/ points to the input string$/;"	m	struct:Suffixtreetype
textlen	MUMmer/src/kurtz/streesrc/streetyp.h	/^  Uint textlen,               \/\/ the length of the input string$/;"	m	struct:Suffixtreetype
textpos	MUMmer/src/kurtz/streesrc/streetyp.h	/^       textpos;  \/\/ these last two items are redundant and can be computed$/;"	m	struct:__anon10
thread_data	sparseSA.cpp	/^struct thread_data {$/;"	s	file:
tileContigs	MUMmer/src/tigr/show-tiling.cc	/^void tileContigs$/;"	f
tiling	MUMmer/docs/web/manual/index.html	/^<h4><a name="tiling"><\/a>5.4.7. show-tiling<\/h4>$/;"	a
tmpleafcount	MUMmer/src/kurtz/streesrc/addleafcount.c	/^static Uint tmpleafcount, repnum = 0;$/;"	v	file:
toFwd	MUMmer/src/tigr/show-aligns.cc	/^long int toFwd$/;"	f
to_double	vector/special/complexvec.h	/^static inline Complex2d to_double (Complex2f const & a) {$/;"	f
to_double	vector/special/complexvec.h	/^static inline Complex4d to_double (Complex4f const & a) {$/;"	f
to_double	vector/special/quaternion.h	/^static inline Quaternion4d to_double (Quaternion4f const & a) {$/;"	f
to_double	vector/special/vector3d.h	/^static inline Vec3d to_double (Vec3f const & a) {$/;"	f
to_double	vector/vectorf128.h	/^static inline Vec2d to_double(Vec2q const & a) {$/;"	f
to_double	vector/vectorf256.h	/^static inline Vec4d to_double(Vec4i const & a) {$/;"	f
to_double	vector/vectorf256.h	/^static inline Vec4d to_double(Vec4q const & a) {$/;"	f
to_double	vector/vectorf256e.h	/^static inline Vec4d to_double(Vec4i const & a) {$/;"	f
to_double	vector/vectorf256e.h	/^static inline Vec4d to_double(Vec4q const & a) {$/;"	f
to_double_high	vector/vectorf128.h	/^static inline Vec2d to_double_high(Vec4i const & a) {$/;"	f
to_double_low	vector/vectorf128.h	/^static inline Vec2d to_double_low(Vec4i const & a) {$/;"	f
to_float	vector/vectorf128.h	/^static inline Vec4f to_float(Vec4i const & a) {$/;"	f
to_float	vector/vectorf256.h	/^static inline Vec8f to_float(Vec8i const & a) {$/;"	f
to_float	vector/vectorf256e.h	/^static inline Vec8f to_float(Vec8i const & a) {$/;"	f
to_single	vector/special/complexvec.h	/^static inline Complex2f to_single (Complex2d const & a) {$/;"	f
to_single	vector/special/complexvec.h	/^static inline Complex4f to_single (Complex4d const & a) {$/;"	f
to_single	vector/special/quaternion.h	/^static inline Quaternion4f to_single (Quaternion4d const & a) {$/;"	f
to_single	vector/special/vector3d.h	/^static inline Vec3f to_single (Vec3d const & a) {$/;"	f
to_vector	vector/special/complexvec.h	/^    Vec2d to_vector() const {$/;"	f	class:Complex2d
to_vector	vector/special/complexvec.h	/^    Vec4d to_vector() const {$/;"	f	class:Complex4d
to_vector	vector/special/complexvec.h	/^    Vec4f to_vector() const {$/;"	f	class:Complex2f
to_vector	vector/special/complexvec.h	/^    Vec4f to_vector() const {$/;"	f	class:Complex4f
to_vector	vector/special/complexvec.h	/^    Vec8f to_vector() const {$/;"	f	class:Complex8f
to_vector	vector/special/quaternion.h	/^    Vec4d to_vector() const {$/;"	f	class:Quaternion4d
to_vector	vector/special/quaternion.h	/^    Vec4f to_vector() const {$/;"	f	class:Quaternion4f
to_vector	vector/special/vector3d.h	/^    Vec4f to_vector() const {$/;"	f	class:Vec3f
toleaf	MUMmer/src/kurtz/streesrc/streetyp.h	/^  BOOL toleaf;$/;"	m	struct:__anon7
top_down	sparseSA.cpp	/^bool sparseSA::top_down(char c, long i, long &start, long &end) {$/;"	f	class:sparseSA
top_down_child	sparseSA.cpp	/^bool sparseSA::top_down_child(char c, interval_t &cur){$/;"	f	class:sparseSA
top_down_faster	sparseSA.cpp	/^bool sparseSA::top_down_faster(char c, long i, long &start, long &end) {$/;"	f	class:sparseSA
totallength	MUMmer/src/kurtz/libbasedir/multidef.h	/^       totallength;                    \/\/ the total length of all sequences$/;"	m	struct:__anon21
transC	MUMmer/src/tigr/postpro.cc	/^inline long int transC$/;"	f
transdna	MUMmer/src/tigr/translate.hh	/^const int	transdna[256] = {$/;"	v
transform	qsufsort.c	/^static int transform(int *x, int *p, int n, int k, int l, int q)$/;"	f	file:
traverse	sparseSA.cpp	/^void sparseSA::traverse(string &P, long prefix, interval_t &cur, int min_len) {$/;"	f	class:sparseSA
traverse_faster	sparseSA.cpp	/^void sparseSA::traverse_faster(const string &P,const long prefix, interval_t &cur, int min_len){$/;"	f	class:sparseSA
trim	fasta.cpp	/^void trim(string &line, long &start, long &end) {$/;"	f
truncate	vector/vectorf128.h	/^static inline Vec2d truncate(Vec2d const & a) {$/;"	f
truncate	vector/vectorf128.h	/^static inline Vec4f truncate(Vec4f const & a) {$/;"	f
truncate	vector/vectorf256.h	/^static inline Vec4d truncate(Vec4d const & a) {$/;"	f
truncate	vector/vectorf256.h	/^static inline Vec8f truncate(Vec8f const & a) {$/;"	f
truncate	vector/vectorf256e.h	/^static inline Vec4d truncate(Vec4d const & a) {$/;"	f
truncate	vector/vectorf256e.h	/^static inline Vec8f truncate(Vec8f const & a) {$/;"	f
truncate_to_int	vector/vectorf128.h	/^static inline Vec4i truncate_to_int(Vec2d const & a, Vec2d const & b) {$/;"	f
truncate_to_int	vector/vectorf128.h	/^static inline Vec4i truncate_to_int(Vec4f const & a) {$/;"	f
truncate_to_int	vector/vectorf256.h	/^static inline Vec4i truncate_to_int(Vec4d const & a) {$/;"	f
truncate_to_int	vector/vectorf256.h	/^static inline Vec8i truncate_to_int(Vec8f const & a) {$/;"	f
truncate_to_int	vector/vectorf256e.h	/^static inline Vec4i truncate_to_int(Vec4d const & a) {$/;"	f
truncate_to_int	vector/vectorf256e.h	/^static inline Vec8i truncate_to_int(Vec8f const & a) {$/;"	f
truncate_to_int64	vector/vectorf128.h	/^static inline Vec2q truncate_to_int64(Vec2d const & a) {$/;"	f
truncate_to_int64	vector/vectorf256.h	/^static inline Vec4q truncate_to_int64(Vec4d const & a) {$/;"	f
truncate_to_int64	vector/vectorf256e.h	/^static inline Vec4q truncate_to_int64(Vec4d const & a) {$/;"	f
type	mummer.cpp	/^mum_t type = MAM;$/;"	v
uint0	MUMmer/src/kurtz/libbasedir/types.h	/^  Uint uint0, uint1, uint2, uint3;$/;"	m	struct:__anon15
uint0	MUMmer/src/kurtz/libbasedir/types.h	/^  Uint uint0, uint1, uint2;$/;"	m	struct:__anon14
uint0	MUMmer/src/kurtz/libbasedir/types.h	/^  Uint uint0, uint1;$/;"	m	struct:__anon13
uint1	MUMmer/src/kurtz/libbasedir/types.h	/^  Uint uint0, uint1, uint2, uint3;$/;"	m	struct:__anon15
uint1	MUMmer/src/kurtz/libbasedir/types.h	/^  Uint uint0, uint1, uint2;$/;"	m	struct:__anon14
uint1	MUMmer/src/kurtz/libbasedir/types.h	/^  Uint uint0, uint1;$/;"	m	struct:__anon13
uint16_t	vector/instrset.h	/^  typedef unsigned __int16 uint16_t;$/;"	t
uint16_t	vector/instrset.h	/^  typedef unsigned short int uint16_t;$/;"	t
uint2	MUMmer/src/kurtz/libbasedir/types.h	/^  Uint uint0, uint1, uint2, uint3;$/;"	m	struct:__anon15
uint2	MUMmer/src/kurtz/libbasedir/types.h	/^  Uint uint0, uint1, uint2;$/;"	m	struct:__anon14
uint3	MUMmer/src/kurtz/libbasedir/types.h	/^  Uint uint0, uint1, uint2, uint3;$/;"	m	struct:__anon15
uint32_t	vector/instrset.h	/^  typedef unsigned __int32 uint32_t;$/;"	t
uint32_t	vector/instrset.h	/^  typedef unsigned int       uint32_t;$/;"	t
uint64_t	vector/instrset.h	/^  typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	vector/instrset.h	/^  typedef unsigned long long uint64_t;$/;"	t
uint8_t	vector/instrset.h	/^  typedef unsigned __int8  uint8_t;$/;"	t
uint8_t	vector/instrset.h	/^  typedef unsigned char      uint8_t;$/;"	t
universal	MUMmer/src/tigr/translate.hh	/^const char	universal[NUM_DNA_SYMBOLS * NUM_DNA_SYMBOLS * NUM_DNA_SYMBOLS] = {$/;"	v
untilfirstblank	MUMmer/src/kurtz/libbasedir/multidef.h	/^       untilfirstblank;  \/\/ only show sequence until first blank$/;"	m	struct:__anon22
update_group	qsufsort.c	/^static void update_group(int *pl, int *pm)$/;"	f	file:
usage	mummer.cpp	/^void usage(string prog) {$/;"	f
usecases	MUMmer/docs/web/manual/index.html	/^<h2><a name="usecases" id="usecases"><\/a>4. Use cases and walk-throughs<\/h2>$/;"	a
used	MUMmer/src/tigr/delta.cc	/^  bool used;$/;"	m	struct:LIS_t	file:
used	MUMmer/src/tigr/sw_align.hh	/^  char used;$/;"	m	struct:Score
utilities	MUMmer/docs/web/manual/index.html	/^<h3><a name="utilities"><\/a>5.4. Utilities<\/h3>$/;"	a
val	sparseSA.hpp	/^    size_t idx; int val;$/;"	m	struct:vec_uchar::item_t
val	vector/vectori128.h	/^    enum {val = ($/;"	e	enum:BitScanR::__anon25
val	vector/vectori128.h	/^template <> struct BitScanR<0> {enum {val = 0};};                    \/\/ Avoid infinite template recursion$/;"	e	enum:BitScanR::__anon26
validateData	MUMmer/src/tigr/postnuc.cc	/^void validateData$/;"	f
validateData	MUMmer/src/tigr/postpro.cc	/^void validateData$/;"	f
value	MUMmer/src/tigr/sw_align.hh	/^  long int value;$/;"	m	struct:Score
vec	sparseSA.hpp	/^  vector<unsigned char> vec;  \/\/ LCP values from 0-65534$/;"	m	struct:vec_uchar
vec_uchar	sparseSA.hpp	/^struct vec_uchar {$/;"	s
vector_length	vector/special/vector3d.h	/^static inline double vector_length (Vec3d const & a) {$/;"	f
vector_length	vector/special/vector3d.h	/^static inline float vector_length (Vec3f const & a) {$/;"	f
wasFused	MUMmer/src/tigr/postnuc.cc	/^  bool wasFused;             \/\/ have the cluster matches been fused yet?$/;"	m	struct:Cluster	file:
wasFused	MUMmer/src/tigr/postpro.cc	/^  bool wasFused;          \/\/ have the cluster matches been extended yet?$/;"	m	struct:Cluster	file:
wccSequence	MUMmer/src/kurtz/mm3src/procmaxmat.c	/^static void wccSequence (Uchar *seq,$/;"	f	file:
wfrom	MUMmer/src/tigr/show-coords.cc	/^  long int from, wfrom;$/;"	m	struct:LASstats	file:
whichDataType	MUMmer/src/tigr/show-coords.cc	/^int  whichDataType = NUCMER_DATA;       \/\/ set by .delta header$/;"	v
wpoint	MUMmer/src/tigr/show-coords.cc	/^  bool wpoint;$/;"	m	struct:LASstats	file:
wrapspace	MUMmer/src/kurtz/libbasedir/space.c	/^void wrapspace(void)$/;"	f
wscore	MUMmer/src/tigr/show-coords.cc	/^  long int score, wscore;$/;"	m	struct:LASstats	file:
xgetbv	vector/instrset_detect.cpp	/^static inline int64_t xgetbv (int ctr) {	$/;"	f	file:
xmm	vector/special/complexvec.h	/^    __m128 xmm; \/\/ vector of 4 single precision floats$/;"	m	class:Complex4f
xmm	vector/special/complexvec.h	/^    __m128 xmm; \/\/ vector of 4 single precision floats. Only the first two are used$/;"	m	class:Complex2f
xmm	vector/special/complexvec.h	/^    __m128d xmm; \/\/ double vector$/;"	m	class:Complex2d
xmm	vector/special/quaternion.h	/^    __m128 xmm; \/\/ vector of 4 single precision floats$/;"	m	class:Quaternion4f
xmm	vector/vectorf128.h	/^    __m128 xmm; \/\/ Float vector$/;"	m	class:Vec4f
xmm	vector/vectorf128.h	/^    __m128 xmm; \/\/ Float vector$/;"	m	class:Vec4fb
xmm	vector/vectorf128.h	/^    __m128d xmm; \/\/ Double vector$/;"	m	class:Vec2db
xmm	vector/vectorf128.h	/^    __m128d xmm; \/\/ double vector$/;"	m	class:Vec2d
xmm	vector/vectori128.h	/^    __m128i xmm; \/\/ Integer vector$/;"	m	class:Vec128b
y	vector/special/complexvec.h	/^    Vec4d y; \/\/ vector of 4 doubles$/;"	m	class:Complex4d
y	vector/special/complexvec.h	/^    Vec8f y; \/\/ vector of 8 floats$/;"	m	class:Complex8f
y	vector/special/quaternion.h	/^    Vec4d y; \/\/ vector of 4 doubles$/;"	m	class:Quaternion4d
y0	vector/vectorf256e.h	/^    __m128 y0;                         \/\/ low half$/;"	m	class:Vec256fe
y0	vector/vectorf256e.h	/^    __m128d y0;                        \/\/ low half$/;"	m	class:Vec256de
y0	vector/vectori256e.h	/^    __m128i y0;                         \/\/ low half$/;"	m	class:Vec256ie
y1	vector/vectorf256e.h	/^    __m128 y1;                         \/\/ high half$/;"	m	class:Vec256fe
y1	vector/vectorf256e.h	/^    __m128d y1;                        \/\/ high half$/;"	m	class:Vec256de
y1	vector/vectori256e.h	/^    __m128i y1;                         \/\/ high half$/;"	m	class:Vec256ie
ymm	vector/vectorf256.h	/^    __m256 ymm; \/\/ Float vector$/;"	m	class:Vec8f
ymm	vector/vectorf256.h	/^    __m256 ymm; \/\/ Float vector$/;"	m	class:Vec8fb
ymm	vector/vectorf256.h	/^    __m256d ymm; \/\/ double vector$/;"	m	class:Vec4d
ymm	vector/vectorf256.h	/^    __m256d ymm; \/\/ double vector$/;"	m	class:Vec4db
ymm	vector/vectori256.h	/^    __m256i ymm; \/\/ Integer vector$/;"	m	class:Vec256b
~DeltaEdge_t	MUMmer/src/tigr/delta.hh	/^  ~DeltaEdge_t ( )$/;"	f	struct:DeltaEdge_t
~DeltaEdgelet_t	MUMmer/src/tigr/delta.hh	/^  ~DeltaEdgelet_t ( )$/;"	f	struct:DeltaEdgelet_t
~DeltaGraph_t	MUMmer/src/tigr/delta.hh	/^  ~DeltaGraph_t ( )$/;"	f	class:DeltaGraph_t
~DeltaNode_t	MUMmer/src/tigr/delta.hh	/^  ~DeltaNode_t ( )$/;"	f	struct:DeltaNode_t
~DeltaReader_t	MUMmer/src/tigr/delta.hh	/^  ~DeltaReader_t ( )$/;"	f	class:DeltaReader_t
